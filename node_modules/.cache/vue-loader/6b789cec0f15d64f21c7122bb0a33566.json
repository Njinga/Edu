{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit5.vue?vue&type=template&id=34f11ce7&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit5.vue","mtime":1594191850954},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}