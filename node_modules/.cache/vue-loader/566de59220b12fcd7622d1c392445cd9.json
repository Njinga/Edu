{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit4.vue?vue&type=template&id=34e30566&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit4.vue","mtime":1593892972047},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "border border-light p-3 mb-5  rounded " }, [
    _c("div", { staticClass: "row" }, [
      _vm._m(0),
      _c("div", { staticClass: "col-sm-8 col-lg-9" }, [
        _c(
          "div",
          {
            staticClass:
              "scrollspy-example z-depth-1 mt-4 shadow-lg p-3 mb-5 rounded",
            attrs: {
              "data-spy": "scroll",
              "data-target": "#navbar-example3",
              "data-offset": "0"
            }
          },
          [
            _c("h1", { staticClass: "h1-responsive text-justify" }, [
              _vm._v("Unit 4")
            ]),
            _c("h1", { staticClass: "h1-responsive text-justify" }, [
              _vm._v(
                "Design and Development of Instructional Media and Materials"
              )
            ]),
            _c(
              "h2",
              {
                staticClass: "h2-responsive text-justify",
                attrs: { id: "item-1" }
              },
              [_vm._v("4.1 Introduction")]
            ),
            _c("div", { staticClass: "ml-5" }, [
              _c("p", { staticClass: "text-justify meme" }, [
                _vm._v(
                  " Teachers have long been known for their creative use of available tools and resources to produce instructional materials. Creating your own instructional materials is sometimes unavoidable in a classroom, given that teachers are faced with different and unique instructional situations. Since our students differ in their characteristics and learning needs, available instructional materials might not always work for our own situations. This calls for creativity on our part as teachers to design and produce our own instructional materials. "
                )
              ]),
              _vm._m(1),
              _vm._m(2),
              _c("p", { staticClass: "text-justify meme" }, [
                _vm._v(
                  " In this unit we will therefore introduce you to the concepts of designing, planning and producing instructional materials to meet your instructional goals. We will discuss the process for designing instructional materials so that you can be in a position to create your own instructional materials should the need arise. "
                )
              ]),
              _c(
                "div",
                { staticClass: "note note-secondary text-justify meme" },
                [
                  _vm._v(
                    " To help translate the theory that is presented in this unit into practice, you will be required to attend some demonstrations on how to produce different instructional media materials to meet your students learning needs. These demonstrations will be scheduled to take place in room C1: 1 within the Faculty of Education and you will be informed when to attend them. You will also be required to design your own instructional materials and make a presentation to a small group and this task will be graded as part of your practical work. You will receive further information and instructions on this task from the course lecturer. "
                  )
                ]
              ),
              _c("br"),
              _vm._m(3),
              _c("br"),
              _c("div", { staticClass: "note note-success text-justify" }, [
                _c("blockquote", { staticClass: "blockquote bq-success" }, [
                  _vm._m(4),
                  _c(
                    "p",
                    { staticClass: "text-justify" },
                    [
                      _c("kk", [_vm._v("Storyboarding:")]),
                      _vm._v(
                        "A technique borrowed from film and video production that allows you to creatively arrange and rearrange your sketches."
                      ),
                      _c("br"),
                      _c("br"),
                      _vm._v(" "),
                      _c("kk", [_vm._v("Graphic Materials:")]),
                      _vm._v(
                        "Materials in art form where ideas are expressed in diagrams, pictures, graphs, charts, collages and posters."
                      ),
                      _c("br"),
                      _c("br"),
                      _c("kk", [_vm._v("Chalkboard:")]),
                      _vm._v(
                        "Media used to write-on and display materials in the classroom."
                      ),
                      _c("br"),
                      _c("br"),
                      _c("kk", [_vm._v("Whiteboard:")]),
                      _vm._v(
                        " Like the chalkboard, a new media used to write-on and display materials in the classroom."
                      ),
                      _c("br"),
                      _c("br"),
                      _c("kk", [_vm._v("Audio Media:")]),
                      _vm._v(
                        "Media in the form of sound e.g. audio CD's, audio files and podcasts."
                      ),
                      _c("br"),
                      _c("br"),
                      _c("kk", [_vm._v("Community Resources:")]),
                      _vm._v(
                        "Resources found in the real context (in the community/place). Real things and objects are examples."
                      ),
                      _c("br"),
                      _c("br"),
                      _vm._v(" "),
                      _c("kk", [_vm._v("Computer-Based Media:")]),
                      _vm._v(
                        "Media pre-dominantly shown or displayed via a computer. Mostly electronic media."
                      ),
                      _c("br"),
                      _c("br"),
                      _c("kk", [_vm._v("Web-based Media:")]),
                      _vm._v(
                        "Media shown or displayed mostly over the Internet."
                      ),
                      _c("br")
                    ],
                    1
                  )
                ])
              ])
            ]),
            _c("br"),
            _c("br"),
            _c(
              "h2",
              {
                staticClass: "h2-responsive text-justify",
                attrs: { id: "item-2" }
              },
              [
                _vm._v(
                  "4.2 The Process for designing Instructional Media and Materials"
                )
              ]
            ),
            _vm._m(5),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-2-1" }
              },
              [_vm._v("4.2.1 Process for designing instructional media")]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _vm._m(6),
              _c("p", { staticClass: "text-justify meme" }, [
                _vm._v(
                  " Creation of instructional media by you as a teacher could be influenced by any one of the following intentions that might be served by media when you use it either with individuals, small groups, or with large groups: "
                )
              ]),
              _vm._m(7),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _vm._v(" Now let us consider each purposes in more detail."),
                  _c("br"),
                  _c("br"),
                  _vm._v(" For "),
                  _c("kk", [_vm._v("motivational purposes")]),
                  _vm._v(
                    ", dramatic or entertainment techniques may be employed. The desired result is to generate interest or stimulate learners to take certain action. This should involve accomplishing objectives that affect personal attitudes, values, and emotions."
                  ),
                  _c("br"),
                  _c("br"),
                  _vm._v(" For "),
                  _c("kk", [_vm._v("informational purposes")]),
                  _vm._v(
                    ", the instructional media would be used in a presentation made before a group of learners. The content and form of the presentation would be general in nature, serving as an introduction, an overview, a report, or background knowledge. It could therefore employ either entertainment, dramatic, or motivational techniques in order to attract and hold learners' attention. Usually, when viewing informational-type materials, the individuals tend to be passive viewers or listeners."
                  ),
                  _c("br"),
                  _c("br"),
                  _vm._v(" For "),
                  _c("kk", [_vm._v("instructional purposes")]),
                  _vm._v(
                    ", while presentation of information is important, attention is also given to involving the participants or the students in our case in either mental or overt activities relating to the instructional media being used so that learning can take place. The materials themselves should be designed more systematically in terms of learning principles in order to provide effective instruction but at the same time, they should be enjoyable and provide pleasant experiences. It is desirable to make provision for the individual learner to use instructional media on their own. "
                  )
                ],
                1
              ),
              _vm._m(8),
              _vm._m(9),
              _vm._m(10),
              _vm._m(11),
              _vm._m(12)
            ]),
            _c("br"),
            _c("br"),
            _c(
              "h2",
              {
                staticClass: "h2-responsive text-justify",
                attrs: { id: "item-3" }
              },
              [
                _vm._v(
                  "4.3 How to Design, Plan and Produce Different Types of Instructional Materials"
                )
              ]
            ),
            _vm._m(13),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-3-1" }
              },
              [_vm._v("4.3.1 Process of visual design ")]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _vm._m(14),
              _vm._m(15),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [_c("i", [_vm._v("Visual elements")])]),
                  _c("br"),
                  _vm._v(
                    " The type of visuals selected for a particular situation depends on the learning task. For example, based on Dale's Cone of Experience that we discussed in Unit 2, visual symbols can be divided into three categories, namely; realistic, analogic, and organizational (Houghton & Willows, 1987). "
                  )
                ],
                1
              ),
              _vm._m(16),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [_c("i", [_vm._v("Verbal Elements")])]),
                  _c("br"),
                  _vm._v(
                    " These refer to lettering style and location. Most displays incorporate some type of verbal information in addition to visuals. When evaluating a display for its instructional potential, or in preparing your own display, you need to consider the lettering as it can add to effective communication effectively too. At a minimum, ensure that lettering is legible in terms of size and spacing and that the style is consistent with the intended message."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("i", [_vm._v("Letter Style")]),
                  _c("br"),
                  _vm._v(
                    " The lettering style should be consistent and in harmony with the other elements of the visual. For informational and instructional purposes, a plain (not decorative) lettering style is recommended. It is recommended that a display -or series of related visuals, such as a slide series-use no more than two different types of styles, which should be in harmony with each other."
                  ),
                  _c("br"),
                  _c("br"),
                  _vm._v(
                    " For best legibility, use lowercase letters, adding capitals or uppercase only where normally required. The colour of the lettering should contrast with the background colour for purposes of legibility since legibility depends on contrast."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("i", [_vm._v("Size of letters")]),
                  _c("br"),
                  _vm._v(
                    " Displays such as bulletin boards are meant to be viewed by people situated at a distance of about ten (10) meters. In such cases, the size of letters is crucia l for legibility. A common rule of thumb is to make lowercase letters 1.2 centimeters for each four (4) meters of viewer distance."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("i", [_vm._v("Spacing between letters")]),
                  _c("br"),
                  _vm._v(
                    " The distance between the letters of the individual words must be judged by experience rather than on mechanical basis since some letters are irregular compared to others."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("i", [_vm._v("Spacing between lines")]),
                  _c("br"),
                  _vm._v(
                    " Vertical spacing between lines is also important for legibility. If the lines are too close together, they blur the distance and if they are too far apart, they will seem disjointed. For equal spacing, start by drawing lines of equal distance using a ruler. This will help you get used to even line spacing."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("i", [_vm._v("Elements that Add Appeal")]),
                  _c("br"),
                  _vm._v(
                    " Your visuals will have a slim chance of having an effect unless they capture and hold the viewer's attention. How can you achieve this? "
                  )
                ],
                1
              ),
              _vm._m(17),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [_c("i", [_vm._v("Pattern")])]),
                  _c("br"),
                  _vm._v(
                    " Once you have made decisions on the elements to include in your visual display, you should then decide on how the viewer's eyes will flow across the display. This is what can be described as 'pattern'. Pattern is influenced by; alignment, shape, balance, style, colour scheme and colour appeal."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("i", [_vm._v("Alignment")]),
                  _vm._v(
                    " refers to positioning of elements to give a clear visual relationship to each other in order to aid understanding and interpretation. Viewers will perceive elements to be aligned when the edges of those elements are aligned on the same imaginary horizontal and vertical line. These imaginary lines should be parallel to the edges of the display."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("i", [_vm._v("Shape")]),
                  _vm._v(
                    "-Visuals should be arranged to present a shape that is familiar to the viewers. Use a pattern that attracts and focuses attention as effortless as possible. For example circles, rectangles, or tri-angles provide a convenient framework, as the shape is predictable to the viewers."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("i", [_vm._v("Colour scheme")]),
                  _vm._v(
                    "- as you choose colour, consider the harmony of the colours. Any two colours that lie directly opposite each other on the colour wheel are called complementary colours such as red and green, or yellow and violet. "
                  ),
                  _c("kk", [_vm._v("Complementary colours")]),
                  _vm._v(
                    " harmonize well in terms of overall colour scheme. Colours that lie next to each other on the colour wheel are called "
                  ),
                  _c("kk", [_vm._v("analogous colours")]),
                  _vm._v(
                    ". For instance, blue-green, blue, and blue-violet are analogous colours. Colour appeal is also important. Artists appreciate that blue, green, and violet are cool colours while red and orange are considered warm colours. When choosing colour for instructional materials, consider the emotional response that you are seeking. "
                  )
                ],
                1
              ),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [_c("i", [_vm._v("Arrangement")])]),
                  _c("br"),
                  _vm._v(
                    " You should arrange items within the pattern as viewers assume that elements close together are related and those that are far apart are unrelated. If a display includes verbal labels for the picture elements, connect the related words and pictures clearly."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("kk", [_c("i", [_vm._v("Consistency")])]),
                  _c("br"),
                  _vm._v(
                    " If you are planning a series of displays such as a set of overhead transparencies or PowerPoint slides, you should be consistent in the arrangement of elements. "
                  )
                ],
                1
              )
            ]),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-3-2" }
              },
              [_vm._v("4.3.2 Visual planning tools")]
            ),
            _c("div", { staticClass: "ml-5" }, [
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _vm._v(
                    " When you plan and design your visuals you could use visual planning tools such as "
                  ),
                  _c("kk", [
                    _c("i", [
                      _vm._v(
                        "story boarding and lettering stencils and guides."
                      )
                    ])
                  ]),
                  _vm._v(
                    " Storyboarding is a technique borrowed from film and video production that allows you to creatively arrange and rearrange your sketches. In storyboarding, a sketch or a simple representation of the visuals you plan to use is put on a card or a piece of paper along with the narration. After a series of cards have been developed, they are placed in a rough sequence on a flat surface or on a storyboard holder. You can use small pieces of paper to create your storyboard. The individual storyboard cards or papers can then be divided into areas to accommodate the visuals, narration and production notes. The format of a storyboard should fit your need and purpose."
                  ),
                  _c("br"),
                  _c("br"),
                  _vm._v(
                    " A wide variety of lettering techniques for visuals exist. The simplest is freehand lettering with markers and felt-tip pens which come in an array of colours. Letters can also be cut from construction paper or other materials. Pre- cut letters are available in stationery and office supply stores. These letters are easy to use as they come with an adhesive backing. You could also purchase lettering guides from stationery stores. Desktop publishing systems also frequently use lettering in various styles and sizes. "
                  )
                ],
                1
              )
            ]),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-3-3" }
              },
              [_vm._v("4.3.3 Examples of visuals that you could design")]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [_vm._v("Graphic materials")]),
                  _c("br"),
                  _vm._v(
                    " Graphics is an art form where ideas are expressed in diagrams, pictures, graphs, charts, collages and posters. Much of graphic material is made for display on bulletin boards, flannel boards and chalkboards. If you think about it hard enough, you will realize that graphics are part of our everyday life. After all wedo see graphics on the billboards, on TV commercials, on clothes, etc. Graphics attempt to express or convey a thought, impression or point of view. Much of the graphic media is not only useful as motivational materials but also, you and your students can easily create them."
                  ),
                  _c("br"),
                  _c("br"),
                  _vm._v(
                    " Posters in particular are very effective in promoting school activities, campaigns and special events. You could follow the design procedure that we have discussed earlier on to design your own posters. Remember that posters rely on use of symbols to express certain ideas, lettering and colour. One form of poster that you could involve your students in creating "
                  ),
                  _c("kk", [_c("i", [_vm._v("is collage")])]),
                  _vm._v(
                    ". A collage is an art form that uses layers and textures of materials to portray a symbolic picture. Materials for making collage could be obtained from pictures, cloth, newspapers, magazines etc. "
                  )
                ],
                1
              ),
              _c("br"),
              _vm._m(18)
            ]),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-3-4" }
              },
              [_vm._v("4.3.4 Designing text ")]
            ),
            _vm._m(19),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-3-5" }
              },
              [_vm._v("4.3.5 Chalkboard ")]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _vm._v(
                    " The chalkboard is probably the most widely used media display in the classroom since even the most disadvantaged schools at least has a chalkboard. It is also the easiest media to use either for writing or for displaying other types of media. To make the chalkboard an effective instructional media also requires planning, and effective chalkboard techniques require practice. Use of the chalkboard is not likely to make a poor teacher a good teacher, but its appropriate use can make both poor teachers and good teachers better."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("kk", [_vm._v("Planning for chalkboard Use")]),
                  _c("br"),
                  _vm._v(
                    " Before you use the chalkboard ask yourself these questions; "
                  )
                ],
                1
              ),
              _vm._m(20),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _vm._v(
                    " Therefore, think before you write or draw on the chalkboard to consider what you want to show, and how best to present it."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("kk", [
                    _vm._v("Role of the chalkboard during instruction")
                  ]),
                  _c("br"),
                  _vm._v(
                    " The chalkboard can be used to prepare drawings or writing. You can draw your diagrams or illustrations in advance before the class commences and then keep it covered and only reveal it when you want to talk about that particular content or refer to the diagram for illustration. Colour should also be used as a way of motivating students and helping to emphasize specific aspects of the lesson. "
                  )
                ],
                1
              ),
              _c("p", { staticClass: "text-justify meme" }, [
                _c("i", [_vm._v("Improving your use of the chalkboard")]),
                _c("ul", [
                  _c("li", [
                    _vm._v(
                      " Always use a clean chalkboard since a key element to good visibility is contrast. The clearer the board, the better the visibility of what is written. "
                    )
                  ]),
                  _c("li", [
                    _vm._v(
                      " Make your chalkboard work readable. Whatever you write should be read even from the back of the class. This is achieved by producing bold, clear lines and letter characters. Spacing is critical in achieving readable writing. Spacing refers to regulation of distance between elements of a letter, letters in a word, words in a line, and between successive lines in a piece of writing. Spacing determines the shape of the letters. To ensure good, legible letters, the space between the downward strokes of letters like "
                    ),
                    _c("i", [_c("kk", [_vm._v("u")])], 1),
                    _vm._v(", and the breadth of letters like "),
                    _c("i", [_c("kk", [_vm._v("o")])], 1),
                    _vm._v(" must have uniform appearance. ")
                  ]),
                  _c("li", [
                    _vm._v(
                      " The spacing of letter elements should be constant. Letters and the spacing between the letters should be uniform and when forming a word, letters should be written close together to ensure legibility. "
                    )
                  ]),
                  _c("li", [
                    _vm._v(
                      " Legibility of words is affected by excessively small spaces. Successive lines of writing must also be properly spaced for good legibility. "
                    )
                  ]),
                  _c("li", [
                    _vm._v(
                      " Good spacing in writing requires conscious attention and regular practice until it becomes a habit. "
                    )
                  ]),
                  _c("li", [
                    _vm._v(
                      " Have a plan for your chalkboard work and do not write all over the board. Only use the chalkboard to record important information to emphasize the key points in the lesson. "
                    )
                  ]),
                  _c("li", [
                    _vm._v(
                      " Use a pointer to direct the students' attention to specific items that you have written on the chalkboard. "
                    )
                  ]),
                  _c("li", [
                    _vm._v(
                      " Use mechanical lettering guides such as rulers, coloured chalk, or templates (readily designed shapes). "
                    )
                  ]),
                  _c("li", [
                    _vm._v(
                      " Always walk to the back of your class and confirm that what you have written on the board is legible enough and well organized. "
                    )
                  ])
                ])
              ]),
              _c("br"),
              _vm._m(21)
            ]),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-3-6" }
              },
              [_vm._v("4.3.6 Whiteboard")]
            ),
            _vm._m(22),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-3-7" }
              },
              [_vm._v("4.3.7 Designing overhead transparencies")]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [
                    _vm._v(" Procedure"),
                    _c("br"),
                    _vm._v(
                      " It is advisable to follow a practical procedure when designing overhead transparencies. The procedure includes: "
                    )
                  ]),
                  _c("ul", [
                    _c("li", [
                      _vm._v(
                        " Follow the design principles presented to you under the sub-topic on designing visuals. "
                      )
                    ]),
                    _c("li", [
                      _vm._v(
                        " Assemble the elements. When you are choosing elements, remember that viewers will stop reading text once they know what it says, but will continue looking at illustrations, especially when they are talking about them. Therefore, use more graphical elements than text in your transparencies and supply verbal explanations yourself. Include text for key ideas only. If you are using write-on transparencies, make sure that you leave enough margins for the frame. "
                      )
                    ]),
                    _c("li", [
                      _vm._v(
                        " Choose background and underlying pattern. The title area should be at the top where viewers begin to scan the display. Content area should be limited to 1 or 2 images at most for graphical displays and at most 6 bullet points for text display. If you are using computer generated transparencies, you could select a template for the underlying pattern. "
                      )
                    ]),
                    _c(
                      "li",
                      [
                        _vm._v(
                          " Arrange the elements. Since the elements in a transparency should be fairly large in order to project well, the challenge is to fit the elements into the available space. In case you have information that could be presented in a certain sequence, you might consider designing "
                        ),
                        _c("kk", [_c("i", [_vm._v("overlays")])]),
                        _vm._v(
                          " where the bottom or the first transparency serves as the base and any additional information builds on to it. "
                        )
                      ],
                      1
                    ),
                    _c("li", [
                      _vm._v(
                        " Check and revise. Practice your transparencies and check on visibility of your elements. "
                      )
                    ])
                  ])
                ],
                1
              )
            ]),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-3-8" }
              },
              [_vm._v("4.3.8 Design of Power Point presentations")]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _c("p", { staticClass: "text-justify meme" }, [
                _vm._v(
                  " It is important to know how you can design Power Point presentations nowadays since the world has become digitalized. The following points will help you get organized. "
                )
              ]),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [_vm._v("1. Plan your content first")]),
                  _c("br"),
                  _vm._v(
                    " Many people start the process of creating a presentation in PowerPoint by entering text on the slides. This is not a good idea. The content should drive the design. So the most important recommendation is to plan your content first."
                  ),
                  _c("br"),
                  _c("br"),
                  _vm._v(
                    " Always start your presentation on paper or word processor - draw your ideas and link relationships between concepts. Ask yourself these important questions before creating your presentation."
                  ),
                  _c("br"),
                  _vm._m(23)
                ],
                1
              ),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [
                    _vm._v(
                      "2. Use a plain background and remove any unnecessary detail"
                    )
                  ]),
                  _vm._v(
                    " When it comes to slide design, you should not think of decoration, but of communication. Everything you add to your slides should add value to the message you are communicating. Removing extraneous information from a screen actually increases learning."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("kk", [_vm._v("3. One idea per slide")]),
                  _vm._v(
                    " Use each slide to express one idea. You can completely transform your presentation from boring bullets to high impact visuals by putting one point on a slide. Something as simple as having only one main idea per slide makes a big difference. Fewer words on each slide will attract more attention and create a lasting impact."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("kk", [
                    _vm._v(" 4. Support the headline with graphic evidence")
                  ]),
                  _vm._v(
                    " Instead of bullets, support your points with graphic evidence. This can include "
                  ),
                  _c("i", [_vm._v("photos, images, charts and diagrams")]),
                  _vm._v(
                    ". Say the words and put the visuals on your slides. Support your points with creative and relevant images. "
                  )
                ],
                1
              ),
              _vm._m(24),
              _c("br"),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [_vm._v("5. You don't always need a slide")]),
                  _vm._v(
                    " Not every point in your presentation needs a slide. You only need a visual aid in a presentation if you would need one in conversation. Slides should be projected only when they serve the presentation. When you are not showing a slide, insert a plain black slide into your slideshow."
                  ),
                  _c("br"),
                  _c("br"),
                  _vm._v(
                    " For example you can use flip charts with or without PowerPoint; flip charts can be used to sketch out an idea, get input from the audience or provide a group activity to keep a presentation lively. In this case, there is movement, there is interaction, there is problem solving, and the activity is spontaneous and created on the spot."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("kk", [_vm._v("6. Put detail in the handouts")]),
                  _vm._v(
                    " Create handouts that are distributed after the presentation. Your handouts are the repository for detailed information. "
                  )
                ],
                1
              )
            ]),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-3-9" }
              },
              [_vm._v("4.3.9 Designing audio media ")]
            ),
            _vm._m(25),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-3-10" }
              },
              [_vm._v("4.3.10 Designing a PODCAST")]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _c("p", { staticClass: "text-justify meme" }, [
                _vm._v(
                  " A podcast is an audio blog post created by recording your voice or other sound, uploading the recording to the Internet, and publishing it on your blog. The first step therefore is for you to have created a blog. Visitors to your blog simply select a link on your blog, turn on their computer speakers and listen to your podcast (or audio blog post) rather than reading your post. "
                )
              ]),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [
                    _vm._v("What you need in order to create a Podcast")
                  ]),
                  _c("br"),
                  _vm._m(26)
                ],
                1
              ),
              _vm._m(27),
              _c("br"),
              _vm._m(28)
            ]),
            _c("br"),
            _c("br"),
            _c(
              "h2",
              {
                staticClass: "h2-responsive text-justify",
                attrs: { id: "item-4" }
              },
              [_vm._v("4.4 Utilizing Materials during Instruction")]
            ),
            _vm._m(29),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-4-1" }
              },
              [_vm._v("4.4.1 Printed materials")]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _vm._v(
                    " In this section we are going to discuss how we can utilize printed materials effectively during instruction. As we mentioned in Unit 2, printed materials are among the most commonly used form of instructional materials in most classrooms. In spite of the recent public fascination with new electronic media, it is unlikely that printed materials will ever be eliminated as a vehicle of instruction and it will always have an important role to play in instruction. Admittedly, the current spreading trend towards electronic communication (e-mail systems, Database Networks, and World Wide Web Hypermedia such as; Portable Document Formats (PDF), and Hyper Text Mail Language (Html), have just added several new media of transmission for printed messages and they have also added to the amount of reading that a typical person can cope with (Romiszowski, 1988:128)."
                  ),
                  _c("br"),
                  _c("br"),
                  _vm._v(
                    " The role of printed materials is being enhanced by information revolution and the days of printed media are far from being over. However, this does not suggest that printed materials are used effectively and efficiently during instruction. In-fact, quite often instructors abuse printed materials during instruction. The abuse of printed materials results from the ease with which printed materials can be obtained, reproduced and circulated which often leads to their excessive and inappropriate use in the instructional process."
                  ),
                  _c("br"),
                  _c("br"),
                  _vm._v(
                    " It is strongly recommend that you use printed materials correctly during instruction. Teachers need to follow the correct procedure for utilizing instructional materials."
                  ),
                  _c("br"),
                  _c("br"),
                  _vm._v(" The following types of printed materials; "),
                  _c("kk", [
                    _vm._v(
                      " text books, handouts, assignment sheets, individualized study materials, word processed documents, and work sheets "
                    )
                  ]),
                  _vm._v(
                    ". Let us consider each of these types in more detail. "
                  )
                ],
                1
              ),
              _c(
                "p",
                { staticClass: "text-justify meme ml-5" },
                [
                  _c("kk", [_vm._v("Text books")]),
                  _vm._v(
                    " - These are versatile and provide random access to the message that it contains and users are able to control the process by which they gain the information that they seek. Text books are relatively cheap compared to other types of media. They are also durable, and easily accessible. They are portable, and fairly economical to buy and maintain. As we mentioned in Unit 2, text books can be used either as basic text or as chief sources of information for a particular class level and subject, as a core-basic text with two or more other titles complementing each other, or as supplementary and enriching source of information for a particular subject and class level."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("kk", [_vm._v("Handouts")]),
                  _vm._v(
                    " - comprise of the different types of information-providing materials that are given out to students usually in connection with a taught lesson or programme. They include; sets of notes (complete or in skeleton form), tables, diagrams, maps, or any other illustrations or support materials. Handouts can be used for a wide range of purposes such as; complete sets of notes for specific areas of the curriculum or topic, designed to be given to students to save them from having to take notes during the lesson. For example, handouts could comprise of skeleton notes with blank spaces given to students to complete during the lesson or a shorter document usually one sheet that is given to students to save them from having to copy complicated diagrams, maps, sets of data or assist when illustrating specific concept or idea."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("kk", [_vm._v("Assignment sheets")]),
                  _vm._v(
                    " - comprise of materials given to students describing tasks to be carried out. They include; problem description sheets, reading lists, laboratory recording sheets, briefing sheets for projects and seminars, etc."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("kk", [_vm._v("Individualized study materials")]),
                  _vm._v(
                    " - comprise of the different textual materials that are used in connection with individualized learning such as study guides, modules, structured notes, textual support materials for mediated learning systems, etc. "
                  )
                ],
                1
              ),
              _vm._m(30),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [_vm._v("Resource materials for group exercises")]),
                  _vm._v(
                    " - comprise of the various printed materials that are used in connection with group learning exercises. For example; background reading material, instruction sheets, data sheets, etc."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("kk", [_vm._v("Worksheets")]),
                  _vm._v(
                    " - implies a device by which the teacher helps the students to work as far as possible to his/her full capacity. A worksheet is not merely an instruction sheet with one or more precise instructions, but it also includes questions that even though demanding they encourage students to think for themselves about the results of their work and thereafter draw conclusions. "
                  )
                ],
                1
              ),
              _vm._m(31)
            ]),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-4-2" }
              },
              [
                _vm._v(
                  "4.4.2 Advantages and disadvantages of using different types of printed materials "
                )
              ]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _vm._v(
                    " There are both advantages and disadvantages associated with the use of printed materials during instruction."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("kk", [_vm._v("Advantages")]),
                  _vm._m(32)
                ],
                1
              ),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [_c("kk", [_vm._v("Disadvantages")]), _vm._m(33)],
                1
              )
            ]),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-4-3" }
              },
              [_vm._v("4.4.3 Application of printed materials ")]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _vm._v(
                    " The most common application of printed materials is the presentation of content information (Heinich et al. 1996:108). Students are given reading assignments and held accountable for the material during class discussion and on tests. Teacher-made handouts can also complement a teacher's presentation or be used by students as they study independently."
                  ),
                  _c("br"),
                  _c("br"),
                  _vm._v(
                    " Students may also use printed materials to augment either the information presented by the teacher or other forms of media. Students frequently also refer to supplementary printed materials such as books and journals from the library or media centre to locate information on specific topics not covered in their textbook."
                  ),
                  _c("br"),
                  _c("br"),
                  _vm._v(
                    " Application of printed materials should be linked to types of learning and the various learning domains, namely;"
                  ),
                  _c("kk", [_vm._v(" cognitive, affective and psychomotor.")]),
                  _c("br"),
                  _c("br"),
                  _vm._v(
                    " Under cognitive learning, printed materials could sometimes (amongst many other things) be used to: "
                  ),
                  _vm._m(34),
                  _vm._v(
                    " Under psychomotor learning, printed materials can be used to: "
                  ),
                  _vm._m(35),
                  _vm._v(
                    " Under affective learning, printed materials can be used to: "
                  ),
                  _vm._m(36)
                ],
                1
              ),
              _c("p", { staticClass: "text-justify meme" }, [
                _vm._v(
                  " When selecting the printed materials, consider the desired type of learning so that you select materials that will bring out the type of learning outcomes that you wish to achieve. "
                )
              ]),
              _c("br"),
              _vm._m(37)
            ]),
            _c("br"),
            _c("br"),
            _c(
              "h2",
              {
                staticClass: "h2-responsive text-justify",
                attrs: { id: "item-5" }
              },
              [
                _vm._v(
                  "4.5 Utilizing Other Types of Instructional Materials during Instruction"
                )
              ]
            ),
            _vm._m(38),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-5-1" }
              },
              [
                _vm._v(
                  "4.5.1 Types of non-print media available for teaching and learning"
                )
              ]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _c("p", { staticClass: "text-justify meme" }, [
                _vm._v(
                  " In Unit 2 we identified different types of media other than print. Do you still remember them? In case you have forgotten, please go back to the unit to remind yourself the various types of non-print media that we mentioned. Have you identified the following categories of non-print media? "
                )
              ]),
              _vm._m(39),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [
                    _vm._v(
                      "Advantages and disadvantages of non-projected media "
                    )
                  ]),
                  _c("br"),
                  _vm._v(
                    " There are both advantages and disadvantages associated with using non-projected media. These are enumerated below: "
                  )
                ],
                1
              ),
              _vm._m(40),
              _vm._m(41),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [
                    _vm._v(
                      "Advantages and limitations of computer image projection"
                    )
                  ]),
                  _c("br"),
                  _c("br"),
                  _vm._v(
                    " The following are the advantages of computer image projection: "
                  ),
                  _vm._m(42)
                ],
                1
              ),
              _vm._m(43)
            ]),
            _c("br"),
            _c(
              "h3",
              {
                staticClass: "h3-responsive text-justify",
                attrs: { id: "item-5-2" }
              },
              [
                _vm._v(
                  "4.5.2 How to select and use different types of non-print media "
                )
              ]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _c("p", { staticClass: "text-justify meme" }, [
                _vm._v(
                  " Selecting the best medium or media for instructional purposes is not an easy job. This is due to the fact that choices are complex and difficult because they are based on a combination of interrelated factors such as: the abilities and learning needs of the students; the nature of the subject matter, the expected learning outcomes, the range of media available, as well as making a choice from the various alternative media available. However, there are some guidelines you could make proper selection. "
                )
              ]),
              _vm._m(44),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [_vm._v("General principles of media utilization")]),
                  _c("br"),
                  _vm._v(
                    " Brown et al. (1973:27) proposed some general principles in media use which are useful in media-selection and decision-making. These principles should guide us as we select and use media. These principles include that: "
                  ),
                  _vm._m(45)
                ],
                1
              )
            ]),
            _c("br"),
            _c(
              "h4",
              {
                staticClass: "h4-responsive text-justify",
                attrs: { id: "item-5-2-1" }
              },
              [
                _vm._v(
                  "4.5.2.1 Selecting and using different types of instructional materials"
                )
              ]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _c("p", { staticClass: "text-justify meme" }, [
                _c("ol", [
                  _c(
                    "li",
                    [
                      _vm._v(
                        " There are several points to consider when selecting and using different instructional materials. The discussion that follows will address that. "
                      ),
                      _c("kk", [_vm._v("Three -dimensional materials")]),
                      _c("br"),
                      _vm._v(
                        " Do you still remember that we did touch upon three- dimensional media earlier on? Write down what you can recall. Three-dimensional materials include; models, specimens, mock-ups, dioramas, and exhibits. Like all other instructional materials, three-dimensional teaching materials will not be effective unless they are used properly as part of a well-thought-out teaching strategy. You need to follow some basic guidelines in their use. The following guidelines are necessary: "
                      ),
                      _vm._m(46)
                    ],
                    1
                  ),
                  _c(
                    "li",
                    [
                      _c("kk", [_vm._v("Community resources")]),
                      _c("br"),
                      _vm._v(
                        " Did you know that the community has a wide variety of resources you could utilize for teaching and learning? Community resources include; places within the community, people, and activities and objects that are found within the community. "
                      )
                    ],
                    1
                  )
                ])
              ])
            ]),
            _c("br"),
            _c(
              "h4",
              {
                staticClass: "h4-responsive text-justify",
                attrs: { id: "item-5-2-2" }
              },
              [_vm._v("4.5.2.2 How to utilize community resources in teaching")]
            ),
            _vm._m(47),
            _c("br"),
            _c(
              "h4",
              {
                staticClass: "h4-responsive text-justify",
                attrs: { id: "item-5-2-3" }
              },
              [_vm._v("4.5.2.3 Two-dimensional visuals ")]
            ),
            _vm._m(48),
            _c("br"),
            _c(
              "h4",
              {
                staticClass: "h4-responsive text-justify",
                attrs: { id: "item-5-2-4" }
              },
              [_vm._v("4.5.2.4 Displays")]
            ),
            _vm._m(49),
            _c("br"),
            _c(
              "h4",
              {
                staticClass: "h4-responsive text-justify",
                attrs: { id: "item-5-2-5" }
              },
              [_vm._v("4.5.2.5 Utilizing audio materials ")]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _c("p", { staticClass: "text-justify meme" }, [
                _vm._v(
                  " Like all other media, before selecting and using audio materials, you should have analyzed your audience and stated the objectives according to the ASSURE model (Heinich et al., 1996). After that, you are ready to select, modify, or design your audio materials. The next step after selecting the audio materials is to use them with your class. "
                )
              ]),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _vm._v(" When utilizing audio materials, follow the "),
                  _c("kk", [_c("i", [_vm._v("five P's")])]),
                  _vm._v(" namely; "),
                  _vm._m(50)
                ],
                1
              ),
              _vm._m(51),
              _c("div", { staticClass: "table-responsive meme" }, [
                _c(
                  "table",
                  { staticClass: "table ", staticStyle: { width: "70%" } },
                  [
                    _c("thead", [
                      _c("tr", [
                        _c(
                          "th",
                          { attrs: { scope: "col" } },
                          [
                            _c("kk", [
                              _vm._v("Criteria for previewing audio materials")
                            ])
                          ],
                          1
                        ),
                        _c(
                          "th",
                          { attrs: { scope: "col" } },
                          [_c("kk", [_vm._v("Yes")])],
                          1
                        ),
                        _c(
                          "th",
                          { attrs: { scope: "col" } },
                          [_c("kk", [_vm._v("No")])],
                          1
                        )
                      ])
                    ]),
                    _c("tbody", [
                      _c("tr", [
                        _c(
                          "td",
                          [
                            _c("kk", [
                              _vm._v(
                                "1. Is the audio material relevant to the curriculum?"
                              )
                            ])
                          ],
                          1
                        ),
                        _c("td"),
                        _c("td")
                      ]),
                      _c("tr", [
                        _c(
                          "td",
                          [
                            _c("kk", [
                              _vm._v(
                                "2. Is it accurate and does it have current information? "
                              )
                            ])
                          ],
                          1
                        ),
                        _c("td"),
                        _c("td")
                      ]),
                      _c("tr", [
                        _c(
                          "td",
                          [
                            _c("kk", [
                              _vm._v(
                                "3. Is the language clear and appropriate for the level?"
                              )
                            ])
                          ],
                          1
                        ),
                        _c("td"),
                        _c("td")
                      ]),
                      _c("tr", [
                        _c(
                          "td",
                          [
                            _c("kk", [
                              _vm._v(
                                "4. Are the audio materials motivational and interesting?"
                              )
                            ])
                          ],
                          1
                        ),
                        _c("td"),
                        _c("td")
                      ]),
                      _c("tr", [
                        _c(
                          "td",
                          [
                            _c("kk", [
                              _vm._v("5. Does the material engage learners?")
                            ])
                          ],
                          1
                        ),
                        _c("td"),
                        _c("td")
                      ]),
                      _c("tr", [
                        _c(
                          "td",
                          [
                            _c("kk", [
                              _vm._v(
                                "6. Is the audio at a reasonable pacing for the learners?"
                              )
                            ])
                          ],
                          1
                        ),
                        _c("td"),
                        _c("td")
                      ]),
                      _c("tr", [
                        _c(
                          "td",
                          [
                            _c("kk", [
                              _vm._v(
                                "7. Is the material of good sound technical quality?"
                              )
                            ])
                          ],
                          1
                        ),
                        _c("td"),
                        _c("td")
                      ]),
                      _c("tr", [
                        _c(
                          "td",
                          [
                            _c("kk", [
                              _vm._v(
                                "8. Is the audio material clearly organized?"
                              )
                            ])
                          ],
                          1
                        ),
                        _c("td"),
                        _c("td")
                      ]),
                      _c("tr", [
                        _c(
                          "td",
                          [
                            _c("kk", [
                              _vm._v("9. Doe the material have a user guide?")
                            ])
                          ],
                          1
                        ),
                        _c("td"),
                        _c("td")
                      ]),
                      _c("tr", [
                        _c(
                          "td",
                          [
                            _c("kk", [
                              _vm._v("10. Are there follow-up activities?")
                            ])
                          ],
                          1
                        ),
                        _c("td"),
                        _c("td")
                      ]),
                      _c("tr", [
                        _c(
                          "td",
                          [
                            _c("kk", [
                              _vm._v(
                                "11. Do I have a back-up plan in case there are technical challenges? ( e.g. fully charged batteries)"
                              )
                            ])
                          ],
                          1
                        ),
                        _c("td"),
                        _c("td")
                      ])
                    ])
                  ]
                )
              ]),
              _vm._m(52)
            ]),
            _c("br"),
            _c(
              "h4",
              {
                staticClass: "h4-responsive text-justify",
                attrs: { id: "item-5-2-6" }
              },
              [_vm._v("4.5.2.6 Selecting and using still projection")]
            ),
            _vm._m(53),
            _c("br"),
            _c(
              "h4",
              {
                staticClass: "h4-responsive text-justify",
                attrs: { id: "item-5-2-7" }
              },
              [_vm._v("4.5.2.7 Utilizing motion media")]
            ),
            _vm._m(54),
            _c("br"),
            _c(
              "h4",
              {
                staticClass: "h4-responsive text-justify",
                attrs: { id: "item-5-2-8" }
              },
              [_vm._v("4.5.2.8 Computer-based multimedia and Web-Media")]
            ),
            _c("div", { staticClass: "ml-5 text-justify" }, [
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _vm._v(
                    " Computer-based hypermedia can be applied in all areas of the curriculum for any learning goal that is suited to individual or small group exploration of a body of information. Teachers can either adapt existing materials or create new materials to fill a need of their own students. Just like with other media, to select and use computer-based multimedia, you need to start by analyzing the audience so that whatever materials you select are able to meet the learning needs of the students. Questions you should ask yourself are: "
                  ),
                  _c("i", [
                    _vm._v(
                      " Why do you need to use the computer? What type of software are you planning to use? "
                    )
                  ]),
                  _vm._v(
                    " The next step is to specify your instructional goal and formulate the expected learning outcomes. What do you want to achieve from the Computer-Based Multimedia in terms of learning outcomes?"
                  ),
                  _c("br"),
                  _c("br"),
                  _vm._v(
                    " Currently the buzz word when it comes to web learning is E-learning or sometimes called Online Learning. Through computers and other gadgets (including mobile devices) one is able to learn while away from the instructor or facilitator. You may have had experience on this through this course. Below we briefly look at E-learning."
                  ),
                  _c("br"),
                  _c("br"),
                  _c("kk", [_vm._v("What is e-learning?")]),
                  _c("br"),
                  _vm._v(
                    " E-learning has come to define any dissemination of educational knowledge over the Internet. This makes e-learning a subset of technology-based training. It also incorporates a number of learning activities conducted on the Internet, of which mobile learning is one part. "
                  )
                ],
                1
              ),
              _c(
                "div",
                { staticClass: "text-center" },
                [
                  _c("img", {
                    staticClass: "img-fluid",
                    attrs: {
                      src: require("../assets/learn.png"),
                      alt: "Responsive image"
                    }
                  }),
                  _c("br"),
                  _c("kk", [
                    _c("i", [
                      _vm._v("Graphic showing capabilities of E-learning")
                    ])
                  ]),
                  _c("br")
                ],
                1
              ),
              _c("br"),
              _c(
                "p",
                { staticClass: "text-justify meme" },
                [
                  _c("kk", [
                    _vm._v("Differentiating e-learning from mobile learning")
                  ]),
                  _c("br"),
                  _vm._v(
                    ' E-learning can be real-time or self-paced, also known as "ynchronous" or "asynchronous" learning. Additionally, e-learning is considered to be "tethered" (connected to something) and presented in a formal and structured manner. In contrast, mobile learning is often self-paced, un-tethered and informal in its presentation. '
                  )
                ],
                1
              ),
              _c("div", { staticClass: "table-responsive meme" }, [
                _c(
                  "table",
                  { staticClass: "table ", staticStyle: { width: "50%" } },
                  [
                    _c("thead", [
                      _c("tr", [
                        _c(
                          "th",
                          { attrs: { scope: "col" } },
                          [_c("kk", [_vm._v("E-Learning")])],
                          1
                        ),
                        _c(
                          "th",
                          { attrs: { scope: "col" } },
                          [_c("kk", [_vm._v("M-Learning")])],
                          1
                        )
                      ])
                    ]),
                    _vm._m(55)
                  ]
                )
              ]),
              _c("p", { staticClass: "text-justify meme" }, [
                _vm._v(
                  " Because mobile devices have the power to make learning even more widely available and accessible, mobile devices are considered by many to be a natural extension of e-learning (Ellis, 2003). We have come to the end of the unit. Before you proceed go through the summary below to remind you of what we have discussed. "
                )
              ])
            ]),
            _c("br"),
            _c("br"),
            _vm._m(56),
            _c("br"),
            _c("hr"),
            _c("br"),
            _c(
              "div",
              { staticClass: "note note-secondary meme text-justify" },
              [
                _c("blockquote", { staticClass: "blockquote bq-secondary" }, [
                  _vm._m(57),
                  _c(
                    "p",
                    { staticClass: "text-justify meme" },
                    [
                      _vm._v(" Anderson, R.H. (1983). "),
                      _c("kk", [
                        _vm._v("Selecting and Developing Media for Instruction")
                      ]),
                      _vm._v(". 2"),
                      _c("sup", [_vm._v("nd")]),
                      _vm._v(
                        " Edition. New York: Van Nostrand Reinhold Company."
                      ),
                      _c("br"),
                      _c("br"),
                      _vm._v(
                        " Brown, J.W., Lewis, R.B., & Harcleroad, F.F. (1973). AV "
                      ),
                      _c("kk", [
                        _vm._v("Instruction Technology Media and Methods")
                      ]),
                      _vm._v(". New York: McGraw-Hill Book Company."),
                      _c("br"),
                      _c("br"),
                      _vm._v(" Butler, K.A. (1986). "),
                      _c("kk", [
                        _c("i", [
                          _vm._v(
                            "Learning and Teaching Style: In Theory and in Practice"
                          )
                        ])
                      ]),
                      _vm._v(", 2"),
                      _c("sup", [_vm._v("nd")]),
                      _vm._v(" ed. Columbia, CT: Learner's Dimension."),
                      _c("br"),
                      _c("br"),
                      _vm._v(" Ellington, H. (1985). "),
                      _c("kk", [
                        _vm._v(
                          " Producing Teaching Materials: a Handbook for Teachers and Trainers "
                        )
                      ]),
                      _vm._v(". London: Kogan Page Ltd."),
                      _c("br"),
                      _c("br"),
                      _vm._v(" Erickson, C.W.H., & Curl, D.H. (1972). "),
                      _c("kk", [
                        _vm._v(
                          "Fundamentals of Teaching with Audiovisual Technology"
                        )
                      ]),
                      _vm._v(". 2"),
                      _c("sup", [_vm._v("nd")]),
                      _vm._v(
                        " Edition. New York: Macmillan Publishing Co., Inc."
                      ),
                      _c("br"),
                      _c("br"),
                      _vm._v(" Ellis, K. (2003). "),
                      _c("kk", [
                        _c("i", [_vm._v("Moving into M-Learning. Training")])
                      ]),
                      _c("br"),
                      _c("br"),
                      _vm._v(" Gagne, R. (1985). "),
                      _c("kk", [
                        _c("i", [_vm._v("The Conditions of Learning.")])
                      ]),
                      _vm._v(" (4"),
                      _c("sup", [_vm._v("th")]),
                      _vm._v(" ed.). New York: Holt, Rinehart and Winston."),
                      _c("br"),
                      _c("br"),
                      _vm._v(
                        " Gagne, R.M.; Briggs, L.J.; & Wager, W.W. (1992). "
                      ),
                      _c("kk", [_vm._v("Principles of Instructional Design")]),
                      _vm._v(" (4"),
                      _c("sup", [_vm._v("th")]),
                      _vm._v(
                        " ed.). Fort Worth, TX: Harcourt Brace Jevanovich College Publishers."
                      ),
                      _c("br"),
                      _c("br"),
                      _vm._v(" Gardner, H. (1993). "),
                      _c("kk", [
                        _c("i", [
                          _vm._v(
                            "Multiple Intelligences: The Theory in Practice"
                          )
                        ])
                      ]),
                      _vm._v(". New York: Basic Books."),
                      _c("br"),
                      _c("br"),
                      _vm._v(
                        " Heinich, R.; Molenda, M.; Rusell, J.D.; & Smaldino, S.E (1996). "
                      ),
                      _c("kk", [
                        _vm._v(
                          " Instructional Media and Technologies for Learning "
                        )
                      ]),
                      _vm._v(". 5"),
                      _c("sup", [_vm._v("th")]),
                      _vm._v(" Edition. New Jersey: Prentice Hall, Inc."),
                      _c("br"),
                      _c("br"),
                      _vm._v(" Houghton, H.A.; Willows, D.M. (eds., 1987). "),
                      _c("kk", [
                        _c("i", [_vm._v("The Psychology of Illustration,")])
                      ]),
                      _vm._v(". Vol. 2. New York: Verlag."),
                      _c("br"),
                      _c("br"),
                      _vm._v(" Kemp, J.E.; Dayton, D.K (1985). "),
                      _c("kk", [
                        _vm._v(" Planning and Producing Instructional Media ")
                      ]),
                      _vm._v(
                        ". 5th edition. New York: Harper & Row, Publishers."
                      ),
                      _c("br"),
                      _c("br"),
                      _vm._v(
                        " Newby, T.J.; Stepich, D.A.; Lehman, J.D.; Russell, J.D. (2000). "
                      ),
                      _c("kk", [
                        _vm._v(
                          " Instructional Technology for teaching and learning: Designing instruction, integrating computers, and using media. "
                        )
                      ]),
                      _vm._v(" 2"),
                      _c("sup", [_vm._v(" nd ")]),
                      _vm._v(" ed. Upper Saddle River: New Jersey, Merrill."),
                      _c("br"),
                      _c("br"),
                      _vm._v(
                        " Newby, T.J.; Stepich, D.A.; Lehman, J.D.; & Russell, J.D. (2006). "
                      ),
                      _c("kk", [
                        _vm._v(
                          " Educational Technology for Teaching and Learning. "
                        )
                      ]),
                      _vm._v(
                        " Upper Saddle River, New Jersey: Pearson Education, Inc.,"
                      ),
                      _c("br"),
                      _c("br"),
                      _vm._v(" Reiser, R.A.; Dick, W. (1996). "),
                      _c("kk", [
                        _vm._v(
                          " Instructional Planning: A guide for teachers. "
                        )
                      ]),
                      _vm._v(" Boston: Allyn and Bacon."),
                      _c("br"),
                      _c("br"),
                      _vm._v(" Romiszoski, A.J. (1988). "),
                      _c("kk", [
                        _vm._v(
                          " The Selection and Use of Instructional Media: For improved classroom teaching and for interactive, individualized instruction "
                        )
                      ]),
                      _vm._v(". 2"),
                      _c("sup", [_vm._v("nd")]),
                      _vm._v(" Edition. London: Kogan Page Ltd."),
                      _c("br"),
                      _c("br"),
                      _vm._v(" Rowntree, D. (1974). "),
                      _c("kk", [
                        _c("i", [
                          _vm._v(
                            "Educational Technology in Curriculum Development"
                          )
                        ])
                      ]),
                      _vm._v(". London: Harper and Row."),
                      _c("br"),
                      _c("br"),
                      _vm._v(
                        " Snow, R., Corno, L., & Jackson, D. III (1996). "
                      ),
                      _c("kk", [
                        _vm._v(
                          "Individual Differences in affective and cognitive functions"
                        )
                      ]),
                      _vm._v(". In D. Berliner & R. Callee (Eds.), "),
                      _c("kk", [
                        _c("i", [_vm._v("Handbook of Educational Psychology")])
                      ]),
                      _vm._v(
                        " (pp.243-310). New York: Simon & Schuster Macmillan."
                      ),
                      _c("br"),
                      _c("br"),
                      _vm._v(" St. Cloud State University. "),
                      _c("kk", [_vm._v("Developing Support Materials")]),
                      _vm._v(" [Web Page] (1997). Available at: "),
                      _c(
                        "a",
                        {
                          attrs: {
                            href:
                              "http://lrs.stcloudstate.edu/cim/courses/pine/develop.html"
                          }
                        },
                        [
                          _vm._v(
                            " http://lrs.stcloudstate.edu/cim/courses/pine/develop.html "
                          )
                        ]
                      ),
                      _vm._v(". Accessed in March, 2003."),
                      _c("br"),
                      _c("br"),
                      _vm._v(
                        " Wikipedia, the free encyclopedia. Retrieved from "
                      ),
                      _c(
                        "a",
                        {
                          attrs: {
                            href:
                              "http://en.wikipedia.org/wiki/Systems_thinking"
                          }
                        },
                        [
                          _vm._v(
                            " http://en.wikipedia.org/wiki/Systems_thinking "
                          )
                        ]
                      ),
                      _vm._v(" on 20th July, 2009."),
                      _c("br"),
                      _c("br"),
                      _vm._v(" Wittich, W.A., & Schuller, C.F. (1979). "),
                      _c("kk", [
                        _vm._v("Instructional Technology: Its Nature and Use.")
                      ]),
                      _vm._v(" 6"),
                      _c("sup", [_vm._v("th")]),
                      _vm._v(" Edition. New York: Harper & Row Publishers ")
                    ],
                    1
                  )
                ])
              ]
            )
          ]
        )
      ])
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-sm-4 col-lg-3" }, [
      _c(
        "nav",
        {
          staticClass: "navbar navbar-light sticky-top  flex-column mt-4",
          attrs: { id: "navbar-example3" }
        },
        [
          _c("a", { staticClass: "navbar-brand", attrs: { href: "#" } }, [
            _vm._v("Unit 4")
          ]),
          _c("nav", { staticClass: "nav nav-pills flex-column" }, [
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-1" } }, [
              _vm._v("4.1 Introduction")
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-1-1" }
                },
                [_vm._v(" Unit Outcomes")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-1-2" }
                },
                [_vm._v("Terminology")]
              )
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-2" } }, [
              _vm._v(
                "4.2 The Process for designing Instructional Media and Materials"
              )
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-2-1" }
                },
                [_vm._v("4.2.1 Process for designing instructional media ")]
              )
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-3" } }, [
              _vm._v(
                "4.3 How to Design, Plan and Produce Different Types of Instructional Materials"
              )
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-1" }
                },
                [_vm._v("4.3.1 Process of visual design ")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-2" }
                },
                [_vm._v("4.3.2 Visual planning tools")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-3" }
                },
                [_vm._v("4.3.3 Examples of visuals that you could design")]
              ),
              _c("nav", [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-3-3-1" }
                  },
                  [_vm._v("Assignment 4.1")]
                )
              ]),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-4" }
                },
                [_vm._v("4.3.4 Designing text ")]
              ),
              _c("nav", [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-3-3-2" }
                  },
                  [_vm._v("Activity 4.1")]
                )
              ]),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-5" }
                },
                [_vm._v("4.3.5 Chalkboard")]
              ),
              _c("nav", [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-3-3-3" }
                  },
                  [_vm._v("Assignment 4.2")]
                )
              ]),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-6" }
                },
                [_vm._v("4.3.6 Whiteboard")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-7" }
                },
                [_vm._v("4.3.7 Designing overhead transparencies ")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-8" }
                },
                [_vm._v("4.3.8 Design of Power Point presentations")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-9" }
                },
                [_vm._v("4.3.9 Designing audio media")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-10" }
                },
                [_vm._v("4.3.10 Designing a PODCAST")]
              ),
              _c("nav", [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-3-3-4" }
                  },
                  [_vm._v("Assignment 4.3")]
                )
              ])
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-4" } }, [
              _vm._v("4.4 Utilizing Materials during Instruction")
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-4-1" }
                },
                [_vm._v("4.4.1 Printed materials")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-4-2" }
                },
                [
                  _vm._v(
                    "4.4.2 Advantages and disadvantages of using different types of printed materials "
                  )
                ]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-4-3" }
                },
                [_vm._v("4.4.3 Application of printed materials ")]
              ),
              _c("nav", [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-4-3-1" }
                  },
                  [_vm._v("Activity 4.2")]
                )
              ])
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-5" } }, [
              _vm._v(
                "4.5 Utilizing Other Types of Instructional Materials during Instruction"
              )
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-5-1" }
                },
                [
                  _vm._v(
                    "4.5.1 Types of non-print media available for teaching and learning"
                  )
                ]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-5-2" }
                },
                [
                  _vm._v(
                    "4.5.2 How to select and use different types of non-print media"
                  )
                ]
              ),
              _c("nav", { staticClass: "nav nav-pills flex-column" }, [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-5-2-1" }
                  },
                  [
                    _vm._v(
                      "4.5.2.1 Selecting and using different types of instructional materials"
                    )
                  ]
                ),
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-5-2-2" }
                  },
                  [
                    _vm._v(
                      "4.5.2.2 How to utilize community resources in teaching"
                    )
                  ]
                ),
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-5-2-3" }
                  },
                  [_vm._v("4.5.2.3 Two-dimensional visuals ")]
                ),
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-5-2-4" }
                  },
                  [_vm._v("4.5.2.4 Displays")]
                ),
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-5-2-5" }
                  },
                  [_vm._v("4.5.2.5 Utilizing audio materials ")]
                ),
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-5-2-6" }
                  },
                  [_vm._v("4.5.2.6 Selecting and using still projection")]
                ),
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-5-2-7" }
                  },
                  [_vm._v("4.5.2.7 Utilizing motion media")]
                ),
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-5-2-8" }
                  },
                  [_vm._v("4.5.2.8 Computer-based multimedia and Web-Media")]
                )
              ])
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-6" } }, [
              _vm._v("Unit summary")
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-7" } }, [
              _vm._v("References")
            ])
          ])
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _vm._v(
        " So far we have discussed the various types of instructional media that we could use in our teaching, but think for a moment about your own classroom where you have been teaching for so many years and many of these media that are available. Answer honestly, "
      ),
      _c("i", [
        _vm._v(
          " 'How much of media materials have you used over the past few years? Why have you not used other media? "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _vm._v(
        " If you think hard about the reason why you have not used some of the media, the main reason is that some media are not readily available. So, if you were a little creative, you could design and produce your own instructional media to meet your instructional needs. As a teacher undergoing further training, you need to see yourself as a professional teacher focused on building skills for the future. I am sure you would like to make a difference in the way you will teach after furthering your training, and not continue teaching the way you have always done in the past."
      ),
      _c("br"),
      _vm._v(
        " In this unit, you are not expected to become a skilled instructional technologist or a media specialist by making your own teaching materials. This would be unrealistic given the limited training you will have acquired at the end of this course and the limited facilities available in the schools where you teach. Admittedly the instructional materials are very scarce in our classrooms yet we all want to improve the way we help our students learn by enriching the learning environment with appropriate instructional media and materials. Therefore, we have to be creative as teachers in order to make our instructional environment more interesting and motivating. "
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "note note-info texy-justify meme text-justify" },
      [
        _c("blockquote", { staticClass: "blockquote bq-info" }, [
          _c("h5", { attrs: { id: "item-1-1" } }, [
            _c("i", { staticClass: "fas fa-paper-plane" }, [
              _vm._v(" Unit Outcomes")
            ])
          ]),
          _vm._v(" Upon completion of this unit you will be able to: "),
          _c("ul", { staticStyle: { "list-style-type": "square" } }, [
            _c("li", [
              _vm._v(
                "identify the design process to follow in creating your own instructional materials"
              )
            ]),
            _c("li", [
              _vm._v(
                "design, plan and produce different instructional materials."
              )
            ])
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("h5", { attrs: { id: "item-1-2" } }, [
      _c("i", { staticClass: "fas fa-check-square" }, [_vm._v(" Terminology")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "ml-5 text-justify" }, [
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(
          " Instructional design is the component of the process that helps you to think strategically about the teaching and learning experience you are targeting. It helps you to articulate every essential ingredient in the teaching-learning process. It paints the bigger-picture version of instruction that results in a complete and precise blueprint of what should happen and how."
        ),
        _c("br"),
        _vm._v(
          " Designing instructional materials deals with creative thinking and an analysis of how the creative thinking process is successfully used. What is also revealed is the fact that most often three steps are followed. These steps include: "
        )
      ]),
      _c("p", { staticClass: "text-justify meme" }, [
        _c("ol", [
          _c("li", [
            _c("i", [_vm._v("Desire: ")]),
            _vm._v(
              "You need to have an initial motivation to want to solve a problem with which you are concerned "
            )
          ]),
          _c("li", [
            _c("i", [_vm._v("Preparation: ")]),
            _vm._v(
              "Gather information relative to the problem as revealed by the planning stages of audience identification, objective statement, and content listing. "
            )
          ]),
          _c("li", [
            _c("i", [_vm._v("Manipulation: ")]),
            _vm._v(
              "Play with a number of ideas to devise one or more possible solutions or to find a new pattern of treating the content that differs from that which has been familiar (Kemp & Dayton, 1985). "
            )
          ])
        ]),
        _vm._v(
          " In designing your own instructional media, you will be guided by three main questions: "
        )
      ]),
      _c("p", { staticClass: "text-justify meme font-italic" }, [
        _c("ol", [
          _c("li", [_vm._v("When do I use media? ")]),
          _c("li", [_vm._v("What will the media do for the students?")]),
          _c("li", [_vm._v("How do I prepare for the use of this media?")])
        ])
      ]),
      _c("div", { staticClass: "note note-secondary text-justify meme" }, [
        _vm._v(
          " As you answer each of the above questions, you will be guided in your design of the right instructional media to use in order to meet your instructional goal. "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _c("i", [_vm._v("Start the process with an idea.")]),
      _vm._v(
        " An idea, a problem situation, or a learning need identified within an instructional-design plan for a topic or unit of study should be the starting point for the development of your instructional media. An idea indicates an area of interest but the more useful ideas are those conceived in terms of a need relating to a specific target group. In our case as teachers, our students' need for certain information or for a skill, or the need establish a desired attitude. "
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme font-italic" }, [
      _c("ol", [
        _c("li", [_vm._v("Motivate an interest or a degree of action")]),
        _c("li", [_vm._v("Present information;")]),
        _c("li", [_vm._v("Provide instruction. ")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "note note-secondary text-justify meme" }, [
      _vm._v(" Once you have formulated an idea, "),
      _c("i", [
        _vm._v(
          " you need to build on that idea by translating the general idea into clear-cut and specific statement of one or more objectives for the planned learning within an instructional context. "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _vm._v(
        " learn in a particular lesson. This is stated in terms of instructional/learning objectives. Instructional/learning objectives provide clear guidance that allows an orderly presentation of content leading to learning."
      ),
      _c("br"),
      _c("br"),
      _vm._v(
        " To provide for the desired learning, objectives are stated to indicate the outcomes of the learning. Objectives are grouped into three broad categories, namely; cognitive which focuses on knowledge and information and is represented by thinking and other intellectual skills, psychomotor which focuses on performance skills, and affective which focuses on attitudes and values."
      ),
      _c("br"),
      _c("br"),
      _vm._v(
        " Depending on the content to be taught, you formulate objectives to address each one of the broad learning domains. For example, you might state your instructional objectives to address the following learning outcomes: "
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _c("ul", [
        _c("li", [
          _vm._v("Help learners to apply certain steps in a given process;")
        ]),
        _c("li", [
          _vm._v("Help learners to practice a certain skill or attitude")
        ]),
        _c("li", [
          _vm._v("Help learners to respond to a certain social need. ")
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _vm._v(
        " Your design process should also consider the audience or the learner. You need to be aware of the learner characteristics such as age, educational level, knowledge of the subject matter, attitudes towards the subject, cultural context of the learners, the number of learners in class, and individual differences within the group. Audience characteristics influence you as you consider the ideas to be presented, level of learner involvement, and degree of participation."
      ),
      _c("br"),
      _c("br"),
      _vm._v(
        " Finally, obtain assistance from persons who have special knowledge and skills relating to the materials being developed or on similar developed materials. Such people might include computer experts, communication specialists, or instructional designers."
      ),
      _c("br"),
      _c("br"),
      _vm._v(
        " Please note that just like there is no single recipe to creating effective instruction, there are different ways of creating learning experiences. However, the following procedure could guide you in this process."
      ),
      _c("br"),
      _c("br")
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _c("ul", [
        _c("li", [
          _vm._v(
            " Refer repeatedly to your instructional plan. The lesson plan contains the direction and activities that you have determined your students need. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Within the plan, look closely at the overall learning objectives and the key activities that need to occur so that students meet them. Ask yourself the question: "
          ),
          _c("i", [
            _vm._v(
              " 'What needs to be constructed so that the activities are successful?' "
            )
          ]),
          _vm._v(" For example, "),
          _c("i", [
            _vm._v(
              " 'Do my students need some explanation, guided practice or some observation?' "
            )
          ])
        ]),
        _c("li", [
          _vm._v(" Reflect on what you know or have seen. For instance, "),
          _c("i", [
            _vm._v(
              " Can I talk to a teacher who has taught similar concepts before? "
            )
          ])
        ]),
        _c("li", [
          _vm._v(" Put yourself in the learners' shoes. "),
          _c("i", [
            _vm._v(
              " What would I want to experience in order to effectively learn the materials? "
            )
          ])
        ]),
        _c("li", [
          _vm._v(
            " Outline the materials. Have students review what you have thought. "
          )
        ]),
        _c("li", [_vm._v(" Construct a draft set of the materials. ")]),
        _c("li", [
          _vm._v(
            " Review the materials to ensure that you make all needed changes (Kemp & Dayton, 1985). "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "ml-5" }, [
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(
          " Now that we know the process for designing your own instructional media, let us now discus how you can design, plan and produce different types of instructional materials. Please note that we cannot discuss how to design, plan and produce all the different types of media that we discussed in Unit 2. Instead, we will pick on a few types instructional media materials that you are likely to produce in your own local context. Let us start with the visuals. "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _vm._v(
        " Designing a visual display begins with gathering or producing the individual pictorial and text elements that will be used in the display. At this stage, it is assumed that you have already determined the students' needs and interests regarding the topic to be taught and have decided on the objectives to be achieved through the visuals that you are planning to present whether via a bulletin board, overhead transparencies, PowerPoint presentation, printed handouts, or other computer screen displays."
      ),
      _c("br"),
      _vm._v(
        " In your visual design, you need to consider how you will achieve the visual design goal, which encompasses; "
      ),
      _c("i", [
        _vm._v(
          " ensuring legibility, helping the viewer to quickly see your message, and focusing attention on key points (Heinich et al; 1996:74). "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _vm._v(" The key design suggestions to consider include: "),
      _c("ul", [
        _c("li", [_c("i", [_vm._v("Visual elements")])]),
        _c("li", [_c("i", [_vm._v("Verbal elements")])]),
        _c("li", [_c("i", [_vm._v("Elements that add appeal.")])])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _c("i", [_vm._v("Realistic")]),
      _vm._v(
        " visuals show the actual object under study. The degree of realism can be heightened by use of realistic colours, which is one of the major purposes that colour serves. The realistic visual is the closest it thing to the original."
      ),
      _c("br"),
      _c("br"),
      _c("i", [_vm._v("Analogic")]),
      _vm._v(
        " visuals convey a concept or topic by showing something else and implying a similarity. Teaching about electricity flow by showing water flowing in series and parallel pipes is an example of using analogic visuals. Such visuals help the learner to interpret new information in light of prior knowledge and in that way facilitating learning."
      ),
      _c("br"),
      _c("br"),
      _c("i", [_vm._v("Organizational")]),
      _vm._v(
        " visuals include flowcharts, graphs, maps, classification charts, etc. They are mainly used to show relationships among concepts or points in textual material. "
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _c("ul", [
        _c("li", [
          _c("i", [_vm._v("Surprise")]),
          _vm._v(
            ". Consider what grabs attention. You will need to provide novel stimuli every time in order to sustain the attention of the viewers. "
          )
        ]),
        _c("li", [
          _c("i", [_vm._v(" Texture ")]),
          _vm._v(
            "- most visuals are two-dimensional but you could add a third dimension with the use of texture or actual materials. For example, you could use cereal grains to design a map of Swaziland that will appear like it has a third dimension. "
          )
        ]),
        _c("li", [
          _c("i", [_vm._v("Interaction ")]),
          _vm._v(
            ". Viewers can be asked to respond to visual displays by manipulating materials on the display to answer questions raised by the display. For example, you can prepare a visual display to show different parts or components, and then prepare some cards with names for students to align the correct part or component with the appropriate name. "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "note note-warning" }, [
      _c("blockquote", { staticClass: "blockquote bq-warning" }, [
        _c("h5", { attrs: { id: "item-3-3-1" } }, [
          _c("i", { staticClass: "fas fa-medal" }, [_vm._v("Assignment 4.1")])
        ]),
        _c("p", { staticClass: "text-justify meme font-italic" }, [
          _vm._v(
            " Following the design process that has been presented to you in this unit, design a poster based on a topic from one of your teaching subjects. Present the poster to your tutor/lecturer for marking. "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "ml-5 text-justify" }, [
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(
          " The process for designing text is similar to that of designing visuals. Once you have created your message, you will need to assemble the elements. Remember that text is designed using word processing from your computer."
        ),
        _c("br"),
        _c("br"),
        _vm._v(
          " Just like in visuals, choose the background and underlying pattern. Do not skimp on the page margins, as pages that are too full, too dense, cluttered or too disorganized are discouraging to readers. Remember that paragraphs are aligned at the left margin, not at the right margin or at both margins; the left margin alignment provides best readability."
        ),
        _c("br"),
        _c("br"),
        _vm._v(
          " Next, arrange the elements. Use space by moving elements closer together or further apart before using styles like bold, italic, or underlined text. Use text styles to reinforce the underlying pattern of the document. For example, make subheadings bold and nothing else bold. Note that on a vertical dimension, you need to decide on the spacing between lines of text, between the title and other text, and between text and subheadings."
        ),
        _c("br"),
        _c("br"),
        _vm._v(
          " Note that titles may be aligned with the left margin or centred on the page. If you centre the title, take care that it looks centred and not simply misaligned. The subheadings should be aligned with each other, if they are centred each one appears to be aligned differently and the viewer may have trouble identifying them. All regular text should be aligned at the same margin except for lists and block quotations."
        ),
        _c("br"),
        _c("br"),
        _vm._v(
          " After word processing you need to check and revise the text. Check whether the titles and subheadings take up more than one line and make sure that the phrases on each line make sense. Move blocks of text close to their subheadings and away from other text on the page. Use of space helps the viewer make sense of the page easily and quickly. Always spell-check your work and ensure that words that will make sense to a reader and facilitate understanding. "
        )
      ]),
      _c("br"),
      _c("div", { staticClass: "note note-primary" }, [
        _c("blockquote", { staticClass: "blockquote bq-primary" }, [
          _c("h5", { attrs: { id: "item-3-3-2" } }, [
            _c("i", { staticClass: "fas fa-tools" }, [_vm._v(" Activity 4.1")])
          ]),
          _c("p", { staticClass: "text-justify font-italic meme" }, [
            _vm._v(
              " Practice designing text by taking some content from a textbook in one of your teaching subjects and convert it into a word document. Make sure that the text runs to a number of pages. Consider the design principles that have been presented to you above. "
            )
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme font-italic" }, [
      _c("ul", [
        _c("li", [
          _vm._v(
            " What part of my lesson is important enough to be placed on the chalkboard? "
          )
        ]),
        _c("li", [
          _vm._v(
            " What aspects of the lesson are likely to be unclear to some of the students? "
          )
        ]),
        _c("li", [
          _vm._v(
            " What diagrams/drawings/figures or statistics can I use on the chalkboard to illustrate the content? "
          )
        ]),
        _c("li", [
          _vm._v(
            " How can I capitalize on the immediate feedback from the chalkboard? "
          )
        ]),
        _c("li", [
          _vm._v(
            " How can I involve the students in developing chalkboard work? "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "note note-warning text-justify" }, [
      _c("blockquote", { staticClass: "blockquote bq-warning" }, [
        _c("h5", { attrs: { id: "item-3-3-3" } }, [
          _c("i", { staticClass: "fas fa-medal" }, [_vm._v("Assignment 4.2")])
        ]),
        _vm._v(" (PGCE STUDENTS) "),
        _c("p", { staticClass: "text-justify meme font-italic" }, [
          _vm._v(
            " Using the chalkboards located outside Block C in the Faculty of Education, individually practice writing on the chalkboard by writing a passage based on content from one of your teaching subjects. Also draw an illustration for the same content that you will have written. Use colour if necessary. Once you are satisfied that you have done enough practice, ask the course lecturer to grade your work. "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "ml-5 text-justify" }, [
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(
          ' The Whiteboard is a new generation form of the chalkboard. It is called whiteboard as it is normally white. One of the reasons being that not only can one write on it, but it can also be used as a screen for projection purposes. Special marker pens are used to write on the whiteboard and can easily be erased. One should never use a Permanent Marker on the white board as it cannot be easily erased. Materials can also be pinned on the whiteboard for display to the learners. Below we will now look at another type of whiteboard known as "Smart Board".'
        ),
        _c("br"),
        _c("br"),
        _vm._v(
          " The Smart Board is an interactive whiteboard that uses touch detection for user input (for example scrolling and right mouse-click) in the same way as normal PC input devices such as mice or keyboards. A projector is used to display a computer's video output onto the whiteboard, which then acts as a huge touchscreen. "
        )
      ]),
      _c("div", { staticClass: "text-center" }, [
        _c("img", {
          staticClass: "img-fluid",
          attrs: { src: require("../assets/pc.png"), alt: "Responsive image" }
        })
      ]),
      _c("br"),
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(
          " The Smart board usually comes with 4 digital writing utensils that use digital ink replacing the traditional whiteboard markers. The digital ink works by using an active digitizer that controls the PC input information for writing capabilities such as drawing or handwriting. "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ol", [
      _c("li", [_vm._v("What is the purpose of my presentation? ")]),
      _c("li", [
        _vm._v("What do I want my audience to do because of the presentation? ")
      ]),
      _c("li", [
        _vm._v(
          "What message do I want to deliver that will help me achieve that purpose?"
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "text-center" }, [
      _c("img", {
        staticClass: "img-fluid",
        attrs: { src: require("../assets/bar.png"), alt: "Responsive image" }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "ml-5 text-justify" }, [
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(
          " Audio media materials can easily be designed and produced by both the teacher and students since all that you need is an audio tape recorder and blank audiotape. Audio media can be effective during instruction especially to achieve motivational, informational or instructional purposes of teaching and learning. Audio media is effective in teaching many of the subjects offered in the school curriculum. For example, teaching of literature either in English, French or African languages like siSwati. Audio media is also appropriate in English Language, especially in drama. You can also use audio media to individualize instruction particularly when you have slow learners in your class or when you are teaching complex topics that students have difficulties understanding ."
        ),
        _c("br"),
        _vm._v(
          " To design and produce audio materials, the following procedure will be followed: "
        ),
        _c("ul", [
          _c("li", [
            _vm._v(
              " Formulate an instructional goal. Decide what you want to achieve by using audio media. Is it for motivation, information sharing or for instruction? "
            )
          ]),
          _c("li", [
            _vm._v(
              " Formulate the instructional objectives that will form the basis of the audio programme to be produced. What do you want to achieve? "
            )
          ]),
          _c("li", [
            _vm._v(
              " Select the content to be presented and decide on the scope of content coverage. It is recommended that an ideal audio programme should only run for fifteen (15) minutes. Therefore, if you have a lot of content to be covered prepare a series of audio programmes. "
            )
          ]),
          _c("li", [
            _vm._v(
              " Prepare a recording script. A script is an outline description of the content to be presented and prepared in a format that will be used for reading as opposed to talking. A script identifies even the presenters or the people who will be involved in the presentation of content and the actual content that they read. As you prepare a recording script, consider how you will involve the learners in meaningful learning activities. Remember that audio media appeals only to the sense of hearing; therefore to captivate the students' attention requires that they get engaged in some activities as they listen to the recorded materials. "
            )
          ]),
          _c("li", [
            _vm._v(
              " To captivate the attention of the listeners, make sure that you provide variety through appropriate sound effects, music, short dialogue and voices of experts in your field. All these might be included in the script that you prepare since all presenters need to know in advance whatever they will be required to say during the recording. "
            )
          ]),
          _c("li", [
            _vm._v(
              " Be creative in your script writing and be conversational. Since audio media is meant for listening, converse with the audience as you would normally converse with a friend. Explore the content with the students rather than lecturing to them. "
            )
          ]),
          _c("li", [
            _vm._v(
              " As you present the materials, direct the students' attention to whatever will be discussed before discussing it. Inform the students what to pay attention to as they listen to the audiotape. For example, if they have to refer to a certain diagram, instruct them what to look for or observe and give them time during the presentation to do exactly that. This means that you will need to pause occasionally for students to carry out specific tasks or activities that you will identify for them. When you pause the tape, provide a music interlude for students to know that the presentation is still continuing. "
            )
          ]),
          _c("li", [
            _vm._v(
              " When the presentation ends, it is useful to summarize the key points or ideas covered during the lesson. "
            )
          ]),
          _c("li", [
            _vm._v(
              " Finally prepare some follow -up activities for the students to assist in learning transfer and to reinforce what will have been presented "
            )
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticStyle: { "list-style-type": "square" } }, [
      _c("li", [_vm._v(" PC microphone ")]),
      _c("li", [_vm._v(" Audio software ")]),
      _c("li", [
        _vm._v(
          " Hosting account to upload and store your podcast file (In this case, your Blog) "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _c("i", [_vm._v("Step 1: Get a microphone.")]),
      _c("br"),
      _vm._v(
        " To record a podcast, you need to have a microphone that is compatible with your computer."
      ),
      _c("br"),
      _c("br"),
      _c("i", [_vm._v("Step 2: Get audio software.")]),
      _c("br"),
      _vm._v(
        " Once you have a microphone, you need to get software that allows you to record audio through that microphone and save it on your computer's hard drive. Free audio software can be downloaded from "
      ),
      _c("a", { attrs: { href: "http://audacity.sourceforge.net/" } }, [
        _vm._v("http://audacity.sourceforge.net/")
      ]),
      _vm._v(
        " Once on the website, follow instructions to download the software. Otherwise if the software is available on the e-learning website, you could then use it."
      ),
      _c("br"),
      _c("br"),
      _c("i", [_vm._v("Step 3: Prepare your podcast content.")]),
      _c("br"),
      _vm._v(
        " Take some time to think about what you are going to say during your podcast. You can even write a script based on a particular topic. If it is an assignment, then your recording should be based on the assignment."
      ),
      _c("br"),
      _c("br"),
      _c("i", [_vm._v("Step 4: Record your podcast.")]),
      _c("br"),
      _vm._v(
        " Turn on your microphone, start your audio software and begin recording. Save the file when you are done."
      ),
      _c("br"),
      _c("br"),
      _c("i", [
        _vm._v("Step 5: Upload your podcast file to your online host.")
      ]),
      _c("br"),
      _vm._v(
        " Upload your podcast file to your web host. If you plan to record a lot of podcasts or your blog gets a lot of traffic, you might want to create a new hosting account to hold your podcasts, so you do not reach your blog hosting bandwidth limits too quickly. Instructions for uploading the podcast may be given on the e-learning website."
      ),
      _c("br"),
      _c("br"),
      _c("i", [_vm._v("Step 6: Get the URL of your uploaded podcast file.")]),
      _c("br"),
      _vm._v(
        " Once you upload your podcast file to your hosting account, copy the podcast URL and keep that URL handy as you will have to paste it in your blog."
      ),
      _c("br"),
      _c("br"),
      _c("i", [_vm._v("Step 7: Create a new blog post.")]),
      _c("br"),
      _vm._v(
        " Open your blogging application and create a new blog post. Give it a title and add any text you would like to introduce your podcast."
      ),
      _c("br"),
      _c("br"),
      _c("i", [
        _vm._v(
          "Step 8: Paste the URL for your podcast file into your new blog post."
        )
      ]),
      _c("br"),
      _vm._v(
        " Using the URL you copied earlier for your uploaded podcast file, paste that information into your new blog post as new media or a new enclosure link, depending on the blogging application you use."
      ),
      _c("br"),
      _c("br"),
      _c("i", [_vm._v("Step 9: Publish your new blog post.")]),
      _c("br"),
      _vm._v(
        " Select the publish button in your blogging application to send your new blog post with your podcast link included live online."
      ),
      _c("br"),
      _c("br"),
      _c("i", [_vm._v("Step 10: Test your podcast link.")]),
      _c("br"),
      _vm._v(
        " Open your new live blog post and select your podcast link to ensure it is working correctly."
      ),
      _c("br"),
      _c("br"),
      _vm._v(
        " The last tool or software we are going to discuss in this module is Skype. Skype is used as a communication tool through short messages, audio, and video calls. "
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "note note-warning text-justify" }, [
      _c("blockquote", { staticClass: "blockquote bq-warning" }, [
        _c("h5", { attrs: { id: "item-3-3-4" } }, [
          _c("i", { staticClass: "fas fa-medal" }, [_vm._v("Assignment 4.3")])
        ]),
        _vm._v(
          " Select a topic from one of your teaching subjects where audio media could be used and then: "
        ),
        _c("p", { staticClass: "text-justify meme font-italic" }, [
          _c("ul", [
            _c("li", [_vm._v(" Formulate an instructional goal ")]),
            _c("li", [_vm._v(" Formulate the instructional objectives. ")]),
            _c("li", [
              _vm._v(
                " Prepare a recording script for a ten minute recording with at least three presenters. "
              )
            ]),
            _c("li", [
              _vm._v(
                " Attach some follow-up activities to be carried out by the class after listening to the audiotape. "
              )
            ]),
            _c("li", [
              _vm._v(
                " Submit the assignment for grading to the course lecturer. "
              )
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "ml-5" }, [
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(
          " In this section you are introduced to the different ways of utilising materials during instruction. One thing to keep in mind at all times however is that appropriate materials selected for a particular task must be based on the objectives or what you would like your learners to achieve at the end of the lesson. We will discuss how we can make use of printed materials in the next section. "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _vm._v(
        " Printed materials can play three basic roles in individualized instruction: "
      ),
      _c("ol", [
        _c("li", [
          _vm._v(
            " They can constitute the actual vehicle by which the instruction takes place. "
          )
        ]),
        _c("li", [
          _vm._v(
            " They can be used to structure and/or control or manage the instructional process with the main instruction being carried out via other media e.g. text books. "
          )
        ]),
        _c("li", [
          _vm._v(
            " They can be used to support other individualized learning media by providing the required support such as worksheets (Ellington, 1985). "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _vm._v(" Worksheets serve the following functions: "),
      _c("ul", [
        _c("li", [
          _vm._v(
            " Encourage students to think for themselves about the results of their experimental work and draw their own conclusions from their own observations. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Allow students to work at their own pace no matter how slow or fat they could be. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Help the teacher to avoid oral repetition of routine instructions and questions. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Enable students who have been absent from class to catch up. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Help in structuring any form of record such as numerical results. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Help in keeping an accurate record of what students have actually learnt in any piece of work carried out by them. "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [
        _c("i", [_vm._v("Availability")]),
        _vm._v(
          ". Printed media are readily available in a variety of formats. "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v("Flexibility")]),
        _vm._v(
          ". Printed materials are adaptable to many purposes and they may be used in any environment. "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v("Portability")]),
        _vm._v(
          ". They can be easily carried or moved from place to place and do not require any equipment or electricity. "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v(" User friendly")]),
        _vm._v(
          ". Properly designed printed materials are easy to use and do not require special efforts to navigate through. Students can stop at any point in the material todiscuss or even refer to other sources such as dictionaries, reference texts, etc. "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v("Economical")]),
        _vm._v(
          ". Printed materials are relatively inexpensive to produce, purchase and can be re-used. Text books in particular are inexpensive compared to other forms of media (Heinich, et al.: 107). "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v("Individualization of instruction")]),
        _vm._v(
          ". Printed materials allow students to proceed at their own pace. Lesson materials can be designed in a variety of ways to allow for self-paced instruction (Anderson, 1983). "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v("Organization of instruction")]),
        _vm._v(
          ". Printed materials, especially text books, help to organize instruction by providing common reading experiences, suggested learning activities, recommended readings, and questions. "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v("Tutorial Contribution")]),
        _vm._v(
          ". Text books in particular help students to read better, to study and to weigh evidence presented. Printed materials also allow for cross-referencing of information from different sources. "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v("Improve Instruction")]),
        _vm._v(
          ". Printed materials help to improve teaching practices especially through the suggestions contained in teachers' editions and in manuals. "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [
        _c("i", [_vm._v(" Reading level")]),
        _vm._v(
          " - Most printed materials are written at a certain reading level. It is important as a teacher to remember that some of the students in our classes are non - readers, poor readers, or lack adequate literacy skills and therefore some reading materials might be above their reading level. "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v(" Prior knowledge")]),
        _vm._v(
          " - Readers who lack pre - requisite knowledge might struggle to comprehend the text "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v(" Abuse of printed materials")]),
        _vm._v(
          " - Printed materials, especially textbooks, can easily be abused. For example, when teachers require students to memorize many facts and definitions from a particular textbook, or when teachers use particular textbooks as the only source of information, and carry them to class in order to read from them and make notes from them. "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v(" One-way presentation")]),
        _vm._v(
          "- Some printed materials are not interactive and they tend to be used in a passive way without comprehension. "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v(" Curriculum rigidity")]),
        _vm._v(
          " - Some textbooks dictate the curriculum rather than being used to support the it. Text books are often written to accommodate the curriculum guidelines of a particular country. "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v(" Vocabulary")]),
        _vm._v(
          " - Some texts introduce a large number of vocabulary terms and concepts in a short amount of space. This places a heavy cognitive burden on students which might be overwhelming for some students (Heinich, et al.: 107-108). "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v(" Presentation of information")]),
        _vm._v(
          " - By presenting the information logically and in a pre-digested form, printed materials deny the reader the ability to think, organize the information, and arrive at independent conclusions. Hence, printed materials especially text books do not stimulate interest on the part of the user to pursue any of the information presented much further. "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v(" Ignore instructional innovations")]),
        _vm._v(
          " - Printed materials rigidly prescribe and pre-arrange all learning outcomes which deny students the ability to apply knowledge into novel situations. Most printed materials especially text books do not aim towards inquiry, problem-solving, or critical thinking. A single text books used in a particular class level is not likely to meet the varied learner abilities in a typical class. "
        )
      ]),
      _c("li", [
        _c("i", [_vm._v(" Out-dated information ")]),
        _vm._v(
          "- The process of publishing printed materials particularly text books is long and involving, such that by the time a text book is published, most of the information is obsolete. This makes it difficult to keep the information contained in printed material current and up to date. "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [
        _vm._v(
          " provide factual information such as basic facts, procedures and principles "
        )
      ]),
      _c("li", [
        _vm._v(" teach recognition and discrimination of relevant stimuli ")
      ]),
      _c("li", [_vm._v(" present vocabulary ")]),
      _c("li", [_vm._v(" Provide directions. ")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [_vm._v(" teach steps in psychomotor skills ")]),
      _c("li", [_vm._v(" demonstrate positions of things during motion ")]),
      _c("li", [
        _vm._v(
          " teach the various psychomotor skills such as drawing, measurement, etc. "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [
        _vm._v(
          " provoke emotional responses in the learner through drama, visuals etc. "
        )
      ]),
      _c("li", [
        _vm._v(
          " teach on positive and negative attitudes (Anderson, 1983:115). "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "note note-primary" }, [
      _c("blockquote", { staticClass: "blockquote bq-primary" }, [
        _c("h5", { attrs: { id: "item-4-3-1" } }, [
          _c("i", { staticClass: "fas fa-tools" }, [_vm._v(" Activity 4.2")])
        ]),
        _c("p", { staticClass: "text-justify meme" }, [
          _vm._v(
            " Apart from the examples given above, discuss and identify with another colleague additional uses of printed materials in achieving the different types of learning outcomes. "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "ml-5" }, [
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(
          " In this section we will discuss how to select and use other types of media besides printed media. From our discussion in Unit 2, you probably still remember that we have many different types of media that we could use during instruction. What is important is being able to select the right type of media, and using it to meet our instructional goal. Since we cannot discuss how to select all the different types of media that we identified in Unit 2, we will select a few to use as examples. "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _c("ol", [
        _c("li", [_vm._v("Non-projected media;")]),
        _c("li", [_vm._v("Non-Projected Visuals;")]),
        _c("li", [_vm._v("Projected media;")]),
        _c("li", [_vm._v("Audio media;")]),
        _c("li", [_vm._v("Motion media;")]),
        _c("li", [_vm._v("Computer-based multimedia and hypermedia.")]),
        _c("li", [_vm._v("Web-based media ")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _c("i", [_vm._v("Advantages ")]),
      _c("ul", [
        _c("li", [
          _vm._v(
            " They are readily available on an unlimited range of topics. "
          )
        ]),
        _c("li", [
          _vm._v(
            " They are easy to use and do not require any special equipment. "
          )
        ]),
        _c("li", [
          _vm._v(
            " They are easy to produce locally as you and your students could draw simple pictures or graphics and take photographs yourselves. In today's digital world, your learners could take photographs basically anywhere using their mart phones and I-pads. "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _c("i", [_vm._v("Disadvantages ")]),
      _c("ul", [
        _c("li", [
          _vm._v(
            " To select appropriate non-projected visuals, you should be skilled enough in media selection using the required criteria. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Most non-projected visuals are obtained from textbooks and magazines and they tend to be too small to be used in front of a class unless they are enlarged or projected. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Interpretation of visuals requires skill and teachers need to train students in visual literacy to be able to interpret visuals correctly. "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [
        _vm._v(
          " It enables you to project anything that appears on your computer monitor- data, text, or visuals. "
        )
      ]),
      _c("li", [
        _vm._v(
          " The computer can store an infinite number of visuals which can be retrieved by simply pressing a key. "
        )
      ]),
      _c("li", [
        _vm._v(
          " The display can be changed and made interactive during the show. "
        )
      ]),
      _c("li", [
        _vm._v(
          " They are easy to adapt and manipulate to suit different situations. "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _c("i", [
        _vm._v(
          " As much as there are advantages, there are also some limitations of computer image projection. These include the following "
        )
      ]),
      _c("ul", [
        _c("li", [
          _vm._v(
            " The room must be darkened more than for conventional overhead projection. In a classroom with large windows and no curtains or blinds, this may pose a challenge. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Low resolution makes LCD presentations best suited to small or medium-size groups. "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _c("i", [_vm._v("Step- by - step process in media selection")]),
      _c("br"),
      _c("br"),
      _vm._v(
        " For you to select the most appropriate instructional media during the lesson, you will need to follow the following steps: "
      ),
      _c("ol", [
        _c("li", [
          _vm._v(
            " Determine whether the purpose of your lesson is to transmit information or instruction. When a lesson involves transmission of information, the learners are not held responsible for measurable, specific actions or performance since the content is presented to give an overview of ideas, subject matter, to generate interest or to provide background information. When a lesson involves instruction, learners are required to give demonstrable proof that they have learned and they are held responsible for the success of the lesson. Both of these categories have sufficiently different characteristics to suggest that different media might be justified. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Determine the transmission method. This focuses on the methods used to transmit the content to the learners. The most dominant methods are; direct instruction, indirect instruction, interactive instruction, and individualized instruction. In most cases, direct and indirect instruction are teacher-centered approaches and the most commonly used media are those which are teacher controlled while interactive and individualized instruction which are learner-centered are best presented using instructional media that are learner controlled. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Determine the lesson characteristics. Once you have formulated the lesson objectives, the learning outcomes are determined and this helps you in deciding on the learning experiences that will be organized for the students. The learning experiences help in selecting the types of media to be used. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Select an initial class of media. The selection of the media format depends on certain practical considerations with respect to media characteristics. Each type of medium has a number of characteristics, including special capabilities and limitations, according to the quality and type of communication you are expecting of it. For example, some media are capable of presenting information in graphic form, others are also able to communicate using graphics, but can also add an element of motion. Other media are especially made to provide sound, while other media tend to engage the learners more easily than others. Some media are economical in presenting verbal information, while others are convenient to produce, modify and revise. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Analyse media characteristics. You need to refer to your initial choice of media and review the list of unique characteristics of each medium, its advantages and disadvantages for presenting that particular lesson content. This helps you to review your media selection and to refine the selection by either retaining the same media selection or reconsider your decision. If you decide that the initial media selection is no longer appropriate, then you have to go back and select another media format. "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [
        _vm._v(
          " No one medium is best for all instructional purposes. The best choice of media depends on what type of media shows best the principle being taught. For example, if the third dimension plays an important part in communicating your message, then you should expect better results from a model. "
        )
      ]),
      _c("li", [
        _vm._v(" Media uses should be consistent with lesson objectives. ")
      ]),
      _c("li", [
        _vm._v(" Users must familiarize themselves with media content ")
      ]),
      _c("li", [
        _vm._v(" Media must be appropriate for the instructional format. ")
      ]),
      _c("li", [
        _vm._v(
          " Media must be adaptable to student capabilities and learning styles. "
        )
      ]),
      _c("li", [
        _vm._v(
          " Media are neither good nor bad simply because they are concrete or abstract. "
        )
      ]),
      _c("li", [
        _vm._v(
          " Media should be chosen objectively rather than on the basis of personal preferences or bias. "
        )
      ]),
      _c("li", [
        _vm._v(
          " Physical conditions surrounding uses of media significantly affect the results obtained. "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [
        _vm._v(
          " Be sure everyone can see them. All visuals materials being used with a group must be visible. They should be large enough to be seen easily by everyone in class. "
        )
      ]),
      _c("li", [
        _vm._v(
          " Use three-dimensional materials in combination with other media. For example, when you use a model of a flower to explain pollination in a Biology class, you could use a large chart to show the details "
        )
      ]),
      _c("li", [_vm._v(" Practice using the materials before the class. ")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "ml-5 text-justify" }, [
      _c("p", { staticClass: "text-justify meme" }, [
        _c("i", [_vm._v("People as a resource")]),
        _c("br"),
        _vm._v(
          " People as a resource for learning consist of professionals and experienced groups. To utilize people as learning resources requires proper planning. Planning entails: "
        ),
        _c("ul", [
          _c("li", [_vm._v(" Specifying the instructional objectives. ")]),
          _c("li", [
            _vm._v(
              " Interacting with the person either formally or informally to establish whether they will live up to the expectations of your students. "
            )
          ]),
          _c("li", [
            _vm._v(
              " Invite the person formally to class and brief them on : the level of the class, their interests, the learning objectives, the students' expectations, time allowed for the presentation, "
            )
          ]),
          _c("li", [
            _vm._v(
              " Introduce the person during the presentation and be present throughout the presentation. "
            )
          ]),
          _c("li", [_vm._v(" Include a question or discussion session. ")]),
          _c("li", [
            _vm._v(" Organize a follow-up activity after the presentation. ")
          ])
        ])
      ]),
      _c("p", { staticClass: "text-justify meme" }, [
        _c("i", [_vm._v("Activities as a resource")]),
        _c("br"),
        _vm._v(
          " Activities could include; agricultural show, trade fair, exhibition, religious gathering, visiting speaker, a function etc. Community activities are tricky to use because they are completely out of your control as the teacher. Therefore, it is important that you familiarize yourself with the contents of the activity by either; attending the event prior to taking your students, reading from brochures, newspapers, talking to the organizers, etc. In case you decide to take the students to the activity, brief them about what to look for and ask them to prepare a brief report of what they saw and learned. Also if you cannot take the students, you could attend the event, collect relevant literature, record the proceedings, etc., and then make a presentation to your students personally."
        ),
        _c("br"),
        _c("br"),
        _c("i", [_vm._v("Places as a resource")]),
        _c("br"),
        _vm._v(
          " Places refer to locations within the community which might contain facilities that could be used to demonstrate certain concepts and ideas. These could include; irrigation projects, factories, markets, landforms, institutions, etc. Trips are organized to places where students can see in practice or in reality what they have studied in class. Note that Dale's cone of Experience places field trips towards the middle of the cone (See sub-section 2.2.2 - Role of Media in Teaching and Learning) because though the experience is real, students are only seeing and hearing but not directly manipulating them. Once students undertake such trips, concepts and generalizations that were difficult to formulate become clearer. Study trips can be organized in any subject area for any level of students. For more information on field trips, refer to school guidelines (If already a practicing teacher) or access information from the Internet."
        ),
        _c("br"),
        _c("br"),
        _c("i", [_vm._v("Objects as a resource")]),
        _c("br"),
        _vm._v(
          " Objects refer to things that are found within the community which could be used to yield certain learning outcomes. Objects include; artifacts, specimens, coins, etc. The procedure for utilizing objects is similar to that of other media, though as a teacher you need to develop the habit of collecting them from community and building a resource pool for such objects so that you can select and use them at your convenience."
        ),
        _c("br"),
        _vm._v(
          " To utilize community resources in general, the following procedure should apply: "
        ),
        _c("ul", [
          _c("li", [
            _vm._v(
              " Plan for the use of any community resource whether people, activities, places or objects. Planning involves formulating an instructional goal and stating the learning outcomes/objectives to be achieved by using the identified community resources. "
            )
          ]),
          _c("li", [
            _vm._v(" Know the types of resources available in your community. ")
          ]),
          _c("li", [
            _vm._v(
              " Consider the use of other media such as photographs, maps, video and audio recordings, etc. "
            )
          ]),
          _c("li", [
            _vm._v(
              " Always include follow-up discussions for students to reflect on their learning experiences. "
            )
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "ml-5 text-justify" }, [
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(
          " Two-dimensional visuals include pictures and graphics. Generally two-dimensional visuals such as diagrams are often abstract and require special background knowledge to read them. When considering such visuals, a teacher needs to ask himself/herself two questions. First, is the visual illustration necessary at all? Second, if it is necessary, how much does the visual contribute to the understanding of the content/concept or process being taught?"
        ),
        _c("br"),
        _c("br"),
        _vm._v(
          " Graphics help to synthesize information and highlight significant elements and should be used after the content/concept has been introduced. "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "ml-5 text-justify" }, [
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(
          " A display is an organized arrangement of visual and verbal learning materials that presents significant information or ideas on a topic or theme. A display might involve the use of either two or three dimensional materials such as diagrams, photographs, graphs, or objects and specimen. "
        )
      ]),
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(" Displays serve three main functions: "),
        _c("ul", [
          _c("li", [
            _c("i", [_vm._v(" Motivational")]),
            _vm._v("; as they stimulate interest and curiosity. ")
          ]),
          _c("li", [
            _c("i", [_vm._v("Developmental")]),
            _vm._v(
              "; by providing additional information on a topic and facilitating comprehension. "
            )
          ]),
          _c("li", [
            _c("i", [_vm._v("Visual summary")]),
            _vm._v(
              "; by pulling together the key ideas in a topic or unit of study. "
            )
          ])
        ])
      ]),
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(
          " As we mentioned in Unit 2, display surfaces include; felt boards, pegboards, chalkboards, bulletin boards, flip charts, magnetic boards, and exhibits. "
        )
      ]),
      _c("p", { staticClass: "text-justify meme" }, [
        _c("i", [_vm._v("Planning and Organizing Displays ")]),
        _c("ul", [
          _c("li", [
            _vm._v(
              " Plan ahead and have a good idea at the beginning of the term the topics or units for which displays will be appropriate. "
            )
          ]),
          _c("li", [
            _vm._v(
              " Formulate clear goals for using displays to arouse students' interest, to explain a certain process, to pose a problem, etc. "
            )
          ]),
          _c("li", [_vm._v(" Identify the content for your display. ")]),
          _c("li", [
            _vm._v(
              " Gather the materials. Decide on the nature of the materials for the display. The materials could include newspaper and magazine articles, photographs, graphs, charts, objects, specimen, etc. make sure that the materials provoke further questions in the students'/viewers' mind. The materials collected should complement each other and enhance an overall effect. "
            )
          ]),
          _c("li", [
            _vm._v(
              " Plan a layout of the display. Attributes of a good display layout include: the display should communicate one central idea so keep it simple, use colour wisely, use appropriate headings and captions, use good lettering, and involve the viewers (Wittich & Schuller, 1979:130-135). "
            )
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [_vm._v(" preview the materials ")]),
      _c("li", [_vm._v(" prepare the materials ")]),
      _c("li", [_vm._v(" prepare the environment ")]),
      _c("li", [_vm._v(" prepare the learners ")]),
      _c("li", [_vm._v(" provide the learning experience. ")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _c("i", [_vm._v("Preview the Materials")]),
      _vm._v(
        " Audio materials should be previewed using an appraisal checklist. The checklist should cover the following criteria: "
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-justify meme" }, [
      _vm._v(
        " As you preview the materials, decide how you are going to use the materials, how the students will be involved, and what follow-up activities to use."
      ),
      _c("br"),
      _c("br"),
      _c("i", [_vm._v("Prepare the Materials")]),
      _c("br"),
      _vm._v(
        " Before using audio materials for group presentation, practice operation of the equipment. Cueing the material is important to avoid delays and lost time. Prepare your introduction and follow-up. If there are other materials to be used along-side with the audio materials, be sure to practice first."
      ),
      _c("br"),
      _c("br"),
      _c("i", [_vm._v("Prepare the Environment")]),
      _c("br"),
      _vm._v(
        " Set up the classroom or learning environment so that all students can hear the audio tape. For a large audience, avoid using a small audio cassette recorder/playback. Make sure that you use good quality speakers that do not distort the sound."
      ),
      _c("br"),
      _c("br"),
      _c("i", [_vm._v("Prepare the Learners")]),
      _c("br"),
      _vm._v(
        " Before playing the audio material, communicate to students how the material relates to what they have studied before, what they should learn from the materials, and what follow-up activities will be used. If new vocabulary, or technical terms are going to be presented, list them on the chalkboard, handout or overhead transparency and define/ explain them before students listen to the audio materials."
      ),
      _c("br"),
      _c("br"),
      _c("i", [_vm._v(" Provide the Learning Experience")]),
      _c("br"),
      _vm._v(
        " Engage learners in activities during the presentation to help in learning transfer. Let students carry out certain learning activities as they listen. Develop audio learning skills by engaging students in activities that force them to listen attentively to the presentation through tasks based on what they listen to and hear from the audio presentation. One way of doing this is to give students a set of questions to answer as they listen to the audio tape."
      ),
      _c("br"),
      _c("br")
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "text-justify ml-5" }, [
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(
          " First you need to evaluate the purpose for which the materials are to be used and then select the type of material to accomplish this purpose."
        ),
        _c("br"),
        _c("br"),
        _vm._v(
          " The first step in selecting still projection materials is deciding whether a particular material serves a specific teaching purpose better than another medium or device. In this case, consider the unique properties of that particular medium. The five basic questions to ask include "
        )
      ]),
      _c("p", { staticClass: "text-justify meme font-italic" }, [
        _c("ul", [
          _c("li", [
            _vm._v(
              " Is motion necessary for students' understanding of the concepts to be learned? If so, then still projection media are not the best. "
            )
          ]),
          _c("li", [
            _vm._v(
              " Are suitable materials available for my particular teaching purpose? "
            )
          ]),
          _c("li", [
            _vm._v(
              " Does what I am teaching involve a series of step-by-step developments or a fixed logical progression? If so, transparency overlays will be the best choice "
            )
          ]),
          _c("li", [
            _vm._v(
              " Do I need materials that tell a story through pictures? If so, still projection will be necessary. "
            )
          ]),
          _c("li", [
            _vm._v(
              " Is speed or other aspects of timing important in my teaching goal? "
            )
          ])
        ])
      ]),
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(
          " After selecting the type of still projection to use, then prepare for the presentation. At this stage, you need to become fully acquainted with the key points to be highlighted for the students. This should happen when you preview the still projection."
        ),
        _c("br"),
        _c("br"),
        _vm._v(
          " The next step is to prepare the class by explaining to them why they are viewing that particular presentation. Let students understand clearly what to look for from the projection."
        ),
        _c("br"),
        _vm._v(
          " Next, make the presentation and involve the students in the actual use of media. Finally, provide some follow-up activities that allow students to evaluate demonstrate and apply what they have learned. "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "text-justify ml-5" }, [
      _c("p", { staticClass: "text-justify meme" }, [
        _vm._v(
          " Follow the 5 P's of media utilization namely; preview the materials, prepare the materials, prepare the environment, prepare learners and provide the learning experience."
        ),
        _c("br"),
        _c("br"),
        _c("i", [_vm._v("Preview the materials")]),
        _c("br"),
        _vm._v(
          " Video and wide materials should be previewed for appraisal and selection."
        ),
        _c("br"),
        _c("br"),
        _c("i", [_vm._v("Prepare the materials/equipment")]),
        _c("br"),
        _vm._v(
          " Set up the equipment for operation before using it to ensure that it is functional. Decide in advance how you will introduce the material and what follow-up activities to include."
        ),
        _c("br"),
        _c("br"),
        _c("i", [_vm._v("Prepare the environment")]),
        _c("br"),
        _vm._v(
          " Make sure that the venue for viewing the video and film is properly set, in terms of seating arrangements, lighting, and sound production."
        ),
        _c("br"),
        _c("br"),
        _c("i", [_vm._v("Prepare the learners")]),
        _c("br"),
        _vm._v(
          " Let students see how the day's lesson links up with previously covered content. Create a need to know among the students. Stimulate curiosity by asking questions that students would like answered from the video or film. Clarify the objectives of the lesson. Mention specific things to look for from the presentation. If a lot of content will be presented, give students some advance organizers."
        ),
        _c("br"),
        _c("br"),
        _c("i", [_vm._v("Provide the learning experience")]),
        _c("br"),
        _vm._v(
          " Observe for learner reactions. As students watch the video or film, provide for learner participation. Engage students in activities that would assist in learning transfer. "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("tbody", [
      _c("tr", [
        _c("td", [
          _vm._v(
            " Lecture in classroom or Internet Labs (or where connection is available) "
          )
        ]),
        _c("td", [_vm._v(" Learning anywhere, anytime ")])
      ]),
      _c("tr", [
        _c("td", [_vm._v(" E-mail to e-mail ")]),
        _c("td", [_vm._v(" Instantaneous messaging ")])
      ]),
      _c("tr", [
        _c("td", [_vm._v(" Private Location ")]),
        _c("td", [_vm._v(" No geographical boundaries ")])
      ]),
      _c("tr", [
        _c("td", [_vm._v(" Travel time to reach Internet site ")]),
        _c("td", [
          _vm._v(" No travel time with wireless Internet connectivity ")
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "note note-success meme text-justify" }, [
      _c("blockquote", { staticClass: "blockquote bq-success" }, [
        _c("h1", { attrs: { id: "item-6" } }, [
          _c("i", { staticClass: "fas fa-folder-open" }, [
            _vm._v("Unit summary")
          ])
        ]),
        _c("p", { staticClass: "text-justify meme" }, [
          _vm._v(
            " In this unit we have discussed the range of media for teaching and learning other than print media. We have also discussed the advantages and disadvantages of using different types of media during instruction. We went on to discuss how to select and use different types of media during instruction. We also discussed printed materials. We identified the various types of printed materials that we could use during instruction as well as the advantages and disadvantages of using these. We have also discussed how to select and use different types of printed materials. One important thing we have mentioned is that when selecting the materials we need to consider whether the materials will be used for mass instruction, group instruction or individualized instruction. We concluded the unit by discussing the criteria that we should use when selecting or evaluating printed materials for use during instruction. "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("h1", { attrs: { id: "item-7" } }, [
      _c("i", { staticClass: "fas fa-" }, [_vm._v("References")])
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}