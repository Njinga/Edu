{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit1.vue?vue&type=template&id=34b8bee3&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit1.vue","mtime":1594061639949},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:
<div class="about">
    <div class="border border-light p-3 mb-5 rounded ">
        <div class="row">
            <div class="col-sm-4 col-lg-3">
                <nav id="navbar-example3" class="navbar navbar-light sticky-top flex-column mt-4">
                    <a class="navbar-brand" href="#">Unit 1</a>
                    <nav class="nav nav-pills flex-column">
                        <a class="nav-link" href="#item-1">1.1 Introduction</a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ml-3 my-1" href="#item-1-1"> Unit Outcomes</a>
                            <a class="nav-link ml-3 my-1" href="#item-1-2"> Terminology</a>
                        </nav>
                        <a class="nav-link" href="#item-2">1.2 Key Concepts Applicable to Educational Technology and ICTs</a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ml-3 my-1" href="#item-2-1"> 1.2.1 What is Educational technology?</a>
                            <nav class="nav nav-pills flex-column">
                                <a class="nav-link ml-5 my-1" href="#item-2-1-1">Activity 1.1</a>
                            </nav>
                            <a class="nav-link ml-3 my-1" href="#item-2-2"> 1.2.2 Why Study Educational Technology?</a>
                        </nav>
                        <a class="nav-link" href="#item-3">1.3 Meaning and Scope of ICTs</a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ml-3 my-1" href="#item-3-1">1.3.1 Types of ICTs</a>
                            <a class="nav-link ml-3 my-1" href="#item-3-2">1.3.2 ICTs as media of communication</a>
                            <a class="nav-link ml-3 my-1" href="#item-3-3">1.3.3 Information Technology (IT) equipment</a>
                            <a class="nav-link ml-3 my-1" href="#item-3-4">1.3.4 Telecommunications</a>
                            <a class="nav-link ml-3 my-1" href="#item-3-5">1.3.5 Limitations of ICTs</a>
                            <nav class="nav nav-pills flex-column">
                                <a class="nav-link ml-5 my-1" href="#item-3-5-1">Activity 1.2</a>
                            </nav>
                        </nav>
                        <a class="nav-link" href="#item-4">1.4 Introduction to Social Media</a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ml-3 my-1" href="#item-4-1">1.4.1 Examples  of Social Media</a>
                        </nav>
                        <a class="nav-link" href="#item-5">1.5 Educational Technology, Classroom Communication and Learning</a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ml-3 my-1" href="#item-5-1">1.5.1 Communication and learning</a>
                            <a class="nav-link ml-3 my-1" href="#item-5-2">1.5.2 A simple communication model</a>
                            <nav class="nav nav-pills flex-column">
                                <a class="nav-link ml-5 my-1" href="#item-5-2-1">Activity 1.3</a>
                            </nav>
                        </nav>
                        <a class="nav-link" href="#item-6">1.6 The Changing Role of the Teacher in Classroom Communication</a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ml-3 my-1" href="#item-6-1">Activity 1.4</a>
                        </nav>
                        <a class="nav-link" href="#item-7">Unit summary</a>
                        <a class="nav-link" href="#item-8">Assignment</a>
                        <a class="nav-link" href="#item-9">References</a>
                    </nav>
                </nav>
            </div>

            <div class="col-sm-8 col-lg-9">
                <div data-spy="scroll" class="scrollspy-example z-depth-1 mt-4 shadow-lg p-3 mb-5 rounded" data-target="#navbar-example3"
                     data-offset="0">
                    <mdb-container fluid>
                        <mdb-row class="text-left">
                            <div>
                                <h1 class="h1-responsive">Unit 1</h1>
                                <h1 class="h1-responsive">Introduction to Educational Technology and Skills</h1>
                                <br />
                                <h2 id="item-1" class="h2-responsive"> 1.1 Introduction</h2>
                                <div class="ml-5">
                                    <p class="text-justify meme">

                                        This unit introduces you to the
                                        concept of Educational
                                        Technology as well as
                                        to the other key concepts
                                        that are applicable to the
                                        field of Educational Technology.
                                        Some of the questions that you
                                        need to ask yourself include the following:
                                        <i>
                                            What is Educational Technology? What other
                                            concepts relate to educational Technology?
                                            Is Educational Technology relevant to teaching and learning?
                                        </i>
                                        The unit also introduces you to Information and Communication Technology (ICT)
                                        which is closely related to educational/instructional technologies as they too
                                        (ICTs) are used as equipment and tools when teaching learners in a classroom.
                                    </p>
                                    <div class="note note-info">
                                        <blockquote class="blockquote bq-info">
                                            <h4 id="item-1-1"> <i class="fas fa-paper-plane"> Unit Outcomes</i></h4>
                                            <p class="text-justify">
                                                Upon completion of this unit you will be able to:
                                                <ul>
                                                    <li>explain the key concepts and terms applicable to Educational Technology.</li>
                                                    <li>distinguish between Educational Technology and Information and Communication Technology </li>
                                                    <li>relate Educational Technology to classroom communication and learning.</li>
                                                    <li>discuss the changing role of the teacher in using educational media in the classroom.</li>

                                                </ul>
                                            </p>
                                        </blockquote>
                                    </div>
                                    <br />
                                    <div class="note note-success">
                                        <blockquote class="blockquote bq-success">
                                            <h4 id="item-1-2"> <i class="fas fa-check-square"> Terminolgy</i></h4>
                                            <p class="text-justify">
                                                <kk> Educational Technology Information:</kk>

                                                All components of informational technology that
                                                are used to deliver educational materials.<br /><br />

                                                <kk> Information Communication Technology:</kk>

                                                The combination of hardware, software and the
                                                means of production that enable the exchange,
                                                processing and management of information and knowledge.<br /><br />

                                                <kk> Instructional Technology:</kk>
                                                Theory and practice of design, development, utilization,
                                                management, and evaluation of processes and resources for learning.<br /><br />

                                                <kk> Information Technology:</kk>
                                                The hardware or equipment which make the software designed
                                                to run specific programmes work. <br /><br />

                                                <kk> Digital Libraries:</kk>
                                                A digital library is like any ordinary library except
                                                that the materials available are electronic or
                                                take a digital format e.g. E-Books.<br /><br />

                                                <kk> E-learning:</kk>
                                                <fight> Please consider adding definition</fight><br /><br />


                                                <kk> Digital device:</kk>
                                                <fight> Please consider adding definition</fight><br /><br />


                                                <kk>Social Media:</kk>
                                                An Internet-based form of communication. Social
                                                media platforms allow users to have conversations,
                                                share information and create web content.<br /><br />

                                                <kk> Communication:</kk>
                                                The process through which ideas, information,
                                                or skills are passed from a source to a receiver as intended.
                                                <br /><br />

                                                <kk> Media:</kk>
                                                The different types of materials and/or
                                                artifacts used by the teacher in supporting the
                                                teaching and learning process.
                                                <br /><br />


                                            </p>
                                        </blockquote>
                                    </div>
                                </div>
                            </div>
                        </mdb-row>
                        <br /><br />
                        <mdb-row class="bg-primary text-left ">
                            <h2 id="item-2" class="h2-responsive">1.2 Key Concepts Applicable to Educational Technology and ICTs</h2>
                            <br />
                            <h3 id="item-2-1" class="h3-responsive"> 1.2.1 What is Educational technology?</h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    The concept 'Educational Technology' is very wide and as a result difficult to define.
                                    The term itself has been evolving over a very long time.   For example, when a classroom
                                    teacher browses the Internet for new teaching materials, that teacher is using some of
                                    the latest educational technology.  What you must realize is that educational technology
                                    is not new at all, and it is by no means limited to the use of equipment let alone
                                    electronic equipment. Modern tools and techniques are simply the latest developments
                                    in a field that some people believe is as old as education itself (Roblyer, 2004).
                                    The definition of the term educational technology varies depending on whether the
                                    term is used by educators or by technologists.
                                </p>
                                <p class="text-justify meme">
                                    Technology is both a tool and a process. As a process, technology refers to construction
                                    uses and organization of knowledge for the achievement of practical purposes in intellectual
                                    and social contexts while technology as a tool refers to material construction and operation
                                    of physical systems based on knowledge of design.  Technology is commonly thought of in terms
                                    of instruments, machines, and devices.
                                </p>
                                <p class="text-justify meme">
                                    The term 'education' on the other hand refers to facilitation of learning by
                                    arranging environments and information and it can result from either instruction
                                    or experience.    Many educators use the term educational technology very broadly.
                                    Educational technology for those educators includes any media that can be used
                                    during instruction.  In such cases, educational technology is  simply  defined
                                    as an array of instructional or communication tools that might prove helpful in
                                    advancing student learning (Wikipedia, the free encyclopedia).
                                </p>
                                <p class="text-justify meme">
                                    Please note that by media (also referred to as instructional media) we mean all
                                    the materials and physical means that an instructor might use to implement
                                    instruction and facilitate students' achievement of instructional objectives.
                                    This could include traditional materials such as chalkboards, handouts, charts,
                                    overhead projectors, real objects, as well as the newer materials and methods
                                    such as DVDs, CD-ROMs, the Internet and interactive media.  Below is an example
                                    of a media technology   that a teacher can use to project different instructional
                                    materials.
                                </p>
                                <p class="text-center meme">
                                    <img src="../assets/projector.png" class="img-fluid" alt="Responsive image"><br />
                                    <i><strong> Computer/Video Projector</strong></i>

                                </p>
                                <p class="text-justify meme">
                                    Educational Technology relies on a broad definition of the word 'technology'.
                                    The word technology can refer to material objects of use to humanity such as
                                    machines, hardware or utensils, but it can also include broader themes such
                                    as systems, methods of organization, and techniques.
                                </p>
                                <p class="text-justify meme">
                                    The term educational technology therefore has several definitions that might
                                    include any of the following components:
                                    <ul>
                                        <li>all components of informational technology that are used to deliver educational materials;</li>
                                        <li>
                                            complex and integrated processes involving people, procedures, ideas, devices and organization for analyzing problems,
                                            implementing, evaluating and managing solutions in all aspects of human learning; and
                                        </li>
                                        <li>use of technology to improve teaching and learning. </li>

                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    The Association for Educational Communication and Technology (AECT), defines educational technology as
                                    'The theory and practice of design, development, utilization, management,
                                    and evaluation of processes and resources for learning'
                                    (Lever-Duffy, J.; McDonald, J.B.; Mizell, A.P. (2005).
                                </p>
                                <p class="text-justify meme">
                                    The above definition takes the broadest view possible and allows us to explore the
                                    full range of media that a teacher might use to enhance
                                    his/her instruction and assist students to learn.
                                    Based on the above broad definition, we can simply
                                    define educational technology as <i>
                                        any technology used by educators in support of the teaching
                                        and learning process.
                                    </i>
                                </p>
                                <p class="text-justify meme">
                                    You will note that
                                    educational technology
                                    can include any resource
                                    and any process that
                                    facilitates learning.
                                    For example, a teacher
                                    might use educational
                                    technology to enhance
                                    the quality and clarity
                                    of communication or might
                                    employ a particular process or a
                                    specific learning style or intelligence.
                                </p>
                                <p class="text-center font-italic font-weight-bold meme">Instructional Technology </p>
                                <p class="text-justify meme">
                                    The term educational technology is often associated with instructional technology.
                                    According to Heinich, Molenda, Rusell, & Smaldino (1996:411), Instructional
                                    Technology refers to <i>
                                        a complex integrated process involving people,
                                        procedures, ideas, devices, and organization, for analyzing problems and
                                        devising, implementing, evaluating, and managing solutions to those
                                        problems in situations in which learning is purposive and controlled".
                                    </i>
                                </p>
                                <p class="text-justify meme">
                                    Before you continue reading this module, stop for a while and carry out this task.
                                </p>


                                <div class="note note-primary">
                                    <blockquote class="blockquote bq-primary">
                                        <h4 id="item-2-1-1"> <i class="fas fa-tools"> Activity 1.1</i></h4>
                                        <br>
                                        Based on the definitions that you have been
                                        given above, construct your own definition of the term 'educational technology'.
                                    </blockquote>
                                </div>
                                <br />
                                <p class="meme">
                                    I suppose in your definition of educational technology you have included the following key elements:
                                    <ul>
                                        <li>the concept of educational technology focuses on both procedures and devices;</li>
                                        <li>it is an integrated process which involves people, procedures, devices and organization;</li>
                                        <li>it is a complex process. </li>
                                    </ul>
                                </p>
                            </div>
                            <br>
                            <h3 id="item-2-2" class="h3-responsive">1.2.2 Why Study Educational Technology?</h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    If we go by the simple definition of educational technology as <i>
                                        "any technology used by educators in support
                                        of the teaching and learning process",
                                    </i> as a teacher you have to be prepared for the use of technology
                                    to keep up with the rapid changes in the world. Not only that but
                                    also, the learners are different, learning occurs differently,
                                    so teaching must vary too.  As a 21st Century teacher ,
                                    you must be prepared to provide technology-supported learning
                                    opportunities for your students. You should be able to use
                                    educational technology effectively in your classroom to facilitate
                                    learning.   You cannot do this unless  you know what technology
                                    is available for teaching and learning, and how it fits into your
                                    own instructional situation.
                                </p>
                                <p class="text-justify meme">
                                    As you might be aware by now, for learning to take place, instruction may be necessary
                                    <i>
                                        Instruction in this case refers to the arrangement of information and environment
                                        to facilitate learning.
                                    </i>
                                    By environment, we do not just mean where instruction takes place but also
                                    the methods, media and equipment that are used or needed to facilitate and
                                    guide the learner's study. Information and environment will change depending
                                    on the instructional goal. Therefore, as the expected learning outcomes change,
                                    you may need to change the way that you arrange the instructional environment.
                                    You need to adapt your instruction to changing times and environments,
                                    which necessitates that you have a thorough working knowledge of the
                                    many kinds of educational technologies available that might assist
                                    you in teaching and  enhance learning simultaneously. Educational
                                    technologies are the tools that a teacher might need to use in order
                                    to create an effective instructional experience.
                                </p>
                            </div>
                        </mdb-row>
                        <br /><br />

                        <mdb-row class="bg-primary text-left">
                            <h2 id="item-3" class="h2-responsive">1.3 Meaning and Scope of ICTs</h2>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    ICTs can be described as a combination of hardware, software and
                                    the means of production that enable the exchange, processing and
                                    management of information and knowledge. They offer new ways of
                                    communicating and exchanging information and knowledge. Through
                                    communication via ICTs, the world has since become  a global village
                                    where for instance, people from one country can learn about happenings
                                    in many other countries or even across continents as soon as the news
                                    break. People can communicate with each other globally instantly and
                                    access information or relevant data when needed at the mere touch of
                                    a button. ICTs and traditional mass media such as television,
                                    newspapers and radio, are therefore some of the components of
                                    the information-transfer system in international communication.
                                    Do you see the resemblance to educational technologies?
                                </p>
                            </div>
                            <br />
                            <h3 id="item-3-1" class="h3-responsive">1.3.1 Types of ICTs</h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    ICTs include other communication
                                    devices that facilitate
                                    communication between
                                    individuals, groups
                                    as well as mass
                                    communication.
                                    These may
                                    include
                                    among others
                                    posters,
                                    charts,
                                    overhead
                                    projectors,
                                    fax machines,
                                    telephones,
                                    newspapers
                                    and bulletin
                                    boards to mention some.
                                    Television, newspapers and
                                    radio are considered components of information transfer because of
                                    the role they play in disseminating information to people in a 'mass' format.
                                    The degree of their usage however varies based on the location and/or situation
                                    one is in. In most African countries for example, the above communication devices,
                                    including radio and television are the most common means of sharing ideas and disseminating
                                    information. The above are also widely used in schools.
                                </p>
                                <p class="text-justify meme">
                                    While the term 'ICTs' can be interpreted as including a wide range of media, 'new ICTs' is used
                                    to denote the use of computers and communication systems between computers.
                                    These new ICTs are becoming more accessible, and users can obtain information
                                    from various sources, and one computer could meet the needs of a large community
                                    or school. This enables users to access programmes on the World Wide Web at a
                                    convenient time, and send feedback through e-mail or chat.
                                </p>
                                <p class="text-justify meme">
                                    Below is a graphic showing how a classroom in the 21<sup>st</sup> century can look like when
                                    ICTs and media technologies are in place. The graphic shows how a classroom can be
                                    wired or connected for different activities.
                                </p>
                                <p class="text-center meme">
                                    <img src="../assets/junk.png" class="img-fluid" alt="Responsive image"><br />
                                    <i><strong> 21<sup>st</sup> Classroom </strong></i>
                                </p>
                                <p class="text-justify meme">
                                    Chat can be either through text, audio, or video or a combination of all. When
                                    people chat, they go through discussion or 'chat' in real time. Teachers can
                                    create chats using social media such as Whats App and Facebook for students
                                    to chat, or if available, Learning Management Systems can also be used to
                                    organise chats.
                                </p>
                            </div>
                            <h3 id="item-3-2" class="h3-responsive">1.3.2 ICTs as media of communication</h3>
                            <div class="ml-5">
                                <p class=" text-justify meme">
                                    ICTs are a media of communication. We have seen how information is disseminated
                                    through a number of media. One such method is <strong>broadcasting</strong>.
                                    Traditionally, radio has been the main form of mass communication technology
                                    that is able to reach many people at once. Radio broadcast can reach communities
                                    at the very end of the development road - people who live in remote areas with
                                    no phones or electricity. Radio reaches people who can't read or write, and even
                                    in very poor communities, radio penetration is vast. Schools can organise radio
                                    listening groups whereby school related programmes can form part of the curriculum
                                </p>
                                <p class=" text-justify meme">
                                    Other communication devices include television, the Internet and mobile phones.
                                    These technologies have made it easier for information to reach the general
                                    public, teachers, students, and community members alike. Let us now look at
                                    Information Technology (IT) and its relationship to ICTs.
                                </p>
                            </div>
                            <br />
                            <h3 id="item-3-3" class="h3-responsive">1.3.3 Information Technology (IT) equipment</h3>

                            <div class="ml-5">
                                <p class=" text-justify meme">
                                    Information technology is another element of ICTs.
                                    For our purposes in this course, we look at equipment or
                                    hardware. These are the hardware or equipment which
                                    make the software designed to run specific programmes
                                    work. They enable information (sound, text, graphics,
                                    video, etc.) to pass through and reach the recipient
                                    at the receiving end As well. These include computers,
                                    television sets, telephones, radio, fax machines, and
                                    many others. As you can see from the above description,
                                    the same types of technologies keep coming back. Another
                                    important related issue to ICTs is Telecommunication.
                                    This is discussed briefly in the next topic.

                                </p>
                            </div>
                            <br />
                            <h3 id="item-3-4" class="h3-responsive">1.3.4 Telecommunications</h3>

                            <div class="ml-5">
                                <p class=" text-justify meme">
                                    Telecommunications are an integral part of ICTs. Through telecommunications,
                                    equipment, hardware, and gadgets are able to send, store, retrieve and
                                    disseminate information to the end user. In this case therefore,
                                    telecommunications may promote or hinder the functioning of IT
                                    equipment and hardware. For example, telephones and mobile-phones
                                    play a major role in connecting people and machines. If they are not
                                    functioning properly, communication will be severely hampered. Are you
                                    familiar with telephone companies that provide Internet services in
                                    Swaziland? This service is enabled by a sound telecommunications infrastructure.
                                    Schools can also be connected to the Internet via this system. ICTs through
                                    telecommunications play a major role in providing communities with ways of
                                    accessing information and knowledge through the following:
                                    <ul>
                                        <li><strong><i>School Libraries</i></strong></li>
                                        School libraries are resource centres where pupils
                                        can access information such as books, pamphlets,
                                        magazines, etc.  Furthermore, a well-equipped school
                                        library can offer other services such as photocopying,
                                        computer facilities, Internet connection as well as
                                        the use and production of audio-visual materials. As a teacher
                                        therefore you should constantly use libraries as well as encourage your
                                        learners to do the same.

                                        <li><strong><i>Digital Libraries</i></strong></li>
                                        Due to advancement in technology, digital libraries
                                        are now very common in many parts of the world.
                                        While there may not be one in your area, you can
                                        access it through the Internet.  Digital libraries
                                        operate like any ordinary library except that the
                                        materials available are electronic or take a digital
                                        format. Perhaps you have heard of e-books (electronic books).
                                        These are books (just like an ordinary book) except that they
                                        are not hard copies like the ones printed on paper and they cannot
                                        be touched. They are digital or electronic.
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    Digital and/or electronic materials are easily accessed and  easy to go
                                    through (navigate) unlike  ordinary books.  For example,
                                    you can search for key words and the system can instantly take
                                    you to those word/s. Moving from section to section and  chapter
                                    to chapter, etc. is easy and fast as well,.  One is also able to
                                    print materials easily. This is possible through what is known as
                                    <i>Hypermedia</i> or <i>Hypertext</i>. These terms will be discussed much further in
                                    Unit 2 of this module.
                                </p>
                                <p class="text-justify meme">

                                    Other resources which can be found in the digital library include magazines,
                                    journals, music files, video/DVD files and many more. All these can be
                                    accessed (downloaded) where there is free access, or where there is restriction
                                    and you have to pay for time or subscribe (sometimes free subscription are
                                    available but sometimes one has to pay). Teachers can be able to download Open
                                    Education Resources (OER's) from different locations on the net. While ICTs have
                                    many good things to offer, they also have limitations. Let us now look at some of
                                    the limitations below.

                                </p>
                            </div>
                            <br />
                            <h3 id="item-3-5" class="h3-responsive">1.3.5 Limitations of ICTs</h3>

                            <div class="ml-5">
                                <p class=" text-justify meme">
                                    In developing countries there are various social problems which
                                    create barriers to people (schools included) owning and using
                                    telecommunications and ICTs. These problems, amongst others, include
                                    finances, illiteracy, cultural barriers, lack of telecommunications
                                    infrastructure, lack of computer skills and technological know-how.
                                    Others include lack of access to computers and computer networks as
                                    a result of the digital divide. This amounts to no Internet access and
                                    lack of significant usage opportunities.
                                </p>
                                <p class=" text-justify meme">
                                    With the lack of computer skills for many teachers, a number of interventions
                                    need to be put in place such as re-training/in-service training, etc.
                                    For starters, this problem can be remedied once telecommunication
                                    infrastructures have been established in their areas of residence.
                                    In addition,  teachers need to have access to computers and the internet
                                    and be capacitated to have the necessary computer skills.
                                </p>
                                <p class=" text-justify meme">
                                    Other constraints to ICTs in rural areas for example, include the relying
                                    on physical infrastructures which may not work properly. These include
                                    electricity and poor telecommunications. Even when such infrastructures
                                    are in place, difficulties arise when they are poorly maintained or too costly
                                    to use. Teachers therefore are urged to use what is available cautiously, or
                                    improvise where possible so that learners can benefit from the cast technologies
                                    which are in place. In the next section, we will look at social media which is linked to ICTs
                                </p>
                            </div>
                            <div class="note note-primary ml-5">
                                <blockquote class="blockquote bq-primary">
                                    <h4 id="item-3-5-1"> <i class="fas fa-tools"> Activity 1.2</i></h4>
                                    Discuss how you can use ICT's in the classroom.
                                </blockquote>
                            </div>
                        </mdb-row>
                        <br /><br />
                        <mdb-row class="bg-primary text-left">
                            <h2 id="item-4" class="h1-responsive">1.4 Introduction to Social Media</h2>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    Social media is an Internet-based form of communication.
                                    Social media is commonly associated with Web 2.0, technology
                                    that focuses on integration, collaboration, and interaction.
                                    Social media platforms allow users to have conversations,
                                    share information and create web content. There are many forms
                                    of social media, which include blogs, micro-blogs, wikis, social
                                    networking sites, photo-sharing sites, instant messaging, video-sharing sites,
                                    podcasts, widgets, virtual worlds, and more. Perhaps you are familiar with a
                                    number of the above media. Many teachers and students use Facebook, Twitter,
                                    WhatsApp and other platforms for social and teaching/learning purposes.
                                </p>
                                <p class="text-justify meme">
                                    Billions of people around the world use social media to share information,
                                    conduct business and make connections. On a personal level, social media
                                    allows you to communicate with friends and family, learn new things,
                                    develop your interests, and be entertained. On a professional level, you
                                    can use social media to broaden your knowledge in a particular field and
                                    build your professional network by connecting with other professionals in your
                                    industry. At the company level, social media allows you to have a conversation with
                                    your audience, gain customer feedback, and elevate your products or services.
                                </p>
                                <p class="text-center meme">
                                    <img src="../assets/lol.png" class="img-fluid" alt="Responsive image"><br />
                                    <i><strong> What happens in Social Media interactions.</strong></i>
                                </p>
                                <p class="text-justify meme">
                                    Social media has many unique characteristics including:
                                    <ul sstyle="list-style-type:none">
                                        <li>
                                            <i> Immediacy</i> - Because of this, users are
                                            able to control the conversation by being the first to
                                            disseminate information and by having the ability to immediately respond or give feedback.
                                        </li>
                                        <li>
                                            <i> Interaction</i> - Social media  helps facilitate interaction and engagement between people;
                                            it can be used by teachers and students. It also helpsto improve communication and relationships.
                                        </li>
                                        <li>
                                            <i>Audience</i> -  Many social media sites operate free of charge and are accessible to a large and
                                            diverse audience through mobile devices and computers.
                                        </li>
                                    </ul>
                                </p>
                            </div>
                            <br />
                            <h3 id="item-4-1" class="h3-responsive"> 1.4.1 Examples  of Social Media</h3>
                            <div class="text-justify meme ml-5">
                                <p class="text-center font-italic"> facebook</p>
                                Facebook is a website that allows people from around the
                                world to network with friends, companies, and organizations.
                                Users can post updates, ask questions, play games, and share
                                videos, photos, and links.<br /><br />

                                <p class="text-center font-italic"> twitter</p>
                                Twitter is a micro-blogging site that allows users to post updates
                                in 140 characters or less. Users can share links, videos and photos,
                                while tagging their posts with searchable keywords.<br /><br />

                                <p class="text-center font-italic"> LinkedIn</p>
                                LinkedIn is a business-related social networking site used mainly
                                for professional networking. Users can build a profile, connect with
                                other professionals, join groups, and more. Teachers also use this service
                                at a professional level.<br /><br />

                                <p class="text-center font-italic"> Tumblr</p>
                                Tumblr is a micro-blogging platform and social networking website that
                                allows users to post multimedia and other content to a short-form blog.<br /><br />

                                <p class="text-center font-italic"> YouTube</p>
                                YouTube is the world's largest video sharing site. Users can view videos,
                                upload videos to their personal channel, subscribe to other channels,
                                comment on videos, and more. As a teachers you can select and use appropriate
                                videos from this site.<br /><br />

                                <p class="text-center font-italic"> Instagram</p>
                                Instagram is a social networking site that allows
                                users to share pictures and short videos using their mobile devices.<br /><br />
                                <p>
                                    More on this topic will be presented in Unit 2 of this module. Let us now continue
                                    with describing educational technology, classroom communication and learning.
                                </p>
                            </div>
                        </mdb-row>
                        <br /><br />
                        <mdb-row class="bg-primary text-justify">

                            <h2 id="item-5" class="h2-responsive">1.5 Educational Technology, Classroom Communication and Learning</h2>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    To understand how technology fits into instruction, we need first to have a
                                    clear picture of the nature of teaching,
                                    learning, and the instructional events that
                                    teachers construct for transferring information and skills to their
                                    students. As a teacher, you need a clear understanding of key teaching and
                                    learning theories. Since this module cannot provide you with that information,
                                    it is suggested that you refer to the relevant sections in your module on <strong>
                                        Teaching
                                        Principles and Practice.
                                    </strong>
                                </p>
                                <p class="text-justify meme">
                                    One of the things that you might have noted from your reading is the definition of terms like "teaching" and "learning".
                                    Nacino-Brown et al (1982:2) have defined teaching as <i>
                                        "an attempt to help someone acquire, or change some skills, attitude,
                                        or knowledge".
                                    </i>In other words, the teacher influences
                                    desirable change in the behaviour of the learner.
                                    The goal of teaching is to bring about desired learning in
                                    the student. The aim of teaching is to help individuals learn.
                                    Teaching can also be defined as a systematic, planned sequence of
                                    events that facilitates the communication of ideas, concepts or skills
                                    to a learner (Lever-Duffy, J.; McDonald, J.B.; Mizell, A.P. (2005).
                                    The act of teaching requires an understanding of learning and of
                                    the individual as well as understanding of environmental factors that affect the learner.
                                    This calls for imagination on the part of the teacher by selecting relevant content, using
                                    the most effective methods and materials and organizing the learning the environment in a way
                                    that learners interact with the content and helps to bring about the desired behaviour.
                                </p>
                                <p class="text-justify meme">
                                    Learning on the other hand is something that takes place in an
                                    individual's mind. It can never be seen or observed directly.
                                    Learning is said to have occurred whenever an individual's
                                    behaviour is modified or when a person thinks and acts differently,
                                    or when he/she has acquired new knowledge or a new skill
                                    (Kemp & Dayton, 1985:13).  According to Heinich et al (1996),
                                    <i>
                                        learning is the development of new knowledge, skills, or attitudes as an
                                        individual interacts with information and the environment.
                                    </i>
                                </p>
                                <p class="text-justify meme">
                                    The instructional/learning process involves the selection, arrangement, and
                                    delivery of information in an appropriate environment and the way the
                                    learner interacts with that information. Usually the arrangement of
                                    information and the environment is normally the responsibility of the
                                    instructor and the designers of instructional media.  As a teacher, you need
                                    to select, arrange, and deliver the information in an appropriate
                                    environment so that learners can interact with it and convert it into
                                    knowledge.


                                </p>
                                <p class="text-justify meme">
                                    For instruction to take place, instructional media are used since they form part of
                                    the instructional environment.   If you can recall, we gave a simple definition of
                                    education technology as <i>
                                        any technology used by educators in support of the teaching
                                        and learning process.
                                    </i>
                                </p>
                                <p class="text-justify meme">
                                    The best way for students to learn is for them to experience the environment firsthand.
                                    However, it is not always possible to provide learners with firsthand experience as the
                                    environment becomes more complex and some compromise in form of substitute experience
                                    must be developed.  The teacher will need to select and use appropriate media that could
                                    provide substitute experience.  Therefore, instructional media form part of the classroom
                                    communication process and play a vital role in the learning process.
                                </p>
                                <p class="text-justify meme">
                                    Earlier on, we defined instruction as the arrangement of information and environment to
                                    facilitate learning. That transmission or transfer of information from a source to a
                                    destination is called <strong>communication</strong>.   Since new learning usually depends on taking
                                    in new information, effective instruction cannot take place unless communication takes
                                    place. Therefore, we need to understand the communication process so that we can use
                                    educational technology effectively during instruction.
                                </p>
                            </div>
                            <br />
                            <h3 id="item-5-1" class="h3-responsive">1.5.1 Communication and learning</h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    The word 'communication' has its origin from a Latin word, <i>"communis"</i> which means,
                                    <i>"make common"</i>. This could be stretched to mean, 'create a common ground for understanding' or
                                    share with others an idea, concept, or information. Communication could also be defined as
                                    <i>an attempt to persuade people or influence them with intent</i>. Communication is the process
                                    through which information is passed from one person to another.
                                </p>
                                <p class="text-center meme">
                                    <img src="../assets/arrow.png" class="img-fluid" alt="Responsive image"><br />


                                </p>
                                <p class="text-justify meme">
                                    The graphic above shows how one begins the communication until it
                                    reaches the recipient. Note the channel/s which includes speaking, writing,
                                    graphics and video to mention some.
                                </p>
                                <p class="text-justify meme">
                                    As a teacher, you are basically a communicator. You have ideas and information to
                                    share with your students so that they know these. You need to make a deliberate effort
                                    to influence the students to perceive the ideas and information the same way you do.
                                    This means that you have to follow a process that will help you to share the ideas and
                                    the information with your students. That process is called communication.
                                </p>
                                <p class="text-justify meme">
                                    As mentioned previously, communication is the process through which ideas, information,
                                    or skills are passed from a source to a receiver as intended. Communication does not
                                    occur unless the person receiving the message interprets it as intended. This means that
                                    both the source and the receiver must share a common understanding of the message when
                                    communication takes place.   Communication as a process consists of several elements.
                                    These elements include:
                                    <ul>
                                        <li>Source</li>
                                        <li>Message (verbal and non -verbal)</li>
                                        <li>Channel</li>
                                        <li>Receiver</li>
                                        <li>Environment</li>
                                        <li>Feedback. </li>

                                    </ul>
                                </p>

                                <p class="text-justify meme">



                                    <kk>The source</kk> encodes the message that is conveyed to the receiver.
                                    The source could be you as the teacher or it could be your students.
                                    To encode the message and convey it as intended to the target audience,
                                    the source must have the following characteristics:
                                    <ul>
                                        <li>Possess the necessary communication skills such as speaking, reading, writing, and listening.</li>
                                        <li>Have a positive attitude towards self (self-confidence), the receiver of the message and towards the subject matter.</li>
                                        <li>
                                            Have good knowledge of the target audience/learners. You need to know the characteristics of the learners such as their age,
                                            composition (either homogenous or heterogeneous group), ability level, specific entry competencies, size (how many), their experience
                                            and interests or their social-cultural background.
                                        </li>
                                        <li>Have good knowledge of the subject matter to be communicated.</li>
                                        <li>Possess skills in handling educational technologies.</li>


                                    </ul>
                                </p>

                                <p class="text-justify meme">



                                    <kk>The receiver</kk> is the person who decodes/interprets the message.
                                    As the person encoding the message, make sure that you reach out
                                    to your target audience since whatever message you encode must be
                                    interpreted by the target audience as intended. For example, you talk
                                    and your audience listens, or you write and they read the content of the
                                    message. Make sure that your message is rooted in their experiences.

                                </p>
                                <p class="text-justify meme">



                                    <kk>The message</kk> refers to the content that you are communicating to the audience.
                                    The message could be facts, information, skills, etc.  You should organize the
                                    message in a way that interests the audience and which they can identify with.
                                    Make the message credible and put it at the level of your audience understanding
                                    so that they can easily interpret it. The message should be receiver oriented.

                                </p>
                                <p class="text-justify meme">

                                    <kk>The channel or the medium of communication</kk> is the means used to encode the message.
                                    The medium could be spoken word, a picture, a chart, a machine, music or a combination
                                    of any of such media.  The channel that you choose to use to convey your message affects
                                    how the message is received and interpreted by the audience or the receiver.
                                    It is said that 'the medium is the message' because the channel that you select
                                    determines how effectively the audience receives the message. Media serve as extensions
                                    of our efforts to communicate with the target audience. Therefore, always select the most
                                    appropriate channel by considering the following factors:
                                    <ul>
                                        <li>What are the characteristics of your target audience?</li>
                                        <li>What is the nature of your message or subject matter?</li>
                                        <li>What is your communication goal/objective or what do you want to achieve?</li>
                                        <li>What channels of communication are available for you to choose from? </li>

                                    </ul>
                                </p>

                                <p class="text-justify meme">




                                    <kk>The environment</kk> refers to the context of communication or where communication takes place.
                                    This could be the classroom, the laboratory, the workshop, or in the open field.
                                    So, make sure that you select media/medium that fits the situation.

                                </p>

                                <p class="text-justify meme">



                                    <kk>Feedback</kk> refers to knowledge of results based on the receiver's
                                    response to the message sent. Whenever you communicate, you need
                                    to confirm whether the message has been received as you intended.
                                    You should not wait to be told by the receiver whether the message
                                    has been received as intended or not. You should look for feedback
                                    and it does not always have to be verbal or spoken.  Feedback could
                                    be in form of words, expressions, gestures, or other actions (verbal and non-verbal).
                                    Feedback could also be positive or negative.  As a teacher, always be aware of the non-verbal
                                    feedback. As it is said, <i>
                                        <kk>'one cannot not communicate'</kk>.  This means that communication is always on going,
                                        it is also irreversible, irretrievable, and interdependent. What I say, or not say, or what I do, affects
                                        how you respond and what you say or do affects me but neither of us determines the behaviour of the other.
                                    </i><br /><br />

                                    Feedback helps you as the source of the message to detect where a problem might have arisen if
                                    the message has not been received as intended. It also helps you to correct any errors in the
                                    transmitted message, or to improve the encoding and transmission process or even to assist your
                                    target audience if they have a problem interpreting the message. Do not always wait to receive
                                    feedback. Look for it from your audience especially by observing the non-verbal communication cues.

                                </p>



                                <p class="text-justify meme">
                                    An additional element in a communication process is noise. Noise is any disturbance that
                                    interferes with or distorts the transmission of the message.  Noise could have a serious
                                    impact on the success or failure of communication. Noise clouds and masks information transmission
                                    to varying degrees and must be recognized as an obstacle to be overcome (Kemp & Dayton, 1985).
                                </p>
                            </div>
                            <br />
                            <h3 id="item-5-2" class="h3-responsive">1.5.2 A simple communication model</h3>
                            <div class="ml-5">
                                <p class="text-center">
                                    <img src="../assets/feedback.png" class="img-fluid" alt="Responsive image"><br />
                                </p>

                                <p class="text-justify meme">
                                    As you might know from your personal experience,
                                    clear and precise communication does not always occur.
                                    There are three types of variables that might interfere
                                    with the communication of ideas namely;
                                    <kk>environmental factors, psychological factors, and personal filters.</kk>

                                </p>

                                <p class="text-justify meme">
                                    <kk>Environmental factors</kk> are those factors within the environment
                                    that cause a learner to lose focus and disengage from active
                                    participation in the communication process. Such factors could
                                    include; loud noise from outside the classroom, excessive movement, poor lighting,
                                    or poor seating arrangement. This could also be caused by poor physical reception.
                                    Clear understanding of the message depends on clear, unhampered and undistorted
                                    reception of the message. For example, written words or drawings must be large enough
                                    for all students in class to see and read from every corner in the classroom.
                                </p>

                                <p class="text-justify meme">
                                    <kk>Psychological factors</kk> are the unique individual psychological differences
                                    that define and affect the reception of the communication message. For example,
                                    an individual's emotional state at the time the message is transmitted.
                                    Inaccurate reading of feedback could also cause this to happen.
                                </p>

                                <p class="text-justify meme">
                                    <kk>Personal filters</kk> also affect message reception. Personal filters include;
                                    personal values, social belief system, religious beliefs, dissimilar background, etc.
                                    If one for example holds a belief that is directly opposed to the content of the message,
                                    then the information might be distorted to be consistent with the belief or rejected because it
                                    is in conflict with the belief.
                                </p>

                            </div>

                            <div class="note note-primary ml-5">
                                <blockquote class="blockquote bq-primary">
                                    <h4 id="item-5-2-1"><i class="fas fa-tools"> Activity 1.3</i></h4>
                                    <br>
                                    Briefly explain why a teacher preparing for a course on educational technology needs to understand learning theories.
                                </blockquote>
                                <p class=" text-justify">
                                    <i>
                                        In your answer you need to establish the connection between learning theories
                                        and the application of educational technology. This requires you to explain what
                                        the various learning theories say about how individuals learn, and what should happen
                                        for the individual to learn. Then, go on to explain the role of educational technology
                                        in fulfilling that role of helping individuals learn. In particular consider the suggestions
                                        made by Kemp, & Dayton, (1985:14) about some important factors that we need to consider in
                                        the design and use of instructional media.
                                    </i>
                                </p>
                            </div>
                        </mdb-row>
                        <br /><br />
                        <mdb-row class=" text-left">

                            <h2 id="item-6" class="h2-responsive"> 1.6 The Changing Role of the Teacher in Classroom Communication</h2>
                            <br />
                            <div class="ml-5">
                                <p class=" text-justify meme">
                                    The role of the teacher has changed since the 20<sup>th</sup> Century as the purpose of
                                    education has expanded rapidly. Goals of education have expanded and exceeded the focus
                                    of the 3Rs (Reading, writing and arithmetic).  In the 21<sup>st</sup> Century, some aspects
                                    of education and teaching will remain the same, while others are changing dramatically.
                                    At the moment, teachers must be equipped with a number of skills such as the use of the
                                    Internet, as instruction can take place via the Internet through what is known as E-learning.

                                <p class=" text-justify meme">
                                    As well, there are many developments in using technology for instructional purposes. In some
                                    schools in Swaziland they have introduced the use of Tablets and printed materials are used
                                    minimally. Mobile devices such as cell-phones are also used extensively in education.
                                    Platforms such as Skype allow teachers and students to communicate through video conferencing,
                                    texting (sms or chatting), audio as well as video.
                                </p>
                                <p class="text-center">
                                    <img src="../assets/technology.png" class="img-fluid" alt="Responsive image">

                                <p class=" text-justify meme">
                                    Let us briefly look at some of the areas where change might or has occurred:
                                    <ul>
                                        <li>

                                            Tremendous changes are/have occurred in the way information is stored and accessed with computers
                                            and digital technologies. Today, the Internet is connecting students to a wide range of resources
                                            for learning, which were previously not available.  Arends (2007:7) argues that the Internet will
                                            become (if it has not already) the primary medium of/for information and will substantially redefine
                                            other forms of print and visual publications. This in turn will cause educators to redefine how they
                                            conduct their lessons and the assignments they give in class.  As educators worldwide expand the use of
                                            technology in teaching and learning, it is becoming evident that technology will end up doing more than
                                            just enhancing instruction. It might prove to be a serious force in changing the nature and form of instruction.
                                        </li>
                                    </ul>
                                </p>
                                <p class=" text-justify meme">
                                    Consider the case of the cell phone, which has completely changed the nature of personal, and business communication.
                                    Like the cellular technology, educational technologies are essentially communication tools and any advances in
                                    educational technologies will fundamentally alter the way in which we communicate educationally.
                                    Another example is in distance education courses like the one you are currently enrolled in. A major
                                    characteristic of distance education programmes is the physical separation between the instructor and
                                    the learners for most of the time. So, such programmes are offered through various combinations of digital
                                    and other distance delivery technologies.
                                </p>
                                <p class=" text-justify meme">
                                    <ul>
                                        <li>
                                            Education in the past was organized in such a manner that the teacher's role was
                                            to transmit information or 'the truth' to students. Teachers were regarded as
                                            experts whose duty was to pass information to the students who were passive listeners.
                                            It is now believed that knowledge is personal and meaning is constructed by the learner
                                            through experience. Therefore, learning is a social and cultural activity in which learners
                                            construct their own meaning by interacting with the information and by being actively involved
                                            in the process of creating meaning. This is what has come to be described as <i>
                                                'constructivist learning'.
                                                Constructivism
                                            </i> is a perspective in teaching and learning in which a learner constructs
                                            meaning from experience and interaction with others where the role of the teacher is to provide
                                            meaningful experiences for students (Arends 2007: Glossary: 3).
                                        </li>
                                    </ul>
                                </p>
                                <p class=" text-justify meme">
                                    According to Heinich et al. (1996:18), the ultimate measure of learning is based on
                                    the ability of the student to use knowledge to facilitate thinking in real life.
                                    From the constructivist perspective, learning is viewed as a process where students
                                    are actively engaged in relevant experiences with opportunities for dialogue so that
                                    meaning can evolve and be constructed.    Learning takes place not in passive classrooms
                                    but in communities characterized by high levels of learner participation and engagement.
                                    This will imply that teachers will have to change the way they plan and organize instruction.
                                    Teachers will no longer be the source of information but will act as facilitators by providing
                                    opportunities and resources for students to interact with and construct their own meanings.
                                    This will imply that teachers will have to make support technologies such as E-mail, Internet,
                                    Web sites and Electronic Conferences available for students to use.
                                </p>

                            </div>
                            <div class="note note-primary ml-5">
                                <blockquote class="blockquote bq-primary">
                                    <h4 id="item-6-1"><i class="fas fa-tools"> Activity 1.4</i></h4>
                                    <br>
                                    In your own words, explain how you expect the role of a teacher in
                                    classroom communication to change in Swaziland as new technologies invade the classrooms.
                                </blockquote>

                                <p class=" text-justify">
                                    In your answer you might need to consider the new technologies that have invaded
                                    the classroom and how their utilization might affect the way teachers have traditionally
                                    communicated with students in class. Explain the demands placed on teachers as they facilitate
                                    students to learn using the emerging technologies.
                                </p>
                            </div>
                        </mdb-row>
                        <br /><br />
                        <mdb-row class=" text-left">



                            <div class="note note-success">
                                <blockquote class="blockquote bq-success">
                                    <h1 id="item-7"><i class="fas fa-folder-open"> Unit Summary</i></h1>
                                    <p class="text-justify">
                                        In this unit we focused
                                        on understanding what
                                        educational technology
                                        was and we also defined some
                                        of the terms that are closely
                                        associated with educational technology.
                                        We went on to discuss why we need to study educational technology.
                                        We discussed the relationship between educational technology,
                                        communication and learning. We need to understand where educational
                                        technology features or fits in, in the whole classroom communication
                                        process since we use educational technology to extend and maximise our
                                        communication efforts
                                    </p>
                                    <p class="text-justify">
                                        We also discussed the communication process in relation to learning
                                        as well as the various theories of learning.  It is important that we
                                        understand how learning takes place so that we can plan for effective teaching
                                        and learning. We concluded the unit by discussing the changing role of a teacher
                                        in classroom communication as newer technologies invade the classroom.  With this introduction,
                                        you now need to synthesize the knowledge gained into your own personal view of the teaching and
                                        learning process so that you can determine how educational technology fits into your teaching and learning.
                                    </p>
                                </blockquote>
                            </div>
                            <br />
                            <div class="note note-warning">
                                <blockquote class="blockquote bq-warning">
                                    <h1 id="item-8"><i class="fas fa-medal"> Assignment</i></h1>

                                    <p class="text-justify">
                                        Conduct an Internet Search and report on the uses of Social Media
                                        in the classroom. Your work should be posted on the E-learning website.
                                    </p>
                                </blockquote>
                            </div>
                            <br />

                            <div class="note note-secondary">
                                <blockquote class="blockquote bq-secondary">
                                    <h1 id="item-9"><i class="fas fa-"> References</i></h1>

                                    <p class="text-justify">
                                        Arends, R.I (2007).<i> Learning to Teach. McGraw Hill International Edition</i>
                                        7th Edition.   New York
                                    </p>
                                    <p class="text-justify">
                                        Heinich, R.; Molenda, M.; Rusell, J.D.; & Smaldino, S.E (1996).
                                        <i>Instructional Media and Technologies for Learning. </i>
                                        5<sup>th</sup> Edition. Prentice Hall, Inc. New Jersey.
                                    </p>
                                    <p class="text-justify">
                                        Kemp, J.E.; Dayton, D.K. (1985).<i> Planning and Producing Instructional Media.</i>
                                        5th Edition.  Harper & Row, Publishers. New York.
                                    </p>
                                    <p class="text-justify">
                                        Nacino-Brown, R.; Oke, F.E.; Brown, D.P. (1982).<i> Teaching and Learning with Technology.</i>
                                        2<sup>nd</sup> Edition. Allyn and Bacon. New York.
                                    </p>
                                    <p class="text-justify">
                                        Nacino-Brown, R.; Oke, F.E.; Brown, D.P. (1982)
                                        <i>). Curriculum and Instruction: An Introduction to Teaching Methods of Teaching. </i>
                                        McMillan Publishers. London.
                                    </p>
                                    <p class="text-justify">
                                        Roblyer, M.D. (2004). 2004 Update:<i>Integrating Educational Technology into Teaching.</i>
                                        3<sup>rd</sup> Edition. Upper Saddle River, New Jersey, Columbus, Ohio: Pearson Merrill Prentice Hall.
                                    </p>
                                    <p class="text-justify">
                                        Wikipedia, the free encyclopedia. Accessed from <a href="http://en.wikipedia.org/wiki/Educational_technology"> http://en.wikipedia.org/wiki/Educational_technology</a> on 22nd August 2008.
                                    </p>
                                </blockquote>
                            </div>
                        </mdb-row>
                    </mdb-container>
                </div>
            </div>

        </div>
    </div>
</div>
"},null]}