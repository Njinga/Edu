{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit3.vue?vue&type=template&id=34d4ede5&scoped=true&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit3.vue","mtime":1593893035799},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:
<div class="border border-light p-3 mb-5 rounded">
    <div class="row">
        <div class="col-sm-4 col-lg-3" data-spy="scroll">
            <nav id="navbar-example3" class="navbar navbar-light sticky-top flex-column mt-4">
                <a class="navbar-brand" href="#">Unit 3</a>
                <nav class="nav nav-pills flex-column">
                    <a class="nav-link" href="#item-1">3.0 Introduction </a>
                    <nav class="nav nav-pills flex-column">
                        <a class="nav-link ml-3 my-1" href="#item-1-1">Outcomes</a>
                        <a class="nav-link ml-3 my-1" href="#item-1-2">Terminology</a>
                    </nav>
                    <a class="nav-link" href="#item-2">3.1 Criteria for Selecting Media during instruction </a>
                    <nav class="nav nav-pills flex-column">
                        <a class="nav-link ml-3 my-1" href="#item-2-1">Activity 3.1</a>
                        <a class="nav-link ml-3 my-1" href="#item-2-2">3.1.1 Criteria for media selection</a>
                        <a class="nav-link ml-3 my-1" href="#item-2-3">3.1.2 Essential media characteristics</a>
                    </nav>
                    <a class="nav-link" href="#item-3">3.2 Application of the Systems Approach to Media Selection and Use</a>
                    <nav class="nav nav-pills flex-column">
                        <a class="nav-link ml-3 my-1" href="#item-3-1">
                            3.2.1 Application of the systems
                            approach to teaching and learning
                        </a>
                    </nav>
                    <a class="nav-link" href="#item-4">3.3 The Media Selection Process</a>
                    <a class="nav-link" href="#item-5">3.4 Media Selection Models</a>
                    <nav class="nav nav-pills flex-column">
                        <a class="nav-link ml-3 my-1" href="#item-5-1">3.4.1 The basic model</a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ml-5 my-1" href="#item-5-1-1">3.4.1.1 Selection of media</a>
                            <a class="nav-link ml-5 my-1" href="#item-5-0">Activity 3.2</a>
                        </nav>
                        <a class="nav-link ml-3 my-1" href="#item-5-2">
                            3.4.2 Steps to follow in systematic
                            planning for the use of media (ASSURE Model)
                        </a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ml-5 my-1" href="#item-5-2-1">3.4.2.1 Analyse the learners</a>
                            <a class="nav-link ml-5 my-1" href="#item-5-2-2">3.4.2.2 State objectives</a>
                            <a class="nav-link ml-5 my-1" href="#item-5-2-3">3.4.2.3 Select methods, media, and materials</a>
                            <a class="nav-link ml-5 my-1" href="#item-5-2-4">3.4.2.4 Utilize media and materials</a>
                            <a class="nav-link ml-5 my-1" href="#item-5-2-5">3.4.2.5 Require learner participation</a>
                            <a class="nav-link ml-5 my-1" href="#item-5-2-6">3.4.2.6 Evaluate and revise</a>
                        </nav>

                    </nav>
                    <a class="nav-link" href="#item-6">3.5 Locating Relevant Instructional Materials</a>
                    <a class="nav-link" href="#item-7">Unit summary</a>
                    <a class="nav-link" href="#item-8">Assignment</a>
                    <a class="nav-link" href="#item-9">References</a>

                </nav>
            </nav>
        </div>

        <div class="col-sm-8 col-lg-9">
            <div data-spy="scroll" class="scrollspy-example z-depth-1 mt-4 shadow-lg p-3 mb-5 rounded" data-target="#navbar-example3"
                 data-offset="0">
                <mdb-container fluid>
                    <mdb-row>
                <h1 class="h1-responsive text-left">Unit 3</h1>
                <h1 class="h1-responsive text-left">Selection of Media for Teaching and Learning</h1>
                <h2 id="item-1" class="h2-responsive text-left">3.0 Introduction </h2>
                <div class="ml-5">
                <p class="text-justify meme">
                    So far we have discussed the range of media available to us as
                    teachers that we could use during instruction.  However, it is
                    not every media that we choose to use that would help the students
                    to learn. We need to remember that our main aim during the lesson is
                    to help students learn. You must be aware by now, that in order for
                    learning to take place, instruction may be necessary. <i>
                        Instruction refers to the
                        arrangement of information and environment to facilitate learning
                    </i>.
                    By environment, this does not just mean where instruction takes place but
                    also the methods, media and equipment that are used or are needed to guide
                    the learner's study.
                </p>
                <p class="text-justify meme">
                    However, information and environment will change
                    depending on the instructional goal. Therefore, as
                    the expected learning outcomes also change, so must
                    the teacher change the way he/she arranges the instructional
                    environment.  For instruction to take place, instructional
                    media are used since they form part of the instructional
                    environment.
                </p>
                <p class="text-justify">

                </p>
                <p class="text-justify meme">
                    The instructional/learning process involves the selection,
                    arrangement, and delivery of information in an appropriate
                    environment and the way the learner interacts with that
                    information. Usually the arrangement of information and the
                    environment is normally the responsibility of the instructor
                    and the designers of media.  As a teacher, you need to select,
                    arrange, and deliver the information in an appropriate environment
                    so that learners can interact with it and convert it into knowledge.<br />
                    As a teacher, you will have to decide which instructional medium or
                    media to use. To make an informed choice of medium/media from the
                    range of media that we have discussed, you need to know the advantages
                    and limitations of each medium and you need to have a selection criterion
                    that will inform your choice of media.<br />
                    This unit is therefore meant to assist you
                    in making informed decisions on your choice
                    of media during instruction.  To assist you in that regard, we will discuss
                    the criteria for media selection as well as the media selection process.
                    We will also look at some models that are used in making decisions about
                    media choices.

                </p>

                <br />
                <div class="note note-info text-justify">
                    <blockquote class="blockquote bq-info">
                        <h5 id="item-1-1"><i class="fas fa-paper-plane"> Unit Outcomes</i></h5>
                        <p class="text-justify">
                            Upon completion of this unit you will be able to:
                            <ul style="list-style-type:square;">
                                <li>identify the criteria that should be used to select media during instruction</li>
                                <li>describe the overview of media selection process</li>
                                <li>present graphically the media selection model.</li>
                            </ul>
                        </p>
                    </blockquote>
                </div>

                <br />
                <div class="note note-success text-justify">
                    <blockquote class="blockquote bq-success">
                        <h5 id="item-1-2"><i class="fas fa-check-square"> Terminology</i></h5>
                        <p class="text-justify">
                            <kk>Selection of Media:</kk>	The process of identifying and selecting the appropriate media to be used in achieving the learning objectives.<br />
                            <br /> <kk>Media Characteristics:</kk>	Qualities of media that we need to exploit when selecting media.<br />
                            <br /><kk>Media Selection Models:</kk>	Selection models consist of basic elements that need to be taken into consideration when choosing media.<br />
                            <br /><kk>Systems Approach:</kk>	A way or system of doing things systematically (following a logical and flexible approach).<br />
                            <br /><kk>ASSURE Model:</kk>	A procedural guide for planning and conducting instruction that incorporates media<br />
                        </p>
                    </blockquote>
                </div>
                </div>
                    </mdb-row>
                    <br/><br/>
                    <mdb-row class="text-justify">
                        <h2 id="item-2">3.1 Criteria for Selecting Media during instruction </h2>
                        <div class="ml-5">
                        <p class="text-justify meme">
                            For teachers to adapt their instruction to changing
                            times and environments, they need to have a thorough
                            working knowledge of the many kinds of educational
                            technologies available that might assist in teaching
                            and enhance learning. Educational technologies are the
                            tools that a teacher might need to use in order to
                            create an effective instructional event.
                        </p>
                        <p class="text-justify meme">
                            You need to note that it is not any media that you use that can
                            perform the required instructional role. Research indicates that
                            most media can perform most instructional functions to a certain
                            extent (Aronson, 1977; Briggs, 1968; Briggs & wager, 1981; Clark & Salomon, 1986).
                            According to Gagne, Briggs & Wager (1988), most writers on media selection models
                            agree that there is no one medium that is universally superior to all types of
                            desired outcomes and for all learners.  However, some media are better at
                            doing certain things than others and no single medium can be best for all
                            instructional situations. We therefore need to use a variety of media
                            during instruction. So, the million dollar question to ask then is,
                            <i>'what medium or media shall I use in my lesson?'</i>
                        </p>
                        <p class="text-justify meme">
                            As you begin your instruction, it is important to select a medium
                            that will enhance your lesson by ensuring optimal use of the media.
                            To select the most appropriate medium/media for your lesson, you will
                            need to ask yourself several questions. The following questions can guide
                            you in selecting the most appropriate media during instruction:
                        </p>
                        <p class="text-justify meme">
                            <ul>
                                <li>When do I use media during the lesson?</li>
                                <li>What will the media do for my students?</li>
                                <li>How will I select the right media?</li>
                                <li>How will I prepare for the use of media?</li>
                            </ul>

                            Below we will try to answer each one of the questions above.
                        </p>
                        <p class="text-justify meme">
                            <kk><i>When do I use media during the lesson?</i></kk><br />
                            You will need to use media if it will assist you to achieve your
                            lesson objective(s). Remember that media can be used at the introduction
                            to a lesson, during the lesson, or when concluding the lesson.


                        </p>
                        <p class="text-justify meme">
                            <kk><i>What will the media do for my students?</i></kk><br />
                            Whenever you select to use media during the lesson, remember
                            that the media has a specific role to play in that lesson.
                            Your role is to help students learn by utilizing the media
                            that you will have selected.  Active learner participation
                            enhances learning and the most effective learning situations
                            are those that require learners to perform some activities
                            building towards the lesson objectives.
                            According to Romiszowski (1988:62), media
                            selection is based on two classes of media
                            characteristics. These are the essential media characteristics
                            that control the clarity of the message, and optional media characteristics
                            that improve the quality of presentation.  Each type of media has a set of
                            advantages <c>(e.g. motion, realism, sound)</c> <i>and a set of educational limitations</i>
                            <c>(e.g. room size, group size).</c>

                        </p>
                        <p class="text-justify meme">
                            <kk><i>How will I select the right media?</i></kk><br />
                            In selecting the right media, two main steps have to be followed.
                            The first step is to determine your instructional goal(s) and secondly,
                            you must select the most appropriate media to meet the instructional goal(s).


                        </p>
                        <p class="text-justify meme">
                            To determine the instructional goal(s), you need to consider:
                            <ul>
                                <li>
                                    The nature of the subject being taught;
                                </li>
                                <li>
                                    The general and specific instructional objectives to be achieved.
                                    For example, what information, skills, attitudes, or behaviour
                                    should the students have acquired at the end of the lesson as a
                                    result of instruction on that particular topic?
                                </li>
                                <li>
                                    The nature of subject matter/content to be learned
                                </li>
                            </ul>
                        </p>
                        <p class="text-justify meme">
                            To select the media that meets your instructional goal(s),
                            you will need to answer the following questions:
                            <ul>
                                <li>
                                    What are the characteristics of my learners? (E.g. the number of students,
                                    their preferred learning styles, learner variable such as reader or non-reader,
                                    entry competencies, etc.).
                                </li>
                                <li>
                                    Will the media be used for large group, small group or individual instruction/study?
                                </li>
                                <li>
                                    Will the media be visual, oral/audio, audio-visual, a combination, projected,
                                    or non-projected? (What media matches your instructional goal and objectives?).
                                </li>
                                <li>
                                    What specific purpose should the media achieve? (Arouse motivation
                                    or maintain interest in the lesson).
                                </li>
                                <li>
                                    What media options are available to choose from?
                                </li>
                                <li>
                                    Which medium or combination of media will be most economical yet effective?
                                </li>
                                <li>
                                    Will the media selected provide for learner participation?
                                </li>
                            </ul>

                        </p>
                        <p class="text-justify meme">
                            Davis (1981:207) added his voice to the
                            media selection criteria by arguing that selection of
                            audio-visual aids depend largely on:
                            <ul>
                                <li>
                                    Objectives to be achieved;
                                </li>
                                <li>
                                    Knowledge to be imparted;
                                </li>
                                <li>
                                    Level of the learner;
                                </li>
                                <li>
                                    Size of class or group.
                                </li>
                            </ul>
                        </p>


                        <br />
                        <div class="note note-primary meme">
                            <blockquote class="blockquote bq-primary">
                                <h3 id="item-2-1"><i class="fas fa-tools"> Activity 3.1</i></h3>
                                <p class="text-justify">
                                    Based on the lesson plan you created in
                                    the course EDC 100, outline and discuss the criteria you used to select media.
                                </p>
                            </blockquote>
                        </div>
                        <br />
                        <p class="text-justify meme">
                            <kk>How do I prepare for the use of media?</kk><br />
                            Once you have selected the most appropriate media, preparations
                            are needed to ensure optimum and effective use of the media. You achieve this by
                            preparing the students, preparing the presentation and preparing the follow-up
                            and evaluation activities. We will give more details on this part when we are
                            talking about systematic planning for the use of media. Let us now discuss the
                            media selection criteria.
                         
                        </p>
                        </div>
                        <br/>
                        <h3 id="item-2-2">3.1.1 Criteria for media selection </h3>
                        <div class="ml-5">
                        <p class="text-justify meme">
                            Whenever you select media, it is important to consider how the
                            different media present the required stimuli for learning.
                            For example, do your students need to observe in detail the
                            phenomena being studied?  Is sound necessary for understanding?
                            Are there certain inside details that the learners need to
                            observe in order to understand how something functions or operates?
                        </p>
                        <p class="text-justify meme">
                            Below are the major factors that you will need
                            to consider whenever you select media for instruction:<br /><br />

                            <kk>Instructional Objectives</kk><br />
                            Your awareness of the expected learning outcomes influences the
                            choice of media. Before selecting any instructional media, always
                            ask your-self this question; <i>
                                'What type(s) of media can help me to
                                produce the behaviour required from the learner at the end of the
                                instructional process?'
                            </i>

                        </p>
                        <p class="text-justify meme">
                            <kk>Nature of Content</kk><br />
                            The media that you select to use should suit the content to be delivered.
                            If for example you are teaching a lesson in Geography that focuses on World
                            Climates, you will need to use a world map to help the learners locate the
                            different regions of the world that are influenced by the different climates.
                            If you are teaching a lesson in Biology on blood circulation, you might need
                            to use a model so that students can observe the interior of the model to
                            understand how blood flows to and from the heart.

                        </p>
                        <p class="text-justify meme">
                            <kk>Instructional Strategies being used</kk><br />
                            If in your lesson you would like the students to work together and share experiences,
                            then you cannot use a one directional medium such as audio media. Alternatively,
                            if students have to learn a certain skill and demonstration is necessary,
                            then you will need to use real media or simulations.

                        </p>
                        <p class="text-justify meme">
                            <kk>Types of learning tasks facing the learners</kk><br />
                            The learning tasks facing the learners influence the choice
                            of media.   For example, what type of skill do you want the
                            learners to acquire? Is it observational skills? In such a case,
                            you will need to use descriptive visuals that answer the question;
                            <i>'What do you see?'</i>

                        </p>
                        <p class="text-justify meme">
                            <kk>Learner Characteristics</kk><br />
                            As you select media, you need to have a good knowledge of
                            the target audience or students. You need to know your students in terms of:
                            <ul>
                                <li>
                                    <i>How many are they?</i> You cannot hold a single photograph
                                    in front of a class with forty students and expect all
                                    of them to view it clearly from their seats.
                                </li>
                                <li>
                                    What <i>are their entry competencies/prior knowledge/assumed knowledge?</i>
                                </li>
                                <li>
                                    <i> What are the students' preferred learning styles?</i> Some learners
                                    depend more on language or spoken word to learn, others depend on
                                    visualization, others on hands-on experiences, while others depend
                                    on logical reasoning and experimentation.
                                </li>
                                <li>
                                    <i>What is their background experience?</i> If learners are entering
                                    a new conceptual area for the first time or they are meeting the content
                                    for the very first time, they will require direct and concrete experiences.
                                </li>
                                <li>
                                    Learner's social-cultural background- It is important to consider the learner's
                                    cultural background when selecting media because some media are interpreted
                                    based on the audience cultural experiences.
                                </li>
                                <li>
                                    Unique learner characteristics- Learners in class might have some very unique
                                    characteristics.  For example, learning disability. It would be unrealistic
                                    to use printed materials with a group of slow learners since this would
                                    create more problems for them.
                                </li>
                                <li>
                                    <i>How old are the learners?</i> Age influences choice of media since it is
                                    related to their experience.
                                </li>
                            </ul>


                        </p>
                        </div>
                        <br/>
                        <h3 id="item-2-3">3.1.2 Essential media characteristics</h3>
                        <div class="ml-5">
                        <p class="text-justify meme">
                            Media have different properties. Some media allow us
                            to transport events through time such as photographs,
                            some media create motion, and some allow interior
                            details to be observed, while other media can be
                            transported through space and reproduced anywhere,
                            such as radio and Television broadcasts allowing
                            information from a central place to be heard.
                            These are the qualities of media that we need
                            to exploit when selecting media. Each type of
                            media has certain unique advantages, which makes
                            it more suitable in meeting certain instructional
                            goals compared to others.
                        </p>

                        <p class="text-justify meme">
                            <kk>Practical Constraints</kk><br />
                            You can only use media if it is available when needed.
                            There are certain media that you might want to use but
                            you might not, either because they are not available
                            when you need them, or it is too expensive to purchase.
                            It could also be because you lack the technical capability
                            to use the media.

                        </p>
                        <p class="text-justify meme">
                            <kk>Teachers' attitudes towards media</kk><br />
                            If the teacher has phobia of a certain media, he/she is
                            unlikely to use it even when it would be the best
                            alternative for the given instructional situation.
                            Usually, attitude is linked to teachers' lack of
                            skills needed to use that particular media.
                            It is common to find that teachers will occasionally
                            choose media when it fits their teaching habits,
                            skills and preferences. For instance, teachers
                            born before the computer age might not want to
                            even learn how to use a computer because they
                            associate it with generations that came after
                            them. They will stick to using print media
                            even where the computer would do a sterling job.

                        </p>
                        <p class="text-justify meme">
                            <kk>Appropriateness of the Media</kk><br />

                            As you select the media, also ask yourself the following question:
                            <ul>
                                <li>
                                    Will the media selected accomplish the defined task?
                                </li>
                                <li>
                                    Is the media of the correct level of understanding for the class?
                                </li>
                                <li>
                                    Will the media help you to achieve the expected learning outcomes?
                                </li>

                            </ul>
                            The above criteria should guide you as you select your
                            instructional media for any instructional situation.
                        </p>
                        </div>
                    </mdb-row>
                    <br/><br/>
                         <mdb-row class="text-justify">
                             <h2 id="item-3" class="h2-responsive">3.2 Application of the Systems Approach to Media Selection and Use</h2>
                             <div class="ml-5">
                             <p class="text-justify meme">
                                 The concept of a <i>'system'</i> refers to a dynamic and complex whole that
                                 interacts as a structured functional unit.  A system can also be defined as
                                 "a regularly interacting or interdependent group of items forming a unified
                                 whole". This can further be defined as "organized or established procedure".
                             </p>
                             <p class="text-justify meme">
                                 As an example, a system could be a community situated within an environment.
                                 Therefore, energy, material and information flow among different elements
                                 that compose the system via semi-permeable membranes or boundaries.
                                 Systems are often composed of entities or independent complete wholes
                                 which can exist on their own but at the same time form part of the
                                 complete whole. Hence the phrase, <i>
                                     the whole is greater than the sum
                                     total of all its parts put together.
                                 </i>
                             </p>
                             </div>
                             <br/>
                             <h3 id="item-3-1" class="h3-responsive">3.2.1 Application of the systems approach to teaching and learning</h3>
                             <div class="ml-5">
                             <p class="text-justify meme">
                                 The systems approach is used to tackle a wide variety of
                                 subjects in fields such as education, management, information
                                 science, health, computing, engineering, and manufacturing.
                                 In this respect, we apply the systems approach whenever we
                                 are dealing with problems relating to education.<br />
                                 The systems approach has four key components namely:
                                 <ul>
                                     <li>
                                         Analysis - analysis of needs (i.e. of students' needs,
                                         of system resources like space, time, materials and students'
                                         abilities). These analyses leads to a statement of the problem
                                         in terms of the overall objectives.
                                     </li>
                                     <li>
                                         Design - involves identification of the required solution
                                         and strategies for addressing the problem including the
                                         formulation of objectives.
                                     </li>
                                     <li>
                                         Development - involves the planning of available
                                         resources, preparation of materials and selection
                                         of presentation media.
                                     </li>
                                     <li>
                                         Implementation/Evaluation-
                                         involves trying out the solution either in a small or
                                         large scale and evaluating the effectiveness
                                         of the solution for improvement.
                                     </li>
                                 </ul>

                             </p>
                             <div class="note note-warning text-justify meme">
                                 Please note that the systems approach is not necessarily
                                 a step-by-step process. Analysis, synthesis, and evaluation
                                 are recurring stages throughout the process and not necessarily
                                 in the traditional format of beginning, middle, and end.
                             </div>
                             <br />
                             <p class="text-justify meme">
                                 We are sure you have noted that in a teaching-learning situation
                                 we have elements like learners, teachers, teaching-learning materials,
                                 classrooms which we can describe as sub-systems. We also have the whole
                                 school which is a system but made up of several sub-systems like classes,
                                 teachers, students, materials, educational objectives, etc.
                             </p>
                             <p class="text-justify meme">
                                 You might have looked at a lesson as a system and noted that when you
                                 plan for teaching, you have an instructional goal to achieve and the
                                 way you organize your instruction depends on the final outcomes that
                                 you intend to achieve from your lesson which we refer to as <i>'objectives'</i>.
                                 In that lesson, you have elements like yourself (a teacher), the students,
                                 the teaching-learning materials, etc.  Before you present the lesson,
                                 you begin by planning the lesson since the elements are arranged in
                                 a hierarchy. Then you identify the teaching and learning activities
                                 and how the interactions will take place.
                             </p>
                             <p class="text-justify meme">
                                 As you plan your instruction, you make use of
                                 inputs from the environment such as text books
                                 and other teaching-learning resources.
                                 As you present the lesson, you receive
                                 feedback from the students or from the
                                 other wider school environment and you
                                 use that feedback to adjust your teaching
                                 since you need to respond to changes
                                 happening around you.
                             </p>
                             <p class="text-justify meme">
                                 As you deliver the lesson, you notice that there are
                                 alternative ways of attaining the lesson objectives
                                 without following the methods that you followed on
                                 this particular lesson.<br /><br />

                                 Once you conclude that using instructional media will
                                 help you achieve your explicit and/or implicit goals,
                                 it is useful to apply the basic steps in the
                                 instructional development process to choose and
                                 apply the appropriate media. These basic steps include:
                                 <ul>
                                     <li>
                                         Reviewing instructional goals, objectives, audience and instructional strategy
                                     </li>
                                     <li>
                                         Determining the best medium for your lesson components
                                     </li>
                                     <li>
                                         Searching for and review existing media/materials
                                     </li>
                                     <li>
                                         Adapting existing media/materials if necessary
                                     </li>
                                     <li>
                                         If new media/materials need to be developed:
                                         <ul style="list-style-type:circle;">
                                             <li>
                                                 Determining format, script, visuals, etc.
                                             </li>
                                             <li>
                                                 Drafting materials and media
                                             </li>
                                             <li>
                                                 Checking for clarity and flow of ideas
                                             </li>
                                         </ul>
                                     </li>
                                     <li>
                                         Conducting formative evaluation
                                     </li>
                                     <li>
                                         Implementing/applying
                                     </li>
                                     <li>
                                         Evaluating/revising (St. Cloud State University, 1997).
                                     </li>


                                 </ul>
                                 Critically analyse the steps presented above. <i>What do you notice?</i>
                             </p>
                             <p class="text-justify meme">
                                 Did you note that the steps are procedural? They are
                                 arranged in a step-by-step manner. In the same way, whenever
                                 you are planning a lesson that incorporates the use of instructional
                                 media, you have to be systematic and procedural. Follow the steps listed above.
                             </p>
                             <p class="text-justify meme">
                                 <kk>Practicality:</kk> Gagne, Briggs, and Wager (1992) suggest that instructors
                                 address the following series of practical questions before presenting
                                 any instructional media:
                             </p>
                             <p class="text-justify font-italic meme">
                                 <ul>
                                     <li>
                                         What size of group must be accommodated in one room or on a single occasion?
                                     </li>
                                     <li>
                                         What is the range of viewing and hearing distance for the use of media?
                                     </li>
                                     <li>
                                         How easily can the media be 'interrupted'
                                         for pupils responding or other activity and
                                         for providing feedback to the learners?
                                     </li>
                                     <li>
                                         Is the presentation "adaptive" to the learners' responses
                                     </li>
                                     <li>
                                         Does the desired instructional stimulus require motion,
                                         colour, still pictures, spoken or written words?
                                     </li>
                                     <li>
                                         Is the sequence fixed or flexible in the medium? Is the instruction repeatable in every detail?
                                     </li>
                                     <li>
                                         Which media can provide best for incorporation of learning appropriate for the objective?
                                     </li>
                                     <li>
                                         Which media provide more of the desired instructional events?
                                     </li>
                                     <li>
                                         Do the media under consideration vary in 'effective impact'  for the learners?
                                     </li>
                                     <li>
                                         Are the necessary hardware and software items obtainable, accessible, and storable?
                                     </li>
                                     <li>
                                         Does using the media cause any disruption? If so, how much?
                                     </li>
                                     <li>
                                         Is a backup easily available in case of equipment failure, power failure, etc.?
                                     </li>
                                     <li>
                                         Will the instructor require additional training
                                     </li>
                                     <li>
                                         Is a budget provided for spare parts, repairs, and replacement of items that become damaged?
                                     </li>
                                     <li>
                                         How does cost compare with probable effectiveness?
                                     </li>
                                 </ul>
                             </p>
                             <p class="text-justify meme">
                                 <kk>Appropriateness:</kk>  Gagne, Briggs, and Wager (1992) recommend
                                 that instructors apply the following exclusion and inclusion
                                 criteria in selecting media for the various common learning outcomes.
                             </p>
                             <div class="table-responsive meme">
                                 <table style="width:80%;">
                                     <thead>
                                         <tr>
                                             <th scope="col"><kk>Learning Outcomes</kk></th>
                                             <th scope="col"><kk>Exclusion</kk></th>
                                             <th scope="col"><kk>Selections</kk></th>
                                         </tr>
                                     </thead>
                                     <tbody>
                                         <tr>
                                             <td>
                                                 <kk>Intellectual Skills</kk>
                                             </td>
                                             <td>
                                                 Exclude media having no interactive features
                                             </td>
                                             <td>
                                                 Select media providing feedback to learner responses
                                             </td>
                                         </tr>
                                         <tr>
                                             <td>
                                                 <kk>Cognitive Strategies </kk>
                                             </td>
                                             <td>
                                                 Exclude media having no interactive features
                                             </td>
                                             <td>
                                                 Select media providing feedback to learner responses
                                             </td>
                                         </tr>
                                         <tr>
                                             <td>
                                                 <kk>Verbal Information</kk>
                                             </td>
                                             <td>
                                                 Exclude only real equipment or simulator with no verbal accompaniments
                                             </td>
                                             <td>
                                                 Select media able to present verbal messages and elaboration
                                             </td>

                                         </tr>
                                         <tr>
                                             <td>
                                                 <kk>Attitudes</kk>
                                             </td>
                                             <td>
                                                 Exclude only real equipment or simulator with no verbal accompaniments
                                             </td>
                                             <td>
                                                 Select media able to present realistic picture of human model and the model's message
                                             </td>
                                         </tr>
                                         <tr>
                                             <td>
                                                 <kk>Motor Skills </kk>
                                             </td>
                                             <td>
                                                 Exclude media having no provision for learner responses and feedback
                                             </td>
                                             <td>
                                                 Select media making possible direct practice of skill, with informative feedback
                                             </td>
                                         </tr>
                                     </tbody>
                                 </table>
                             </div>
                                 <br/>
                             <p class="text-justify meme">
                                 Regarding media richness and instructional appropriateness,
                                 the following table  specifies the various characteristics
                                 of common media that should be considered in the selection
                                 process (Newby, Stepich, Lehman, & Russell, 2000).
                             </p>
                             </div>
                         </mdb-row>
                    <br/><br/>
                         <mdb-row class="text-justify">
                             <h2 id="item-4" class="h2-responsive">3.3 The Media Selection Process</h2>
                             <div class="ml-5">
                             <p class="textjustify meme">
                                 <ul>
                                     <li>
                                         Since media selection should be systematic, to select the most
                                         appropriate media for any lesson you need to follow a certain
                                         process, namely: Choosing a media format;
                                     </li>
                                     <li>
                                         Obtaining specific media and materials;
                                     </li>
                                 </ul>
                             </p>
                             <p class="textjustify meme">
                                 <kk>A media format</kk> refers to the physical form in which
                                 a given message is incorporated and displayed. Media formats
                                 include for example, flip charts, audio, video, or computer
                                 multimedia. Each media format has different strengths and
                                 limitations in terms of types of messages that can be
                                 recorded and displayed.  To choose the media format,
                                 consider the criteria that we have discussed above.
                                 This will guide you in deciding on the best media format to use.
                             </p>
                             <p class="textjustify meme">
                                 <kk>Obtaining specific materials</kk> for the identified media format
                                 will involve one of three alternatives:
                                 <ol>
                                     <li>
                                         selecting available materials
                                     </li>
                                     <li>
                                         modifying existing materials
                                     </li>
                                     <li>
                                         designing new materials.
                                     </li>
                                 </ol>
                                 If materials that will allow your students to meet your instructional
                                 objectives are available, they should be used to save time and money.
                                 The simplest, most cost-effective way to incorporate instructional materials
                                 into a lesson is to use existing materials.
                             </p>
                             <p class="textjustify meme">
                                 Locating and selecting instructional materials involve the following steps:
                                 <ul>
                                     <li>
                                         Determinig needs.  <em>What are you trying to accomplish? What needs might specific instructional materials address?</em>
                                     </li>
                                     <li>
                                         Check a variety of sources. There are a number of sources for instructional materials.
                                         You need to know the potential sources of media by surveying the possible sources.
                                     </li>
                                     <li>
                                         Obtaining and previewing the materials.
                                         Always preview all the materials before using
                                         them to be certain that they meet your needs and your students' needs.
                                     </li>
                                     <li>
                                         Trying out the materials with your students. <em>
                                             How well do they like the materials?
                                             How effectively do the materials help the students learn?
                                         </em>
                                     </li>
                                     <li>
                                         Comparing with any other competing materials. If you have located more than one set
                                         of materials, repeat the preview to compare their effectiveness and appeal to students.
                                     </li>
                                     <li>
                                         Making your selection. Use the information you have gathered to select
                                         the instructional materials that you think will work best in your situation.
                                     </li>
                                 </ul>

                             </p>
                             <p class="textjustify meme">
                                 Whenever you decide to use readily available media materials, the following
                                 questions will guide your selection decision:
                                 <ul>
                                     <li>
                                         Does the medium match the curriculum?
                                     </li>
                                     <li>
                                         Is the media accurate and current?
                                     </li>
                                     <li>
                                         Does the medium contain clear and concise language?
                                     </li>
                                     <li>
                                         Will the media arouse motivation and maintain interest?
                                     </li>
                                     <li>
                                         Does the media provide for learner participation?
                                     </li>
                                     <li>
                                         Is the media of good technical quality?
                                     </li>
                                 </ul>

                             </p>
                             <p class="textjustify meme">
                                 Besides the above criteria, other selection criteria will vary with
                                 different media formats. For example, video raises the issue of the
                                 pace of presentation.
                             </p>
                             <p class="textjustify meme">
                                 If you cannot locate entirely suitable materials and media off the shelf,
                                 you might be able to modify what is available. For example, you might
                                 have a video clip that shows a needed visual sequence but the audio
                                 portion of the video is inappropriate because it is too advanced for
                                 the students. In such a case, you might show the video with the sound
                                 turned off and then provide a narration yourself. Similarly,
                                 you could use a simulation game format but then change the
                                 rules of play either to increase or decrease the level of sophistication.
                             </p>
                             <p class="textjustify font-italic meme">
                                 A word of caution when modifying commercially produced materials;
                                 be sure your handling and use of such materials does not violate
                                 copyright laws and restrictions. With some commercially produced
                                 audio or video materials you may need to seek the permission of
                                 the copyright holder before you use them.
                             </p>
                             <p class="textjustify meme">
                                 In case you fail to find any readily available media or media
                                 that could be modified to meet your instructional needs,
                                 you might have to design new media. In the event that you
                                 have to design new media, you need to consider certain basic
                                 elements when designing new materials. These include:
                             </p>
                             <p class="textjustify meme">
                                 <ul>
                                     <li>
                                         Instructional objectives-<em> what do you want the students to learn?</em>
                                     </li>
                                     <li>
                                         Audience- <em>
                                             What are the characteristics of your learners? Do they have
                                             the prerequisite knowledge and skills to use or learn from the materials?
                                         </em>
                                     </li>
                                     <li>
                                         Cost- <em>Do you have sufficient funds to meet the costs of the materials?</em>
                                     </li>
                                     <li>
                                         Technical expertise- <em>
                                             do you have the necessary technical expertise to design
                                             and produce the kind of materials you wish to use?
                                         </em>
                                     </li>
                                     <li>
                                         Equipment- <em>
                                             do you have the necessary equipment to produce or
                                             use the materials that you intend to design?
                                         </em>
                                     </li>
                                     <li>
                                         Facilities- <em>
                                             if your design calls for use of special facilities for
                                             preparation or use of the materials, are such facilities available?
                                         </em>
                                     </li>
                                     <li>
                                         Time- <em>
                                             can you afford to spend whatever time necessary to design and
                                             produce the kind of materials you have in mind?
                                         </em>
                                     </li>
                                 </ul>
                             </p>
                             </div>
                         </mdb-row>
                    <br/><br/>
                         <mdb-row class="text-justify">
                             <h2 id="item-5" class="h2-responsive">3.4 Media Selection Models</h2>
                             
                             <p class=" text-justify meme ml-5">
                                 To assist in media selection decisions, media
                                 selection models are used. Models consist of basic
                                 elements that need to be taken into consideration
                                 when choosing media. Several media selection models
                                 have been used. Among them include what is called <kk>the basic model</kk>.
                             </p>
                             <br/>
                             <h3 id="item-5-1" class="h3-responsive">3.4.1 The basic model </h3>
                             <div class="ml-5">
                             <p class=" text-justify meme">
                                 This model is based on the application of a systems approach. A systems
                                 approach is a procedural way of thinking about problems in education.
                                 A systems approach can be defined as; <em>
                                     'an overall approach that
                                     involves tackling problems in a disciplined manner keeping priorities
                                     in mind. The sub-system making up the overall system can be designed,
                                     fitted, checked, and operated so as to achieve the overall objective
                                     efficiently (Rowntree, 1974).
                                 </em>
                             </p>
                             <p class=" text-justify meme">
                                 A system can also be described as the sum total of interrelated parts
                                 working together to form a complete whole. For example, a car or the
                                 human body is a system. Even an institution like the University of Swaziland
                                 (UNISWA) is a system.  A system contains certain elements; i.e. inputs,
                                 outputs, environment, sub-systems, etc.  Any system receives inputs
                                 from the environment and gives out outputs after they have been processed.
                                 However, within a system, there are sub-systems which function independently
                                 of each other. When the sub-systems combine together, they form a complete
                                 whole. It is therefore argued, according to the systems thinking, that the
                                 whole is greater than the sum total of its parts put together. Inputs,
                                 outputs and processes are defined in relation to each other, as a change
                                 in one will affect all other parts.<br /><br />
                                 In a systems approach, each decision is justified in terms of pre-planned
                                 objectives.
                             </p>
                             <p class=" text-justify meme">
                                 The systems approach is a problem-solving method that helps to:
                                 <ul>
                                     <li>
                                         Define the problem as clearly as possible;
                                     </li>
                                     <li>
                                         Analyze the problem and identify alternative solutions;
                                     </li>
                                     <li>
                                         Select from the alternatives and develop the most viable solution mix;
                                     </li>
                                     <li>
                                         Implement and test the solution;
                                     </li>
                                     <li>
                                         Evaluate the effectiveness and worth of the solution.
                                     </li>
                                 </ul>
                             </p>
                             </div>
                             <br/>
                             <h4 id="item-5-1-1" class="h4-responsive">3.4.1.1 Selection of media</h4>
                             <div class="ml-5">
                             <p class=" text-justify meme">
                                 For you to select the appropriate media therefore, the above steps in
                                 the systems approach will assist you. Below are four
                                 basic steps for you to follow:
                                 <ol>
                                     <li>
                                         <em>Needs assessment</em> - identify the need (what needs to be taught)
                                     </li>
                                     <li>
                                         <em>Formulate goal/objectives</em> - (design stage). Based on what you want
                                         your learners to achieve at the end of the instruction,
                                         write your goal and objectives. When writing objectives
                                         take into consideration the knowledge, skills and attitudes
                                         you expect learners to achieve. During this stage you also
                                         begin designing your lesson plan.
                                     </li>
                                     <li>
                                         <em>Develop/Select media</em> - Based on the formulated objectives,
                                         develop or select the media that suites the learning outcome. E.g.,
                                         if learners are going to be able to define "Volcano", the media you
                                         choose to use should make it clear to the learners so that they are
                                         able to define volcano. You could use a chart, a poster, a picture,
                                         a video, etc.
                                     </li>
                                     <li>
                                         <em>Implement the instruction</em> - you can now put your materials
                                         into use by showing what you have developed or selected on your
                                         lesson plan. However, before actual implementation you should
                                         pre-test your materials to see if they will address the
                                         learning outcomes. For proper implementation, refer also
                                         to the ASSURE Model (see Section 3.5 ).
                                     </li>
                                 </ol>
                             </p>
                             <p class=" text-justify meme">
                                 Evaluate learning - you should evaluate whether learning is or has
                                 taken place. This is done formatively (during instruction) and
                                 summatively (at the end of the instruction). The end could be
                                 a lesson, a unit, or a section.
                             </p>
                             <br />
                             <div class="note note-primary meme">
                                 <blockquote class="blockquote bq-primary">
                                     <h3 id="item-5-0"><i class="fas fa-tools"> Activity 3.2</i></h3>
                                     <p class="text-justify">
                                         <ol>
                                             <li>
                                                 Based on your teaching subject, create a lesson
                                                 plan based on the guidelines in the course IDE-EDC
                                                 100 and other guidelines posted on the course website.
                                                 [5 marks for goal and objectives; 5 marks for following plan format]
                                             </li>
                                             <li>
                                                 The plan should indicate the media to be used in the lesson [5 marks]
                                             </li>
                                             <li>
                                                 Justify the use of the media selected [5 marks].
                                             </li>
                                         </ol>
                                     </p>
                                 </blockquote>
                             </div>
                             </div>
                             <br />

                             <h3 id="item-5-2" class="h3-responsive">
                                 3.4.2 Steps to follow in systematic
                                 planning for the use of media (ASSURE Model)
                             </h3>
                             <div class="ml-5">
                             <p class=" text-justify meme">
                                 To use instructional media effectively requires that you apply the
                                 systems approach that we have discussed above. As we noted from the
                                 systems approach, instructional planning needs to be systematic and
                                 procedural. For example, to use instructional media effectively,
                                 there must be a match between the characteristics of the learners
                                 and the methods, media and materials. This can best be achieved by
                                 applying the ASSURE Model which is a procedural guide for planning
                                 and conducting instruction that incorporates media.
                                 The ASSURE model involves a series of steps that include:
                             </p>
                             <p class=" text-justify meme">
                                 <ul>
                                     <li>
                                         Analyzing the learners
                                     </li>
                                     <li>
                                         Stating objectives
                                     </li>
                                     <li>
                                         Selecting methods, media and materials
                                     </li>
                                     <li>
                                         Utilizing media and materials
                                     </li>
                                     <li>
                                         Requiring learner participation
                                     </li>
                                     <li>
                                         Evaluating and revising.
                                     </li>
                                 </ul>
                             </p>
                             <p class=" text-justify meme">
                                 Did you notice where the acronym ASSURE  comes from?
                                 Look at the  first letter of each of the six steps
                                 that are followed when planning a lesson that involves
                                 the use of instructional media. Let us now discuss each
                                 of these steps in more details.
                             </p>


                             <h4 id="item-1-2-1" class="h4-responsive">3.4.2.1 Analyse the learners </h4>
                             <p class=" text-justify meme">
                                 Analysing the learners before selecting and using instructional media
                                 is one way to help ensure effective use of media by making decisions
                                 that relate to media selection.
                             </p>
                             <p class=" text-justify meme">
                                 Before selecting any media, you need to analyse the learners in terms of:
                                 <ul>
                                     <li>
                                         General learner characteristics;
                                     </li>
                                     <li>
                                         Specific entry competencies;
                                     </li>
                                     <li>
                                         Learning styles.
                                     </li>
                                 </ul>
                             </p>
                             <p class=" text-justify meme">
                                 Let us unpack what the above bullet points mean.
                                 General learner characteristics include the broad
                                 audience identification descriptors such as age,
                                 gender composition, grade level, learning ability,
                                 homogeneous or heterogeneous group, socio-cultural background,
                                 size of the audience, and any special learning needs.
                                 Specific entry competencies refer to knowledge and skills
                                 that learners either possess or lack such as pre-requisite
                                 skills, and attitudes. Learning styles refer to the spectrum of
                                 psychological traits that affect how we perceive and respond to
                                 different stimuli such as anxiety, aptitude, visual or auditory
                                 preferences, etc. Below, we are going to look closely at each analysis.
                             </p>
                             <p class=" text-justify meme">
                                 <kk>General learner characteristics</kk><br />
                                 Analysis of the learner characteristics is helpful in selecting
                                 instructional methods and media. For example, students with
                                 substandard reading skills may be reached more effectively
                                 with non-print media than with print. When teaching students
                                 in Swaziland, use of materials that represent familiar cultural
                                 identity will be more effective than when you use materials that
                                 are completely foreign to them. When you are teaching students that
                                 are entering a new conceptual area for the first time, direct and
                                 concrete experiences such as field trips will be more effective.
                                 Heterogeneous groups which include learners varying widely in their
                                 conceptual sophistication or in amount of first-hand experience on a
                                 certain topic will benefit more from an audio-visual experience
                                 such as a videotape.

                             </p>
                             <p class=" text-justify meme">
                                 <kk>Specific entry competencies</kk><br />
                                 Students' prior knowledge of a particular subject influences
                                 how and what they learn. This means that before you plan a lesson,
                                 you need to verify the entry competencies of the learners, either
                                 through informal means such as in-class questioning, or formally
                                 through tests. Prerequisites refer to competencies that the learner
                                 must possess in order to benefit from the instruction, competencies
                                 that you or media are not going to teach. By analysing what the
                                 audience already knows helps you to select appropriate methods
                                 and media.

                             </p>
                             <p class=" text-justify meme">
                                 <kk>Learning styles</kk><br />
                                 Learning style refers to students' approaches to learning,
                                 problem-solving and processing information (Snow, Corno, & Jackson, 1996).
                                 Learning style can also be defined as a cluster of psychological traits that
                                 determine how an individual perceives, interacts with, and responds emotionally
                                 to learning environments (Heinich et al., 1996:37).

                             </p>
                             <p class=" text-justify meme">
                                 Certain traits affect our ability to learn effectively from
                                 different methods and media. However, it is not clear which
                                 traits are most important.  Gardner (1993) who was dissatisfied
                                 with the concept of IQ and its unitary view of intelligence identified
                                 seven aspects of intelligence namely:
                                 <ol>
                                     <li>
                                         verbal/linguistic (language)
                                     </li>
                                     <li>
                                         logical/mathematical (scientific)
                                     </li>
                                     <li>
                                         visual/spatial
                                     </li>
                                     <li>
                                         musical/rhythmic,
                                     </li>
                                     <li>
                                         bodily/kinesthetic (dancing/athletics)
                                     </li>
                                     <li>
                                         interpersonal (ability to understand other people) and
                                     </li>
                                     <li>
                                         intrapersonal (ability to understand oneself).
                                     </li>
                                 </ol>
                             </p>
                             <p class=" text-justify meme">
                                 Gardner's view implies that teachers, curriculum planners
                                 and media specialists should work together to design a
                                 curriculum in which students have a chance to develop
                                 these different aspects of intelligence. It also implies
                                 that students vary widely in terms of their strengths and
                                 weaknesses in each of these areas. The teacher should
                                 ensure that students are engaged in a wider variety of
                                 methods and media.
                             </p>
                             <p class=" text-justify meme">
                                 One simple way of thinking about learning styles is to consider
                                 the sensory channels that a student prefers for taking in new information-
                                 visual, auditory, or kinesthetic.
                             </p>
                             <p class=" text-justify meme">
                                 We need to note that students are not alike as they differ
                                 from each other in terms of their sensory preferences.
                                 Therefore, we should vary our instruction to accommodate
                                 those differences.
                             </p>
                             <p class=" text-justify meme">
                                 Learning style variables can then be categorized into the following;
                                 <kk>
                                     perceptual preferences and strengths, information processing habits,
                                     motivational factors, and physiological factors.
                                 </kk>
                             </p>
                             <p class=" text-justify meme">
                                 <kk><em>Perceptual preferences and strengths</em></kk><br />
                                 Learners vary as to which sensory gateways they prefer using and which
                                 they are especially adept at using. The main gateways include; <kk>
                                     <em>
                                         auditory,
                                         visual, tactile, and kinesthetic.
                                     </em>
                                 </kk> Based on the information we presented
                                 in Unit 2, we noted that most of the information that we receive is obtained
                                 through our sense of sight. This view was confirmed by Dale's Cone of experience.

                             </p>
                             <p class=" text-justify meme">
                                 <kk><em>Information processing habits</em></kk><br />
                                 This relates to how individuals approach the cognitive processing of
                                 information. Gregorc's model "mind styles", elaborated by Butler (1986),
                                 classify learners according to concrete versus abstract and random versus
                                 sequential styles. The model yielded four categories namely:<kk>
                                     <em>
                                         concrete
                                         sequential, concrete random, abstract sequential, and abstract random.
                                     </em>
                                 </kk>

                             </p>
                             <p class=" text-justify meme">
                                 Concrete sequential learners prefer direct, hands-on experiences presented
                                 in a logical order.   They are best with workbooks, demonstration, and
                                 structured laboratory exercises. Concrete random learners lean towards
                                 a trial-and-error approach and reaching conclusions from exploratory experiences.
                                 They prefer methods such as games, simulations, independent study projects and
                                 discovery learning. For abstract sequential learners decoding verbal and
                                 symbolic messages and readings as well as listening to presentations are
                                 preferred methods. Abstract random learners have the ability to draw meaning
                                 from human-mediated presentations as they respond to tone and style of the
                                 speaker as well as the message. They do well in group discussion and
                                 lectures with question-and-answer periods.
                             </p>
                             <p class=" text-justify meme">
                                 <kk>Motivational factors</kk><br />
                                 Motivation refers to a process whereby a goal-oriented activity is instigated and
                                 maintained. Motivation is a common influence on human activities. Motivation makes
                                 direct contribution to learning by focusing students on certain desired learning
                                 goals and increasing the effort they expend in reaching those goals (Newby et al., 2006).
                                 Various emotional factors do influence what we pay attention to, how long we pay attention,
                                 how much effort we invest in learning, and how feelings may interfere with learning.
                                 Anxieties, locus of control, achievement motivation and competitiveness, are critical
                                 variables to the learning process.<br />
                                 Knowing something about your students' motivation will help with instructional
                                 planning as it will help you to add to the extrinsic or intrinsic appeal of
                                 instruction especially with regard to choice of instructional media.
                                 For example, you might use curiosity by presenting students with a variety of
                                 situations that are unique, surprising, or inconsistent with their existing ideas.

                             </p>
                             <p class=" text-justify meme">
                                 <kk>Physiological factors</kk><br />
                                 These are factors related to gender differences,
                                 health, and environmental conditions. Boys and girls
                                 respond differently to school experiences. For example,
                                 boys tend to be more competitive and aggressive than girls
                                 and consequently respond better to competitive games.

                             </p>
                             <p class=" text-justify meme">
                                 Therefore, analysing the learners will help you as a teacher
                                 in making decisions about the types of instructional media to use.
                                 You are able to select media that are within the ability level of
                                 the students, that fits the size of the class, or media that will
                                 appeal to the information processing habits of the students.
                             </p>
                             <p class=" text-justify meme">
                                 <kk>Special needs</kk><br />
                                 We need to remember that students are individuals and differ from one another in a variety of ways. We need to assess and address the special needs of all learners in our class.

                             </p>
                            </div>
                             <br />
                             <h4 id="item-5-2-2" class="h4-responsive">3.4.2.2 State objectives</h4>
                             <div class="ml-5">
                             <p class=" text-justify meme">
                                 The second step in the ASSURE model is to state objectives of instruction.
                                 You need to decide on the learning outcomes that each learner will be expected
                                 to achieve. An objective is a statement of what each learner ought to get
                                 out of the lesson. The statement of objective should be as specific as possible.
                                 Statement of objectives influences the choice of instructional methods, media
                                 and materials as well as the sequence of learning activities. Statement of
                                 instructional objectives also helps to ensure proper lesson evaluation.
                             </p>
                             <p class=" text-justify meme">
                                 When stating the instructional objectives, always consider the
                                 characteristics of a well stated objective. A well stated objective
                                 starts by naming the <kk><em>Audience</em></kk> of the learners for whom the
                                 objective
                                 is intended, then specifies the  <kk><em>Behaviour</em></kk>  or capability to be demonstrated,
                                 the  <kk><em>Conditions </em></kk> under which the behaviour or the capability will be observed,
                                 and finally it specifies the  <kk><em>Degree</em></kk>  to which the new skill must
                                 be mastered.
                                 <em>This criterion is referred to as the ABCD of well-stated objective.</em>
                             </p>
                             <p class=" text-justify meme">
                                 Since you have discussed the statement of instructional objectives
                                 under the Teaching Principles and Practice course module (EDC 100),
                                 this module will not discuss objectives in detail. The behaviours
                                 to be demonstrated should always be stated in observable behavioural
                                 terms and use appropriate performance terms like name, list,
                                 describe, classify, compare, identify, select, etc. as you may
                                 have noticed, the word 'know' is not among the terms stated above.
                                 What could be the reason for this omission?
                             </p>
                             <p class=" text-justify meme">
                                 The <kk>condition</kk> refers to the circumstances under which the students
                                 will be expected to perform. For example, what will they be given to work with?
                                 The <kk>degree</kk> describes the standard that defines desired performance.
                                 It answers the question - 'How well must students perform'.
                                 For example, <em>
                                     "given a topic, students will be able to compose a one page letter
                                     that contains no more than two  grammatical errors".
                                 </em><br />
                                 We should emphasize here that an instructional objective is
                                 classified according to the primary type of learning outcome
                                 at which it is aimed. All learning outcomes are classified
                                 according to the four basic learning domains namely; <kk>
                                     cognitive,
                                     affective, psychomotor and interpersonal or social skills.
                                 </kk> Under
                                 cognitive domain, learning focuses on intellectual capabilities,
                                 affective domain focuses on feelings and values, psychomotor
                                 learning involves physical skills, while interpersonal domain
                                 involve interactions among people.
                             </p>
                             <p class=" text-justify meme">
                                 As you formulate instructional objectives depending on the nature
                                 of the subject matter that you want to present, always ensure
                                 that your learning outcomes address as many of the learning
                                 domains as possible.
                             </p>
                            </div>
                             <br />
                             <h4 id="item-5-2-3" class="h4-responsive">3.4.2.3 Select methods, media, and materials</h4>
                             <div class="ml-5">
                             <p class=" text-justify meme">
                                 A systematic plan for using media demands that the methods,
                                 media and materials be selected systematically.
                                 The selection process has three steps:
                                 <ol>
                                     <li> Decide on the appropriate method for the given learning tasks </li>
                                     <li>Choose a media format that is suitable for carrying out the method, and</li>
                                     <li>Select, modify, or design specific materials within that media format.</li>
                                 </ol>
                             </p>
                             <p class=" text-justify meme">
                                 <em>Decide on a method</em><br />
                                 Since no one single method can be appropriate for all instructional
                                 situations, you will need to use more than one instructional method
                                 during the lesson. For example, during the lesson introduction,
                                 you might want to use a simulation activity to capture the
                                 attention and arouse interest of the learners, but you might
                                 use a demonstration to present the new information.
                                 Finally you might arrange for drill-and-practice
                                 activities to provide practice in the new skills.

                             </p>
                             <p class=" text-justify meme">
                                 Choice of instructional method(s) should be determined by:
                                 <ul>
                                     <li>The nature of the subject matter,</li>
                                     <li>The learning outcomes to be achieved,</li>
                                     <li>The learner characteristics, and </li>
                                     <li>The learning experiences to be organized for the learners.</li>
                                 </ul>
                             </p>
                             <p class=" text-justify meme">
                                 <em>Choosing a media format</em><br />
                                 A media format is the physical form in which a message is incorporated
                                 and displayed. Media formats could include; audio, video,
                                 computer multimedia, still visuals (graphics, flip chart, etc.),
                                 text, etc.  In Unit 2 of this module we discussed the various
                                 types of media. Please refer to the relevant unit to remind
                                 yourself about the different types of media that we identified.
                                 Note that each media format has its unique strengths and limitations
                                 which make it suitable for use in different instructional situations.

                             </p>
                             <p class=" text-justify meme">
                                 One thing to note is that whenever you select media for teaching and
                                 learning, you will need to consider certain factors.
                                 Among those factors include:
                                 <ul>
                                     <li>The learning goal and the instructional objectives to be achieved;</li>
                                     <li>The learner characteristics;</li>
                                     <li>The nature of the subject matter;</li>
                                     <li>The unique media characteristics;</li>
                                     <li>Practical constraints such as availability of media;</li>
                                     <li>Technical ability /expertise of the instructor.</li>
                                 </ul>
                             </p>
                             <p class=" text-justify meme">
                                 <em>Obtaining specific materials</em><br />
                                 Obtaining specific materials will generally involve one of three alternatives:
                                 <ol>
                                     <li>selecting available materials </li>
                                     <li>modifying existing materials </li>
                                     <li>designing new materials. </li>
                                 </ol>
                             </p>
                             <p class=" text-justify meme">
                                 When there are existing instructional materials that could allow the
                                 students to meet their instructional objectives, such materials
                                 should be used to save time and money.  However, when the existing
                                 materials do not completely meet your objectives or are not entirely
                                 suitable for your audience, an alternative approach is to modify the
                                 materials. For example, you might select a video whose content might
                                 not be suitable for your class but the visuals could be useful in
                                 illustrating certain concepts that you would like the students to understand.
                                 In such a case, you will remove the sound, and only select the relevant visuals to use.
                             </p>
                             <p class=" text-justify meme">
                                 When modification of existing materials is not possible, then your final
                                 alternative is to design and produce your own materials.
                                 This is an expensive and time consuming process but it
                                 allows you to prepare materials that serve your students
                                 well and meet your objectives.  Unit 4 discusses how to
                                 design and produce the various types of instructional
                                 materials. You might need to refer to this unit in case
                                 you decide to produce your own materials.
                             </p>
                             <p class=" text-justify meme">
                                 <kk>Selecting available materials</kk><br />
                                 The majority of instructional materials used by teachers are "off the shelf"
                                 as they are ready-made and available either in school or can be obtained
                                 from organizations, institutions, libraries, resource centres, video
                                 shops and publishers.   As a teacher, you need to be resourceful
                                 enough to survey possible sources of media. For example, you could
                                 request for media catalogues from the local publishers to identify
                                 what types of materials are available in the various subjects offered
                                 in your school.

                             </p>
                             <p class=" text-justify meme">
                                 If you are a science teacher, you could visit The Science Education
                                 Centre located at the Kwaluseni campus of the University of Swaziland
                                 (UNISWA) which is managed by the Department of In-service within the
                                 Faculty of Education. They have a collection of videotapes that could
                                 be very useful in your teaching subjects.  Other places that you might
                                 visit include the National Curriculum Centre, the Foreign Embassies
                                 accredited to Swaziland, Government Ministries, United Nations Agencies, etc.
                             </p>
                             <p class=" text-justify meme">
                                 As a resourceful teacher, you need to build a collection of media materials
                                 by creating a media centre where all relevant instructional materials that
                                 you come across are filed and collected.
                             </p>
                             <p class=" text-justify meme">
                                 <em>Media selection criteria</em><br />
                                 The decision on whether to use a certain instructional material or
                                 not depends on several factors some of which we have already discussed.
                                 Before you select a particular type of media material, you need to ask
                                 yourself the following questions:

                             </p>
                             <p class=" text-justify meme">
                                 <ul>
                                     <li>Does it match the curriculum content?</li>
                                     <li>Is it accurate and current?</li>
                                     <li>Does it contain clear and concise language?</li>
                                     <li>Will it arouse motivation and maintain interest?</li>
                                     <li>Does it provide for learner participation?</li>
                                     <li>Is it of good technical quality?</li>
                                     <li>Is a user guide or other documentation included?</li>
                                     <li>Is the pace of presentation appropriate for the media? (Heinich et al.; 1996:47).</li>
                                 </ul>
                             </p>
                             <p class=" text-justify meme">
                                 <em>Modifying available materials</em><br />
                                 When you cannot locate entirely suitable materials and media off
                                 the shelf, you might be able to modify what is available.
                                 Say for example you have a videotape that shows a needed
                                 visual sequence but the audio portion is inappropriate.
                                 In such a case you could show the video with the sound turned off
                                 and provide a narration yourself.  You can also use instructional
                                 games to teach certain concepts by merely changing the rules of
                                 play to increase or decrease the level of sophistication.

                             </p>
                             <p class=" text-justify meme">
                                 <em> Designing new materials</em><br />
                                 There are times when you have no choice but to design new materials
                                 that would suit your instructional objectives. Whenever you decide
                                 to design new materials, consider the following design elements:
                                 <ul>
                                     <li>
                                         <em>Objectives</em>- what do you want your students to learn?
                                     </li>
                                     <li>
                                         <em>Audience</em>- what are the characteristics of your learners?
                                         Do they have the prerequisite knowledge and skills to use or learn
                                         from the materials?
                                     </li>
                                     <li>
                                         <em>Cost</em>- is sufficient money available in your budget to meet the
                                         cost of supplies that you will need to prepare the materials?
                                     </li>
                                     <li>
                                         <em>Technical expertise</em>- do you have the necessary expertise to
                                         design and produce the kind of materials you wish to use?
                                     </li>
                                     <li>
                                         <em>Equipment</em>- do you have the necessary equipment to produce
                                         or use the materials you intend to design
                                     </li>
                                     <li>
                                         <em>Facilities</em>- if your design calls for use of special
                                         facilities for preparation or use of your materials, are such
                                         facilities available?
                                     </li>
                                     <li>
                                         <i>Time</i>- can you afford to spend whatever time necessary
                                         to design and produce the kind of materials you have in mind?
                                     </li>
                                 </ul>
                             </p>
                             </div>
                             <br />
                             <h4 id="item-5-2-4" class="h4-responsive">3.4.2.4 Utilize media and materials</h4>
                             <div class="ml-5">
                             <p class=" text-justify meme">
                                 This step involves the actual use of media and materials by the students and the teacher.
                                 Since the focus of any lesson is to help the students learn, learner involvement in the
                                 use of media and materials is critical. At this stage, the <kk><i>"5Ps"</i></kk> apply
                                 either for teacher-based or learner-based instruction.The five Ps include:
                             </p>
                             <p class=" text-justify meme">
                                 <ul>
                                     <li>Preview the Materials;</li>
                                     <li>Prepare the materials;</li>
                                     <li>Prepare the environment;</li>
                                     <li>Prepare the learners; and </li>
                                     <li>Provide the learning experience.  </li>
                                 </ul>
                             </p>
                             <p class=" text-justify meme">
                                 <i>Preview the Materials</i><br />
                                 No instructional materials should be used without prior
                                 screening. During the selection process, you should
                                 ensure that the materials are appropriate for your
                                 audience and objectives. Preview the materials to
                                 confirm that it meets the learning needs of your
                                 students and your intended learning outcomes.
                                 It is also important to preview the materials before
                                 using them to ensure that it is culturally appropriate
                                 for your audience.

                             </p>
                             <p class=" text-justify meme">
                                 <em>Prepare the materials</em><br />
                                 You need to prepare the media and the materials to support the
                                 instructional activities that you plan to use.
                                 This is necessary whether you are presenting the
                                 materials or your students are using them.
                                 First, gather the materials and equipment that you and your
                                 students will need. Then determine the sequence in which
                                 the media and materials will be used. Decide what you will do as
                                 you present the materials and what the students will do. It might
                                 be necessary to practice using the materials before actually using
                                 them in class. For a student-centred lesson, ensure that the students
                                 have access to all the materials, media and equipment that they will need.

                             </p>
                             <p class=" text-justify meme">
                                 <i>Prepare the environment</i><br />
                                 Wherever learning will take place, whether in a classroom,
                                 in the laboratory, in the field, etc., the facilities have
                                 to be arranged for proper students' use of media and materials.
                                 For example, the seating arrangement, the lighting, and ventilation,
                                 should be considered depending on the type of media being used.
                                 In case you are using a videotape, all the students should be able
                                 to view the presentation without being obstructed. Some of the media
                                 require a darkened room, convenient power source and access to light switches.
                                 <br /><br />
                                 Before using any equipment, check to confirm that it is working.
                                 In the case of the film or the overhead transparencies, ensure
                                 that the light bulb is not blown-off. In case you want the students
                                 to discuss the media after using it, arrange the seats so that
                                 students can see each other as they discuss the topic.

                             </p>

                             <p class=" text-justify meme">
                                 <i>Prepare the learners</i><br />
                                 What students learn depends on the how well they are prepared
                                 for the lesson. Therefore, before using any media, prepare the learners.
                                 What you could do to prepare the learners for the use of media may be to:
                                 <ul>
                                     <li>Provide an introduction and give a broad overview of the lesson content;</li>
                                     <li>Provide a rationale indicating how the lesson relates to the overall topic being  studied;</li>
                                     <li>Tell students what to pay attention to as they use the media;</li>
                                     <li>Direct the learners' attention to specific aspects of the lesson. </li>
                                     <li>
                                         If students do not have the prerequisite knowledge to understand the media being used,
                                         provide some information to assist their understanding of the materials presented
                                     </li>
                                     <li>
                                         In case there are certain vocabularies that will be mentioned
                                         and need to be explained, discuss them before presenting the media.
                                     </li>
                                 </ul>
                             </p>
                             <p class=" text-justify meme">
                                 <i>Provide the learning experience</i><br />
                                 Whenever you use media and materials in a lesson, the purpose is to help students learn.
                                 Therefore, provide opportunities for the students to engage in some learning experiences.
                                 You should play the role of a guide to facilitate learning by helping students to explore
                                 the topic, discuss the content, etc. The students should be actively involved in
                                 the use of media and materials and not just be silent observers.
                                 Provide activities for the students to engage in as you use the media and
                                 materials in class.

                             </p>
                            </div>
                             <br />
                             <h4 id="item-5-2-5" class="h4-responsive">3.4.2.5 Require learner participation</h4>
                             <div class="ml-5">
                             <p class=" text-justify meme">
                                 Active participation in the learning process enhances learning.
                                 Cognitive theories of learning, which focus on internal mental
                                 processes, have also supported the principle that effective
                                 learning demands active manipulation of information by learners.
                                 Gagne (1985),  concluded that there are several necessary conditions
                                 for effective learning of each type of objective, but one condition that
                                 pertains to all objectives is <i>'practice of the desired skill'</i>.
                                 Therefore, the most effective learning situations are those that
                                 require learners to perform activities that build toward the objective.
                                 The form of participation could include; practising new spelling of words,
                                 solving some mathematical problems, creating a product, observing some
                                 visuals and interpreting them, etc. Discussions, short quizzes,
                                 and application exercises can provide opportunities for practice and
                                 feedback during instruction. Follow-up activities can provide further
                                 opportunities for practice.
                             </p>
                            </div>
                             <br />
                             <h4 id="item-5-2-6" class="h4-responsive">3.4.2.6 Evaluate and revise</h4>
                             <div class="ml-5">
                             <p class=" text-justify meme">
                                 The final component of the ASSURE model for effective learning is evaluation and
                                 revision. Evaluation as we know , is an on-going process and it can be done before,
                                 during and after instruction. For example, before instruction, you might want to
                                 find out whether learners have the necessary prerequisite knowledge to enter a new
                                 learning experience especially with regard to the use of the planned media and materials.
                                 You might also evaluate the media and materials before presenting it in class to confirm
                                 that it will meet the learners' intended learning outcomes. During instruction, evaluation
                                 is used in form of student practice of a desired skill, short quiz or self- evaluation.
                                 Evaluation at this stage is mainly diagnostic to help detect any teaching/learning problems
                                 and difficulties in the instructional process that might interfere with the attainment of
                                 objectives.
                             </p>

                             <p class=" text-justify meme">
                                 <i>Evaluation of learner achievement</i><br />
                                 The ultimate question in the instructional process is whether the students have learned
                                 what they were supposed to learn (Heinich et al.; 1996:56).  Can they display the
                                 capabilities specified in the original statement of objectives?  At this stage,
                                 you want to assess whether the skills acquired by the learners meet this criterion.<br />
                                 Evaluation of achievement depends on the nature of objectives. For example,
                                 some objectives can be evaluated through written tests while others require
                                 practical activities.

                             </p>
                             <p class=" text-justify meme">
                                 <i>Evaluation of media and materials</i><br />
                                 Evaluation should also include the assessment of instructional media and materials.
                                 After using the media and materials, you need to reflect back and ask yourself
                                 the following questions:
                                 <ul>
                                     <li>
                                         Were the instructional materials effective?
                                     </li>

                                     <li>
                                         Could they be improved?
                                     </li>
                                     <li>
                                         Were the materials cost-effective in terms of student achievement?
                                     </li>
                                     <li>
                                         Did your presentations take more time than it was worth?
                                     </li>
                                     <li>
                                         Were the materials interesting enough to motivate students?
                                     </li>
                                     <li>
                                         Did the media and materials help students meet the objectives?
                                     </li>
                                     <li>
                                         Did the media and materials provide meaningful student participation?
                                     </li>

                                 </ul>

                             </p>
                             <p class=" text-justify meme">
                                 Alternative ways of evaluating media and materials include;
                                 use of class discussions, individual interviews, and observation
                                 of student behaviour.  These methods of evaluation might provide you
                                 with information that you might not be able to capture from an
                                 evaluation checklist.
                             </p>
                             <p class=" text-justify meme">
                                 <i>Revision</i><br />
                                 The final step of the instructional cycle is to sit back and look at the
                                 results of your evaluation data gathering. You need to find out whether
                                 there were any discrepancies between what you intended to happen and what happened.
                                 <i>
                                     Did students' achievement fall short on any of the objectives? How did the students
                                     react to the use of media and materials? Are you satisfied with the media you used and the way you used it?
                                 </i>

                             </p>
                             <p class=" text-justify meme">
                                 If your evaluation data indicates any shortcoming on any of the above questions,
                                 then go back to your plan and revise. Change what needs to be changed for future lessons.
                             </p>
                            </div>
                         </mdb-row>
                    <br/><br/>
                         <mdb-row class="text-justify">
                             <h2 id="item-6" class="h2-responsive">3.5 Locating Relevant Instructional Materials </h2>
                             <div class="ml-5">
                             <p class="text-justify meme">
                                 Thousands of instructional materials are available for use in various learning
                                 situations if you can locate them. Gaining access to the materials is not
                                 difficult if you could have an idea where they could be found.  Possible
                                 locations include:
                             </p>
                             <p class="text-justify meme">
                                 <ul>
                                     <li>
                                         <kk>At school.</kk> You need to develop a culture of collecting instructional
                                         materials and building a collection of such resources in your school.
                                         So check what types of resources your school might have accumulated over time.
                                     </li>
                                     <li>
                                         <kk>In the neighbourhood.</kk> Identify potential sources of instructional materials
                                         in the local area. These could be the University library, national libraries,
                                         foreign embassies accredited to the country, international organizations,
                                         National Curriculum Center, the Teacher Inservice Department, Government
                                         Ministries and departments, etc. Your local daily newspapers are also a
                                         potential source of instructional materials as they contain pictures,
                                         photographs, and textual materials (articles) that could be of interest
                                         in your subject.
                                     </li>
                                     <li>
                                         <kk>The Internet.</kk> The World Wide Web is a valuable source of instructional
                                         materials. You could use search engines to search for the materials and to access
                                         the various databases. Huge amounts of already prepared materials could be
                                         located and you are no longer limited to textbooks and resources in the
                                         library as the Internet makes available information resources from
                                         around the world.
                                     </li>
                                     <li>
                                         <kk>Professional organizations.</kk> Use the opportunity when you are holding
                                         subject meetings to find out from colleagues what types of instructional materials
                                         might be available for teaching in your subject. Also enrol and become a member of
                                         organizations locally and internationally  that deal with the teaching of your subject.
                                     </li>
                                     <li>
                                         <kk>Commercial Vendors.</kk> Most suppliers of textbooks and stationery also
                                         supply some instructional materials like charts, laboratory manuals, workbooks,
                                         software, which provide a wealth of information for classroom use.
                                     </li>
                                     <li>
                                         <kk>Publishers.</kk> Commercial publishers and distributors publish a catalogue
                                         listing the various types of instructional materials available for the different
                                         subjects. Please consult your local publishers such as Macmillan for advice.
                                     </li>
                                 </ul>
                             </p>
                             </div>
                         </mdb-row>
                    <br/><br/>
                         <mdb-row class="text-justify">
                             <div class="note note-success meme">
                                 <blockquote class="blockquote bq-success">
                                     <h1 id="item-7"><i class="fas fa-folder-open">Unit summary</i></h1>
                                     <p class="text-justify">
                                         Before we end our discussion, let us remind ourselves of
                                         some of the things we have discussed.  In this unit we have
                                         noted that media to be used for instructional purposes should
                                         not be selected just because it is available or because the teacher
                                         prefers to use such media.  Instructional media should be selected
                                         based on a given criteria.  That criterion should include:
                                         <ul>
                                             <li>The instructional goal and instructional objectives;</li>
                                             <li>The audience characteristics;</li>
                                             <li>Nature of the subject matter;</li>
                                             <li>Essential media characteristics;</li>
                                             <li>Practical constraints;</li>
                                             <li>Teachers attitude towards media; and</li>
                                             <li>Appropriateness of the media.</li>
                                         </ul>
                                     </p>
                                     <p class="text-justify meme">
                                         We went further and discussed the process for media
                                         selection and ended the unit by discussing some of
                                         the models that are used to inform us when selecting
                                         instructional media.
                                     </p>
                                     <p class="text-justify meme">
                                         We also discussed the concept of the systems approach.
                                         We defined the systems approach as an overall approach that
                                         involves tackling problems in a disciplined manner, yet
                                         keeping priorities in mind. The sub-systems making up
                                         the overall system are designed, fitted, checked and
                                         operated so as to achieve the overall objective efficiently.
                                         We noted that the systems approach is a problem-solving method
                                         that helps to:
                                         <ul>
                                             <li>Define the problem as clearly as possible;</li>
                                             <li>Analyze the problem and identify alternative solutions.</li>
                                             <li>Select the alternatives and develop the most viable solution mix.</li>
                                             <li>Implement and test the solution.</li>
                                             <li>Evaluate the effectiveness and worth of the solution.  </li>



                                         </ul>
                                     </p>
                                     <p class="text-justify meme">
                                         We went on to discuss the application of the systems approach to
                                         media selection and use.  Here we noted that we have to be systematic
                                         as we select media and materials. We have to be guided by some instructional
                                         goal/objectives and the focus should be the learner.  We concluded the unit
                                         by discussing the ASSURE model which is a procedural guide for planning
                                         instruction that incorporates the use of media. We noted that use of media
                                         has to be carried out in a systematic manner and the six procedural steps
                                         have to be followed. These steps include;
                                         <ul>
                                             <li>Analyzing the learners</li>
                                             <li>Stating objectives</li>
                                             <li>Selecting methods, media and materials;</li>
                                             <li>Utilizing the media and materials;</li>
                                             <li>Requiring learner participation;</li>
                                             <li>Evaluating and revising the media and materials.  </li>


                                         </ul>
                                     </p>
                                 </blockquote>
                             </div>
                             <br />
                             <hr>
                             <div class="note note-warning meme">
                                 <blockquote class="blockquote bq-warning">
                                     <h1 id="item-8"><i class="fas fa-medal"> Assignment</i></h1>
                                     <p class="text-justify font-italic">
                                         Select a topic from one of your teaching subjects where
                                         instructional media could be used. Then, following the ASSURE Model,
                                         systematically plan the presentation of the lesson to incorporate the
                                         use of media.  Please provide all the necessary details of what will
                                         happen at each stage of the model. Present your work to your course
                                         lecturer for marking.
                                     </p>
                                 </blockquote>
                             </div>
                             <hr>
                             <br />
                             <div class="note note-secondary meme">
                                 <blockquote class="blockquote bq-secondary">
                                     <h1 id="item-9"><i class="fas fa-"> References</i></h1>
                                     <p class="text-justify">
                                         Aronson, D. (1977).<kk>
                                             <i>
                                                 Formulation and trial use of guidelines for
                                                 designing and developing instructional motion pictures
                                             </i>
                                         </kk>. Unpublished
                                         doctoral dissertation. Tallahassee, FL: Florida State University.<br /><br />

                                         Briggs, L. J. (1968).<kk> Learner variables and educational media.</kk>
                                         <i>Review of Educational Research</i>, 38,160-176.<br /><br />

                                         Briggs, L. J.; Wager, W. W. (1981). <kk>
                                             <i>
                                                 Handbook of procedures
                                                 for the design of instruction
                                             </i>
                                         </kk>(2<sup>nd</sup> ed.). Englewood Cliffs,
                                         NJ: Educational Technology Publications.<br /><br />

                                         Clark, R. E.; & Salomon, G. (1986). <kk>Media in teaching</kk>. In M. C. Wittrock
                                         (Ed.).<i> Handbook of research on teaching</i> (3<sup>rd</sup> ed.). A Project of the
                                         American Educational Research Association.  New York: Macmillan Publishing
                                         Company.<br /><br />

                                         Davies, I.K. (1981). <i><kk>Instructional Techniques</kk></i>. McGraw Hill book Company.<br /><br />

                                         Gagne, R. (1985).  <i><kk>The Conditions of Learning</kk></i>. (4 <sup>th</sup> ed.).  New York: Holt,
                                         Rinehart and Winston.  <br /><br />

                                         Gagne, R. M.; Briggs, L. J.; & Wager, W. W. (1988). <kk>Principles of Instructional Design</kk>
                                         3<sup>rd</sup>. ed., Orlando, Florida: Holt, Rinehart and Winston, Inc.<br /><br />

                                         Gagne, R.M.; Briggs, L.J.; & Wager, W.W. (1992). <kk>Principles of Instructional Design</kk>
                                         (4<sup>th</sup> ed.). Fort Worth, TX: Harcourt Brace Jevanovich College Publishers.<br /><br />

                                         Gardner, H. (1993). <i><kk>Multiple Intelligences: The Theory in Practice</kk></i>. New York: Basic Books.<br /><br />

                                         Heinich, R.; Molenda, M.; Rusell, J.D.; & Smaldino, S.E (1996). <kk>
                                             Instructional Media and
                                             Technologies for Learning.
                                         </kk> 5<sup>th</sup> Edition. New Jersey: Prentice Hall, Inc.<br /><br />

                                         Newby, T.J.; Stepich, D.A.; Lehman, J.D.; Russell, J.D. (2000). <kk>
                                             Instructional
                                             Technology for teaching and learning: Designing instruction, integrating computers,
                                             and using media.
                                         </kk> 2<sup>nd</sup> ed. Upper Saddle River: New Jersey, Merrill.<br /><br />

                                         Newby, T.J.; Stepich, D.A.; Lehman, J.D.; & Russell, J.D. (2006).<kk>
                                             Educational Technology
                                             for Teaching and Learning
                                         </kk>. Upper Saddle River, New Jersey: Pearson Education, Inc.,<br /><br />

                                         Romiszowski, A.J. (1988). <i>
                                             <kk>
                                                 The Selection and Use of Instructional Media. For improved classroom
                                                 teaching and for interactive, individualized instruction
                                             </kk>
                                         </i>. 2<sup>nd</sup> Edition.  New York:
                                         Nichols Publishing. <br /><br />

                                         Rowntree, D. (1974). <i><kk>Educational Technology in Curriculum Development</kk></i>. London: Harper and Row<br /><br />

                                         Snow, R., Corno, L., & Jackson, D. III (1996). <kk>Individual Differences in affective and cognitive functions.</kk>
                                         In D. Berliner & R. Callee   (Eds.), <i>Handbook of Educational Psychology</i> (pp.243-310). New York: Simon & Schuster
                                         Macmillan.<br /><br />

                                         St. Cloud State University. Developing Support Materials [Web Page] (1997).
                                         Available at: <a href="http://lrs.stcloudstate.edu/cim/courses/pine/develop.html">
                                             http://lrs.stcloudstate.edu/cim/courses/pine/develop.html
                                         </a>
                                         Accessed in March, 2003.

                                     </p>
                                 </blockquote>
                             </div>
                         </mdb-row>
                </mdb-container>
            </div>
        </div>
    </div>

</div>
"},null]}