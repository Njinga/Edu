{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit2.vue?vue&type=template&id=34c6d664&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit2.vue","mtime":1593893530906},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "about" }, [
    _c("div", { staticClass: "border border-light p-3 mb-5 rounded " }, [
      _c("div", { staticClass: "row" }, [
        _vm._m(0),
        _c("div", { staticClass: "col-sm-8 col-lg-9" }, [
          _c(
            "div",
            {
              staticClass:
                "scrollspy-example z-depth-1 mt-4 shadow-lg p-3 mb-5 rounded",
              attrs: {
                "data-spy": "scroll",
                "data-target": "#navbar-example3",
                "data-offset": "0"
              }
            },
            [
              _c(
                "mdb-container",
                { attrs: { fluid: "" } },
                [
                  _c("mdb-row", { staticClass: "bg-primary text-justify" }, [
                    _c("br"),
                    _c("h1", { staticClass: "h1-responsive" }, [
                      _vm._v("Unit 2")
                    ]),
                    _c("h1", { staticClass: "h1-responsive" }, [
                      _vm._v(
                        "Media Technologies Used for Teaching and Learning"
                      )
                    ]),
                    _c("br"),
                    _c(
                      "h2",
                      { staticClass: "h2-responsive", attrs: { id: "item-1" } },
                      [_vm._v("2.1 Introduction")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " In this unit, we will discuss the different media available for teaching and learning. This unit will explore both the traditional and the current technologies that we could use to enhance teaching and learning. We will also look at the advantages and disadvantages of using the various instructional media for teaching and learning and discuss the trend in the use of media and technologies so that we are prepared for the changes that are likely to occur in teaching and learning. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Like we indicated in the introduction to this module, you will be given some self-assessment activities to carry out on your own. Again you are requested to ensure that you actually carry the activities out before you continue reading the module. "
                        )
                      ]),
                      _c("div", { staticClass: "note note-info" }, [
                        _c(
                          "blockquote",
                          { staticClass: "blockquote bq-info" },
                          [
                            _c("h4", { attrs: { id: "item-1-1" } }, [
                              _c("i", { staticClass: "fas fa-paper-plane" }, [
                                _vm._v(" Unit Outcomes")
                              ])
                            ]),
                            _c("p", { staticClass: "text-justify" }, [
                              _vm._v(
                                " Upon completion of this unit you will be able to: "
                              ),
                              _c(
                                "ul",
                                {
                                  staticStyle: { "list-style-type": "square" }
                                },
                                [
                                  _c("li", [
                                    _vm._v(
                                      "identify the range of instructional media available for teaching and learning"
                                    )
                                  ]),
                                  _c("li", [
                                    _vm._v(
                                      "differentiate between traditional and current technologies that are used during instruction "
                                    )
                                  ]),
                                  _c("li", [
                                    _vm._v(
                                      "discuss the advantages and disadvantages of using the different types of media during instruction."
                                    )
                                  ])
                                ]
                              )
                            ])
                          ]
                        )
                      ]),
                      _c("br"),
                      _c(
                        "div",
                        { staticClass: " note note-success text-justify" },
                        [
                          _c(
                            "blockquote",
                            { staticClass: "blockquote bq-success" },
                            [
                              _c("h4", { attrs: { id: "item-1-2" } }, [
                                _c(
                                  "i",
                                  { staticClass: "fas fa-check-square" },
                                  [_vm._v(" Terminolgy")]
                                )
                              ]),
                              _c(
                                "p",
                                [
                                  _c("kk", [_vm._v(" Instructional Media")]),
                                  _vm._v(
                                    ":Anything that carries information between a source and a receiver. For example; diagrams, printed materials, computers, PowerPoint slides, and instructors."
                                  ),
                                  _c("br"),
                                  _c("br"),
                                  _c("kk", [_vm._v("Hypermedia")]),
                                  _vm._v(
                                    ": Refers to a computer software that uses elements of text, graphics, video, and audio and is connected in such a way that the user can easily move within the information."
                                  ),
                                  _c("br"),
                                  _c("br"),
                                  _c("kk", [
                                    _vm._v("Dale's Cone of Experience")
                                  ]),
                                  _vm._v(
                                    ": A model used to provide an intuitive model of the correctness of various kinds of audio-visual media. It informs viewers of how much people remember based on how they encounter information."
                                  ),
                                  _c("br"),
                                  _c("br"),
                                  _c("kk", [_vm._v("Non-Projected Media")]),
                                  _vm._v(
                                    ": Non-projected media refers to the range of media resources that do not require any equipment (hardware) to project them onto a screen for viewing."
                                  ),
                                  _c("br"),
                                  _c("br"),
                                  _c("kk", [_vm._v("Projected Media")]),
                                  _vm._v(
                                    ":Projected media refers to media formats in which still images, text and graphics are enlarged through an OHP and displayed on a screen for viewing; motion and other media can be displayed via a computer projector."
                                  ),
                                  _c("br"),
                                  _c("br")
                                ],
                                1
                              )
                            ]
                          )
                        ]
                      )
                    ])
                  ]),
                  _c("br"),
                  _c("br"),
                  _c("mdb-row", { staticClass: "bg-primary text-justify" }, [
                    _c(
                      "h2",
                      { staticClass: "h2-responsive", attrs: { id: "item-2" } },
                      [_vm._v("2.2 The Role of Media in Teaching and Learning")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " So far we have defined the terms 'educational technology' and 'communication.' We have noted the importance of effective communication in a classroom in order to facilitate learning. As well as that, educational technology focuses on the use of resources to facilitate learning. We need to use instructional media to physically extend our ability to communicate. We have also looked at ICTs and their relationship to educational media and/or instructional technology. We have also noted from our discussion on communication and learning that one of the key elements of communication is the channel or medium of communication. The channel/medium carries the message to be shared. We went on to say that the medium is indeed the message, since it affects how the message is received and interpreted by the target audience. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Some of the main channels that we use in human communication are our senses. We therefore need to use media because they appeal to the different sensory channels and can make teaching and learning effective. We should therefore enrich the instructional environment with many and varied experiences including the use of instructional media. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Perhaps before we discuss the role of instructional media in teaching and learning, we need to understand the term 'media'. "
                        )
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive",
                        attrs: { id: "item-2-1" }
                      },
                      [_vm._v("2.2.1 What is instructional media?")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Heinich et al. (1996:8) defines a medium as a means of communication as it refers to anything that carries information between a source and a receiver. For example; diagrams, printed materials, computers, PowerPoint slides, and instructors. (Please note that the plural for medium is 'media'). We can therefore conclude that, instructional media refers to the resources both human and non-human that a teacher deliberately selects and uses to carry information during instruction to facilitate learning. These are the resources that serve an instructional function for education and training. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The terms used to describe the instructional resources that teachers use in the classroom have changed over the years to reflect technological advances in the field of communication. For example, in the early part of the 20"
                        ),
                        _c("sup", [_vm._v("th")]),
                        _vm._v(
                          " Century, most of media available was in form of visuals and it was described as "
                        ),
                        _c("i", [_vm._v("'visual education")]),
                        _vm._v(
                          ", but with the advent of the radio tape recorders, TV, and a combination of radio and visuals, the term "
                        ),
                        _c("i", [_vm._v("'audio-visual")]),
                        _vm._v(" was accepted. Then in the 1950s, the term "),
                        _c("i", [_vm._v("multimedia")]),
                        _vm._v(
                          " was coined to describe the early combination of various still and motion media for increased educational effect. This reflected a methodology called 'multi-media' approach, which was based on the principle that a variety of audiovisual media and experiences could be combined to reinforce the value of each other. Later in the 1980s, the computer technology was introduced into the classrooms and the technology changed into "
                        ),
                        _c("i", [_vm._v("computer multi-media'. Multimedia")]),
                        _vm._v(
                          " refers to any combination of two or more media formats that are integrated to form an informational or instructional programme (Heinich, et al.; 1996). The term was adopted in connection with computers to refer to combinations of sounds and images stored in different devices and combined through computer software into an interactive programme. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Today, we can combine a variety of media materials together using the computer technology to form"
                        ),
                        _c("i", [
                          _vm._v(" computer-based instructional media.")
                        ]),
                        _vm._v(
                          " Since the early days of simpler media combinations, designers have understood that individual learners respond differently to various information sources and instructional methods, and so chances of reaching an individual are increased when a variety of media is used as a result of "
                        ),
                        _c("i", [_vm._v("multi-sensory involvement")]),
                        _vm._v(". ")
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _vm._v(
                            " As you continue reading this module, you will come across the term "
                          ),
                          _c("kk", [_c("i", [_vm._v("'Hypermedia'")])]),
                          _vm._v(
                            ". Hypermedia refers to a computer software that uses elements of text, graphics, video, and audio and is connected in such a way that the user can easily move within the information. Hypermedia is based on cognitive theories of how people structure knowledge and how they learn. It is designed to resemble the way people organize information with concepts and relationships. The relationships or associations between ideas are called "
                          ),
                          _c("kk", [_vm._v("'links'.")])
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " When defining the term 'media', we need to differentiate between "
                        ),
                        _c("i", [_vm._v("materials and equipment. Material")]),
                        _vm._v(
                          " is the term used to refer to those instructional resources that might be used to convey information without complete dependence on verbal symbols or language. For example, concrete objects, construction materials, pictures and graphics fall in this category. "
                        ),
                        _c("i", [_vm._v("Equipment")]),
                        _vm._v(
                          " is what we use to display the media materials. These include projectors, video and audio players and computers to mention just a few. "
                        )
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive",
                        attrs: { id: "item-2-2" }
                      },
                      [
                        _vm._v(
                          "2.2.2 The Role of Media in Teaching and Learning"
                        )
                      ]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Media serve a variety of roles in education. Their primary role is to help students learn and one way they do this is by providing an information-rich environment (Newby; Stepich; Lehman; & Russell, 2006:120). For example, media can provide simulated experiences and students do not have to go to far off places to observe or experience certain reality. A good example is a flight simulator whereby student pilots learn how to fly an airplane while still on the ground. Computers also offer simulation capabilities where a motor mechanic student for example, can observe on a computer, how the engine runs (pistons running and fuel being burnt). For more on simulation refer to sub-sections 2.3.8.1 (Role of Computers in Instruction) and 5.4.1 (The Computer as a Teacher - Simulation). In this regard therefore, we can conclude that the use of visuals can add meaning to words, thus enhancing learning. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The following website offers live experience on simulation in the science subjects. You may also Google for other possible sites dealing with simulations and animations."
                        ),
                        _c("br"),
                        _vm._v(" ("),
                        _c(
                          "a",
                          {
                            attrs: {
                              href:
                                "https://phet.colorado.edu/en/simulations/category"
                            }
                          },
                          [
                            _vm._v(
                              "https://phet.colorado.edu/en/simulations/category"
                            )
                          ]
                        ),
                        _vm._v(") ")
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " As principle, educational experiences that involve the learner physically and that give concrete examples are retained longer than abstract experiences such as listening to a lecture. Instructional media help to add elements of reality for instance, when you include a picture or a highly involved computer simulation in lecture. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _vm._v(
                            " Psychologist Jerome Bruner proposed that instruction should proceed from "
                          ),
                          _c("kk", [
                            _vm._v(
                              "direct experience (enactive) to iconic representation"
                            )
                          ]),
                          _vm._v(
                            " of experience such as the use of pictures and films and finally to "
                          ),
                          _c("kk", [_vm._v("symbolic representation")]),
                          _vm._v(
                            " such as use of words (Bruner, 1966:49). An icon is an image that resembles a real object. In other words, students learn best when they observe the reality directly, but when the reality cannot be observed directly, the next best option is to use some representation of the reality through the use of icons such as pictures. The last alternative to use should be a symbolic representation of the reality through the use of words or any other symbols. The reason is that words do not resemble the objects that they represent and therefore cannot be understood unless the individual has some experience with reality about that particular word. Words on their own generally do not carry meanings as meanings are in people depending on their experience with those particular words. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _vm._v(
                            " Writing about concrete-abstract continuum, Edgar Dale in 1969 developed the "
                          ),
                          _c("kk", [
                            _c("i", [
                              _vm._v(
                                '"Cone of Experience", shown in the diagrams below:'
                              )
                            ])
                          ])
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-center meme" },
                        [
                          _c("kk", [
                            _vm._v(
                              "Dale's Cone of Experience from (Heinich et al.; 1996: p.16)"
                            )
                          ]),
                          _c("br"),
                          _c("img", {
                            staticClass: "img-fluid",
                            attrs: {
                              src: require("../assets/cone1.png"),
                              alt: "Responsive image"
                            }
                          })
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-center meme" },
                        [
                          _c("kk", [
                            _vm._v(
                              "Dale's Cone of Experience Organized according to the degree of Abstraction"
                            )
                          ]),
                          _c("br"),
                          _c("img", {
                            staticClass: "img-fluid",
                            attrs: {
                              src: require("../assets/cone2.png"),
                              alt: "Responsive image"
                            }
                          })
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " In the cone of experience, we start with the learner as participant in the actual experience, then move to the learner as an observer of the actual event, then we proceed to the learner as an observer of a mediated event (an event presented through some medium), and finally to the learner observing symbols that represent an event. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          ' The two diagrams above show how Edgar Dale\'s "Cone of Experience" organized learning experiences according to the degree of concreteness each possesses. At the bottom is hands-on experience but as you ascend the cone, concrete experience begins to drop out with the stimuli becoming more abstract. At this stage, the stimuli require more skill on the part of the learners to interpret the images they carry. That is why a lecture, even when illustrated, is considered as an abstract presentation. '
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Note that the cone of experience is broad-based at the bottom where direct and purposeful experiences are provided and gets very narrow at the top where verbal symbols are provided. Also note the interdependent nature of learning experiences and instructional materials. Learning experiences at the bottom of the cone tend to hold students' attention longer and involve active student participation. Media used at the top of the cone are said to be more passive but suitable for transmitting large amounts of information quickly. "
                        )
                      ]),
                      _c(
                        "div",
                        { staticClass: "note note-primary text-left" },
                        [
                          _c(
                            "blockquote",
                            { staticClass: "blockquote bq-primary" },
                            [
                              _c("i", { staticClass: "fas fa-tools" }, [
                                _vm._v(" Activity 2.1")
                              ]),
                              _c("br"),
                              _vm._v(
                                " Select any media of your choice and discuss how/why you would use it in the classroom based on Dale's Cone of Experience according to the degree of abstraction. "
                              )
                            ]
                          )
                        ]
                      ),
                      _c("br"),
                      _c("br"),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Media serve as extensions of our efforts to communicate with our students. A large percentage of things that we learn are a direct result of our visual and audio-visual experiences. Our senses are the gateway to the acquisition of knowledge. According to Sampath (1981), research shows that we learn: "
                        ),
                        _c("ul", [
                          _c("li", [_vm._v("83% through the sense of sight;")]),
                          _c("li", [
                            _vm._v("11% through the sense of hearing;")
                          ]),
                          _c("li", [
                            _vm._v("3.5% through the sense of smell;")
                          ]),
                          _c("li", [
                            _vm._v("1.5% through the sense of touch;")
                          ]),
                          _c("li", [_vm._v("1% through the sense of taste.")])
                        ])
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _vm._v(" Research also shows that we remember: "),
                          _c("ul", [
                            _c("li", [_vm._v(" 10% of what we hear; ")]),
                            _c("li", [
                              _vm._v(" 50% of what we hear and see; ")
                            ]),
                            _c("li", [
                              _vm._v(" 90% of what we hear, see and do. ")
                            ])
                          ]),
                          _vm._v(" Hence the Chinese saying, "),
                          _c("kk", [
                            _c("i", [
                              _vm._v(
                                '"If I hear, I forget, If I see I remember, If I do, I Know".'
                              )
                            ])
                          ])
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The above information clearly shows that visual senses are very important in the learning process and that retention of information is closely related to active learner involvement in the learning experience. Media can be used to support one or more of the following instructional activities: "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _c(
                          "ul",
                          { staticStyle: { "list-style-type": "square" } },
                          [
                            _c(
                              "li",
                              [
                                _c("kk", [_vm._v("Gain attention")]),
                                _vm._v(
                                  " - There is an attention-getting factor associated with instructional media that keeps the audience alert. For example, a picture on the screen, a question on the board, or music playing as students enter the classroom. All these serve to get the students' attention and arouse their interest. "
                                )
                              ],
                              1
                            ),
                            _c(
                              "li",
                              [
                                _c("kk", [_vm._v("Recall of prerequisites")]),
                                _vm._v(
                                  " - Media can help students recall what they learned in the last class, so that new materials can be attached to and built upon it. "
                                )
                              ],
                              1
                            ),
                            _c(
                              "li",
                              [
                                _c("kk", [
                                  _vm._v("Enhance retention and transfer")
                                ]),
                                _vm._v(
                                  " - Instructional media help students visualize a lesson and transfer abstract concepts into concrete, easier to remember objects. "
                                )
                              ],
                              1
                            ),
                            _c(
                              "li",
                              [
                                _c("kk", [
                                  _vm._v(
                                    "Support learning through examples and visual elaboration"
                                  )
                                ]),
                                _vm._v(
                                  " - One of the biggest advantages of media is to bring the world into the classroom when it is not possible to take the students into the world. "
                                )
                              ],
                              1
                            ),
                            _c(
                              "li",
                              [
                                _c("kk", [_vm._v("Elicit student response")]),
                                _vm._v(
                                  " - You can use media to get students to participate during the lesson. "
                                )
                              ],
                              1
                            ),
                            _c(
                              "li",
                              [
                                _c("kk", [_vm._v("Present new content")]),
                                _vm._v(
                                  " - Media helps to make the presentation of new content more memorable and helps to deliver new content. Media can serve as sources of information e.g. use of real objects, maps, diagrams, and photographs to generate content for the lesson. "
                                )
                              ],
                              1
                            ),
                            _c(
                              "li",
                              [
                                _c("kk", [_vm._v("Assess performance")]),
                                _vm._v(
                                  " - Media can be an excellent way to pose assessment questions for the class to answer. "
                                )
                              ],
                              1
                            ),
                            _c(
                              "li",
                              [
                                _c("kk", [_vm._v("Provide feedback ")]),
                                _vm._v(
                                  " - Media can be used to provide feedback relating to a test or class work. "
                                )
                              ],
                              1
                            )
                          ]
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Media also have the following advantages during instruction: "
                        ),
                        _c("ul", [
                          _c(
                            "li",
                            [
                              _c("kk", [
                                _vm._v("Overcome physical limitations.")
                              ]),
                              _vm._v(
                                " Occasionally, instruction faces some physical limitations e.g. when inside details need to be observed. In such cases, models can be used. "
                              )
                            ],
                            1
                          ),
                          _c(
                            "li",
                            [
                              _c("kk", [
                                _vm._v("Help learners to interpret information")
                              ]),
                              _vm._v(
                                " in a way that they experience meanings similar to those intended by the communicator. "
                              )
                            ],
                            1
                          ),
                          _c(
                            "li",
                            [
                              _c("kk", [
                                _vm._v("Improve the quality of learning.")
                              ]),
                              _vm._v(
                                " When there is a careful integration of pictures and words, media can communicate elements of knowledge in a well-organized, specific, and clearly defined manner. "
                              )
                            ],
                            1
                          ),
                          _c(
                            "li",
                            [
                              _c("kk", [
                                _vm._v(
                                  "The length of time required for instruction can be reduced."
                                )
                              ]),
                              _vm._v(
                                " Media saves on teaching time. Hence the famous saying "
                              ),
                              _c("i", [
                                _vm._v(
                                  "a good picture is worth a thousand words'"
                                )
                              ]),
                              _vm._v(". ")
                            ],
                            1
                          ),
                          _c(
                            "li",
                            [
                              _c("kk", [
                                _vm._v(
                                  "Instruction can be provided when and where desired or necessary"
                                )
                              ]),
                              _vm._v(
                                ". When instructional media are designed for individualized use, then a student can study at a time and place that is personally convenient. "
                              )
                            ],
                            1
                          ),
                          _c(
                            "li",
                            [_c("kk", [_vm._v("Stimulate problem solving.")])],
                            1
                          ),
                          _c(
                            "li",
                            [
                              _c("kk", [
                                _vm._v(
                                  "Provoke learners to form or change attitude of mind."
                                )
                              ])
                            ],
                            1
                          )
                        ])
                      ])
                    ])
                  ]),
                  _c("br"),
                  _c("br"),
                  _c("mdb-row", [
                    _c(
                      "h2",
                      {
                        staticClass: "h2-responsive text-left",
                        attrs: { id: "item-3" }
                      },
                      [
                        _vm._v(
                          "2.3 Instructional Media Available for Teaching and Learning"
                        )
                      ]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " There are different ways of categorizing instructional media, and for the purposes of this module we will use the following categories to group the range of instructional media for teaching and learning which are borrowed from Heinich et al. (1996): "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _c("ol", [
                          _c("li", [_vm._v("Non-projected media;")]),
                          _c("li", [_vm._v("Projected media;")]),
                          _c("li", [_vm._v("Audio media;")]),
                          _c("li", [_vm._v("Motion media;")]),
                          _c("li", [
                            _vm._v("Computer-based multimedia and hypermedia. ")
                          ]),
                          _c("li", [_vm._v("Web-based media ")]),
                          _c("li", [_vm._v("Social Media")])
                        ]),
                        _c("br"),
                        _vm._v(
                          " Let us now discuss each one of these categories of media. We will start by looking at the non-projected media. "
                        )
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive text-left",
                        attrs: { id: "item-3-1" }
                      },
                      [_vm._v("2.3.1 Non-projected media ")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Non-projected media refers to the range of media resources that do not require any equipment (hardware) to project them onto a screen for viewing. Non-projected media include: real objects, models, non-projected visuals (still pictures, charts, graphs, drawings, posters, cartoons and comics and book illustrations), visual display surfaces, and printed materials. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Many of the non-projected media that are mentioned and discussed are so common that instructors are inclined to underestimate their instructional value. Most of them are also readily available from textbooks and magazines, as well as from the immediate environment of the school. They are inexpensive, easy to use and some can be obtained at no cost at all. They can also be produced or developed by teachers. "
                        ),
                        _c("i", [
                          _vm._v(
                            "Please note that media do not have to be expensive or exotic to be useful for instruction. What matters is the effectiveness and appropriateness of the media in achieving the instructional goal."
                          )
                        ]),
                        _vm._v(
                          " Let us discuss each one of these types of media in some detail. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v(" Real Objects")]),
                          _c("br"),
                          _vm._v(
                            " Everywhere in our environment, real things become sources of information or content for teaching and learning. Such objects can also serve as stimulators for learning when they are studied, handled, tasted, and manipulated (Erickson & Curl, 1972:86). Real objects include; tools, coins, rocks, artifacts or material remains such as costumes, plants, animals, etc. Real objects are some of the most accessible and interactive materials for educational use. Real objects fit almost at the bottom of Dale's Cone of Experience and will be most effective especially for learners who are encountering a subject about which they have had little direct experience in their daily lives. "
                          )
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Real objects may be used as they are, or they can be modified to enhance instruction. Examples of modifications include: "
                        ),
                        _c("ul", [
                          _c("li", [
                            _c("i", [_vm._v("Specimen")]),
                            _vm._v(
                              " where actual plants and animals or parts are preserved for later use and close inspection. "
                            )
                          ]),
                          _c("li", [
                            _c("i", [_vm._v("Exhibits")]),
                            _vm._v(
                              " where collections of artifacts of either historical or scientific nature are brought together with printed information to illustrate a point. "
                            )
                          ]),
                          _c("li", [
                            _c("i", [_vm._v("Cutaways")]),
                            _vm._v(
                              " where devices such as machines have one side cut away to allow close observation of the inside details or inner workings (Heinich et al.; 1996:102). "
                            )
                          ])
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Besides using real objects to present information, raise questions, and providing hands-on experiences, real objects also play a variable role during the evaluation phase of instruction. They can be displayed in a central place for learners to identify them, describe their function, or compare and contrast them. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Models")]),
                          _c("br"),
                          _vm._v(
                            " Models refer to three-dimensional representations of a real thing. Things in the real world always have three dimensions. "
                          ),
                          _c("kk", [
                            _vm._v("They have a length, a width and a depth")
                          ]),
                          _vm._v(
                            ". Whenever we teach, we need to create as much reality as possible by representing the things, as they would appear in real life. However, this is not always possible. For example, you might visit a hydro-electricity power station but still fail to understand how the generator works since you need to look inside the generator to understand how it works. In such a case, a model might be necessary. A model is a scaled representation of the object that it represents. The model might be a true copy of the actual object, might be larger, or even smaller. It might be complete in details or simplified for instructional purpose. Models can provide learning experiences that real things cannot provide. For example, a model can be dismantled to provide the interior view of the object, which cannot be done with real objects. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-center meme" },
                        [
                          _c("img", {
                            staticClass: "img-fluid",
                            attrs: {
                              src: require("../assets/cow.png"),
                              alt: "Responsive image"
                            }
                          }),
                          _c("br"),
                          _c("kk", [_c("i", [_vm._v("Model of a cow")])])
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(" We use models when: "),
                        _c("ul", [
                          _c("li", [
                            _vm._v(
                              " Inside details must be observed and cannot be better shown using cross-sectional diagrams. "
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              " Too many details which are all relevant appear in a diagram making it difficult to interpret. "
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              " When a third dimension (depth) aids understanding of a concept such as volume in Mathematics. "
                            )
                          ])
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Models can be manipulated by adding colour, enlarging , or reducing them. There are four types of models that we can use namely: "
                        ),
                        _c("ul", [
                          _c(
                            "li",
                            [
                              _c("kk", [_vm._v("solid models")]),
                              _vm._v(
                                " that are used for the recognition of external features e.g. the toys that we buy for the children; "
                              )
                            ],
                            1
                          ),
                          _c(
                            "li",
                            [
                              _c("kk", [_vm._v("cross-sectional models")]),
                              _vm._v(
                                " or cutaways such as those used in science laboratories e.g. animal and human anatomy, machines, engines, etc.; "
                              )
                            ],
                            1
                          ),
                          _c(
                            "li",
                            [
                              _c("kk", [_vm._v("construction models")]),
                              _vm._v(" which can be easily put together; and ")
                            ],
                            1
                          ),
                          _c(
                            "li",
                            [
                              _c("kk", [_vm._v("working models")]),
                              _vm._v(
                                " which are used to demonstrate how the object works. "
                              )
                            ],
                            1
                          )
                        ])
                      ]),
                      _c("br"),
                      _c("div", { staticClass: "container meme" }, [
                        _c("div", { staticClass: "row" }, [
                          _c(
                            "div",
                            { staticClass: "col" },
                            [
                              _c("img", {
                                staticClass: "img-fluid",
                                attrs: {
                                  src: require("../assets/pic1.png"),
                                  alt: "Responsive image"
                                }
                              }),
                              _c("br"),
                              _c("kk", [_vm._v("Construction Models")])
                            ],
                            1
                          ),
                          _c(
                            "div",
                            { staticClass: "col" },
                            [
                              _c("img", {
                                staticClass: "img-fluid",
                                attrs: {
                                  src: require("../assets/pic11.png"),
                                  alt: "Responsive image"
                                }
                              }),
                              _c("br"),
                              _c("kk", [_vm._v("working models")])
                            ],
                            1
                          )
                        ])
                      ]),
                      _c("br"),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Both models and real objects should be used whenever realism is necessary for learning to take place. The discussion in the next section will help you look closely at printed materials as another media for communication. "
                        )
                      ]),
                      _c(
                        "div",
                        {
                          staticClass:
                            "note note-primary shadow-lg p-3 text-left rounded"
                        },
                        [
                          _c(
                            "blockquote",
                            { staticClass: "blockquote bq-info" },
                            [
                              _c("i", { staticClass: "fas fa-tools" }, [
                                _vm._v(" Activity 2.2")
                              ]),
                              _c("br"),
                              _c("ol", [
                                _c("li", [
                                  _vm._v(
                                    " Explain with examples why you should use a real object in the classroom. "
                                  )
                                ]),
                                _c("li", [
                                  _vm._v(
                                    " Give reasons why you should use models as media in the classroom. "
                                  )
                                ])
                              ])
                            ]
                          )
                        ]
                      )
                    ]),
                    _c("br"),
                    _c(
                      "h4",
                      {
                        staticClass: "h4-responsive text-left",
                        attrs: { id: "item-3-1-1" }
                      },
                      [_vm._v("2.3.1.1 Printed materials")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify  meme" }, [
                        _vm._v(
                          " Printed materials comprise of all textual and other materials that can be run off in large numbers on a photocopier or printing machine to be used by students or trainees. Printed materials include; textbooks, fiction and non-fiction books, pamphlets, manuals, handouts, word processed documents, assignment sheets, study guides, and resource materials for group exercises such as instruction sheets and data sheets. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify  meme" }, [
                        _vm._v(
                          " As you might well be aware, printed materials, especially textbooks, have long been the foundation of classroom instruction. Print media continues to be the most single, most common category of teaching and learning support materials. Even as computer-based multimedia and hypermedia invade the classrooms, through electronic communication such as e-mail systems, database networks, World Wide Web, Hypertext mail, and Portable Document Formats, the role of print is far from being over. Instead, the role of print is being enhanced by the information revolution as the amount of reading and printing that a typical person will engage in increases. The most common application of text is to present information to students who read the content contained in printed media either for class discussion or for study. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify  meme" }, [
                        _vm._v(
                          " Printed materials can easily be abused in their usage especially because of the ease with which the materials can be obtained, reproduced and circulated. Therefore, like all other media materials, use of print should be planned. As a teacher, you should determine the learning objectives to be achieved and then select the print materials that would facilitate your students to achieve those objectives. Always direct students' reading of printed materials with objectives and questions and supplement the print with other media. Earlier on we identified different types of printed materials. Let us briefly define them. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify  meme" },
                        [
                          _c("kk", [_vm._v("Text books")]),
                          _vm._v(
                            "- these are printed materials, in hard copy or electronic, used either for mass instruction, for individual or for group instruction. They serve as a source of information for a particular course, subject or programme. A textbook might be the chief source, a co-basic source, or a supplementary source of information meant to enrich the other sources. E-materials (e-books) are now very common in schools in developed countries. Book readers and Tablets or even mobile phones are used to read e-materials. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify  meme" },
                        [
                          _c("kk", [_vm._v("Handouts")]),
                          _vm._v(
                            "- these comprise of the different types of information-providing materials that are given out to students as single loose pages or a number of pages, usually in connection with a taught lesson or programme. They include; sets of notes (complete or in skeleton form), tables, diagrams, maps, or any other illustrations or support materials. In the technological era, electronic handouts are sent by email, accessed at designated websites, and downloaded from school websites and saved on CD's or other portable storage devices such as memory sticks. They can also be stored in mobile devices and used at any time. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify  meme" },
                        [
                          _c("kk", [_vm._v("Assignment sheets")]),
                          _vm._v(
                            "- comprise of materials given to students describing the tasks to be carried out. They include; problem description sheets, reading lists, laboratory recording sheets, briefing sheets for projects and seminars, etc. Again, teachers can also use the current technologies to give assignment instructions to learners electronically. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify  meme" },
                        [
                          _c("kk", [
                            _vm._v("Resource materials for group exercises")
                          ]),
                          _vm._v(
                            " - comprise of the various printed materials (both hard and electronic) that are used in connection with group learning exercises. For example; background reading material, instruction sheets, etc. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify  meme" },
                        [
                          _c("kk", [_vm._v("Worksheet")]),
                          _vm._v(
                            "- A worksheet is a device by which the teacher helps the students to work as far as possible to his/her full capacity. Worksheet encourages students to think for themselves about the results of their work and to draw conclusions. The new technologies have made it possible for worksheets to be downloaded as templates which can be easily used, modified, saved and re-used. "
                          )
                        ],
                        1
                      )
                    ]),
                    _c("br"),
                    _c(
                      "h4",
                      {
                        staticClass: "h4-responsive text-left",
                        attrs: { id: "item-3-1-2" }
                      },
                      [_vm._v("2.3.1.2 Non-projected visuals")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Non-projected visuals refer to media materials that appeal to the sense of sight and do not require any equipment for viewing. Among the non-projected visuals include; still pictures, drawings, charts, graphs, posters, cartoons and comics. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-center meme" },
                        [
                          _c("img", {
                            staticClass: "img-fluid",
                            attrs: {
                              src: require("../assets/senses.png"),
                              alt: "Responsive image"
                            }
                          }),
                          _c("br"),
                          _c("kk", [
                            _c("i", [_vm._v("A drawing showing the 5 senses")])
                          ])
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Many of these materials can be easily obtained yet they can be used in many ways at all levels of instruction as well as in all disciplines. Most of them are very useful in stimulating creative expression. Many of the non-projected visuals are available in textbooks and other printed materials, from computer software and multimedia programmes. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Still Pictures")]),
                          _c("br"),
                          _vm._v(
                            " Still pictures are photographic representations or images of people, places, activities, and objects. Among the most common still pictures that are used during instruction include; photographs and illustrations from books, calendars, and magazines. Still pictures are mainly two-dimensional but using a series of still pictures taken from different scenes and angles or positions could compensate this shortfall. "
                          )
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Photographs are particularly very useful when you want students to observe certain phenomena and describe their observations as a way of training them in analytical and observation skills. Still pictures are also useful when you want to illustrate a certain concept; that is, how something looks like. We need to train our students to understand that textbook pictures and illustrations are not decorations and should be read and interpreted as they are also meant to increase understanding of the concepts being presented. As the saying goes, One picture paints a thousand words!' So encourage the students to give attention to them. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Drawings")]),
                          _c("br"),
                          _vm._v(
                            " Drawings are graphic materials that employ graphic arrangement of line and symbols to represent the outline inter - relationships or key features of a person, place, things or concept. Drawings show relationships or help to explain processes such as how something works or is constructed. Drawings help to simplify whatever you intend to teach and make the message easier to understand. "
                          )
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Drawings can be used in all phases of instruction from introduction to evaluation. Drawings are readily available in textbooks and other classroom materials. As teachers we should learn to use drawings especially freehand ones to provide a conceptual structure of whatever we teach in order to aid understanding. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Charts")]),
                          _c("br"),
                          _vm._v(
                            " A chart is a combination of pictorial, numerical or verbal material designed to present a clear visual summary of an important process or a set of relationships. Charts are visual representations of abstract relationships such as quantities, chronologies of events, and hierarchies. Most charts serve as visual summaries containing a mix of visual and verbal elements. They could summarize data, explain a process, or describe a set of relationships. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Types of charts")]),
                          _c("br"),
                          _vm._v(
                            " Charts are classified depending on their function and for classroom purposes; we could identify the following types of charts: "
                          ),
                          _c("ul", [
                            _c("li", [_vm._v("outline and tabular charts;")]),
                            _c("li", [
                              _vm._v("flow, organization and process charts;")
                            ]),
                            _c("li", [_vm._v("tree and stream charts;")]),
                            _c("li", [_vm._v("maps")]),
                            _c("li", [_vm._v("time-line charts. ")])
                          ])
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Outline charts list the key points and sub-points in material while tabular charts present information in columns and are commonly used to present production or sales figures. On the other hand, flow, organization, and process charts are used to show functional relationships such as a manufacturing process or organization of a government department. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Tree and stream charts are used to represent developments and relationships for example, a family tree or when you want to explain the many end products that are obtained from coal. As well, time-line charts are used when we want to summarize a sequence of events or to make chronological comparisons, for example, when we want to compare wheat production for different countries over a period of time. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Whenever you decide to use charts, please ensure that: "
                        ),
                        _c("ul", [
                          _c("li", [
                            _vm._v(
                              " you have a clear, well-defined instructional purpose; "
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              " you represent only one major concept and if you have a lot of information to convey, develop or use a series of charts instead of using a single complex chart to form a flip chart; "
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              " you have included the minimum of visual and verbal information needed to aid understanding. "
                            )
                          ])
                        ])
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Graphs")]),
                          _c("br"),
                          _vm._v(
                            " Graphs are used to provide a visual representation of numerical data. They also illustrate relationships among units of data and trends in the data, such as when you want to show the relationship between time and amounts or yields. Graphs are more visually interesting to observe than when you have raw data. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _vm._v(
                            " There are four major types of graphs: namely; "
                          ),
                          _c("kk", [
                            _vm._v("bar, pictorial, circle and line graphs.")
                          ])
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _c("ul", [
                          _c(
                            "li",
                            [
                              _c("kk", [_vm._v("Bar graphs")]),
                              _vm._v(
                                " are mainly used to compare similar items at different times or different items at the same time. "
                              )
                            ],
                            1
                          ),
                          _c(
                            "li",
                            [
                              _c("kk", [_vm._v("Pictorial graphs")]),
                              _vm._v(
                                " are an alternative form of bar graph where a series of simple drawings or pictures are used to represent values and each drawing or picture is then assigned a specific value that relates to the total amount. "
                              )
                            ],
                            1
                          ),
                          _c(
                            "li",
                            [
                              _c("kk", [_vm._v("Pie or circle graphs")]),
                              _vm._v(
                                " involve dividing a circle into segments and each segment representing a part or a percentage of the whole. They are used to show fractional relationships "
                              )
                            ],
                            1
                          ),
                          _c(
                            "li",
                            [
                              _c("kk", [_vm._v("Line graphs")]),
                              _vm._v(
                                " are used to show variations in two-dimensions e.g. changes in quantities or values over time. "
                              )
                            ],
                            1
                          )
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The type of graph that you use must depend on the complexity of the information that you wish to present. In today's world, you can easily create your own graphs using the computer. All that you need is to input data into the computer and give a command for the computer to create the type of graph that you need. Most spreadsheet programmes like "
                        ),
                        _c("i", [_vm._v("Microsoft Excel")]),
                        _vm._v(
                          " have graph and chart options and you can use it to create graphs from numerical data. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Posters")]),
                          _c("br"),
                          _vm._v(
                            " A poster incorporates visual combinations of bold design, colour and a brief written message meant to catch the attention of the viewer instantly in order to convey a message. Posters are meant to catch and hold the viewer,s attention long enough to communicate a message. Usually posters carry persuasive messages or messages that influence the audience to act in certain way. For example, you might be carrying out a campaign in your school against child or drug abuse. Posters can be used to promote good health practices such as not using drugs. Posters are similar to charts but they are smaller, simpler in detail and bolder in content and style. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _vm._v(" There are two types of posters: namely; "),
                          _c("kk", [
                            _vm._v(
                              "single-glance and stop and study posters. Single glance posters "
                            )
                          ]),
                          _vm._v(
                            "mainly appeal to emotions and can easily be read and understood without any spoken word."
                          ),
                          _c("kk", [_vm._v(" Stop and study")]),
                          _vm._v(
                            " posters require you to look closely at the poster to interpret it. An effective learning technique is to have your students design posters as part of a class project on a topic you have discussed in class or on a topical issue you are interested in promoting some positive attitudes. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Cartoons and comics")]),
                          _c("br"),
                          _vm._v(
                            " A cartoon is an interpretive picture that makes use of line, symbols and exaggeration to represent ideas, people, events, or situations in pictorial form. Cartoons are mainly used to influence public opinion. Cartoons employ the principle of caricature (gross and ludicrous exaggeration or distortion of parts of a whole to emphasize the part i.e. the nose, or the chin). A comic is a form of cartoon in which the characters enact a story in a certain sequence to create a continuous pictorial story. Both cartoons and comics are humorous and interesting, easy to read and excite the students. Appreciation and interpretation however depends on the experience and ability level of the students. Therefore, be sure that the cartoons and comics are within the experiential and intellectual range of your students. "
                          )
                        ],
                        1
                      )
                    ]),
                    _c(
                      "div",
                      {
                        staticClass:
                          "note note-primary shadow-lg p-3 text-left ml-5 rounded"
                      },
                      [
                        _c(
                          "blockquote",
                          { staticClass: "blockquote bq-info" },
                          [
                            _c("i", { staticClass: "fas fa-tools" }, [
                              _vm._v(" Activity 2.3")
                            ]),
                            _c("br"),
                            _vm._v(
                              " Create a poster or chart explaining a concept in a lesson. Present the media to the course lecturer for assessment. "
                            )
                          ]
                        )
                      ]
                    ),
                    _c("br"),
                    _c(
                      "h4",
                      {
                        staticClass: "h4-responsive text-left",
                        attrs: { id: "item-3-1-3" }
                      },
                      [_vm._v("2.3.1.3 Non-projected display surfaces")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " For you to use many of the non-projected visuals such as photographs, drawings, charts, graphs, or posters, you need to have a certain way of displaying them. The most commonly used classroom display surfaces include; the chalkboard, multipurpose board, pegboard, bulletin board, cloth board, exhibits, flip charts, and dioramas. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("The chalkboard")]),
                          _vm._v(
                            " is the most common display surface in the classroom. Though commonly used to support verbal communication, it can be used to draw visuals to illustrate the content of your lesson. Graphics such as sketch drawings; diagrams, charts and graphs can be drawn on the chalkboard for display in class. "
                          )
                        ],
                        1
                      ),
                      _c("br"),
                      _c("div", { staticClass: "container meme" }, [
                        _c("div", { staticClass: "row" }, [
                          _c(
                            "div",
                            { staticClass: "col" },
                            [
                              _c("img", {
                                staticClass: "img-fluid",
                                attrs: {
                                  src: require("../assets/board1.png"),
                                  alt: "Responsive image"
                                }
                              }),
                              _c("br"),
                              _c("kk", [_vm._v("Visual Display Boards")])
                            ],
                            1
                          ),
                          _c(
                            "div",
                            { staticClass: "col" },
                            [
                              _c("img", {
                                staticClass: "img-fluid",
                                attrs: {
                                  src: require("../assets/board2.png"),
                                  alt: "Responsive image"
                                }
                              }),
                              _c("br"),
                              _c("kk", [_vm._v(" Chalk Board")])
                            ],
                            1
                          )
                        ]),
                        _c("br"),
                        _c(
                          "p",
                          { staticClass: "text-justify meme" },
                          [
                            _c("kk", [_vm._v("Multipurpose boards")]),
                            _vm._v(
                              " are also called whiteboards or marker boards. As the name suggests, they can be used for more than one purpose. They can be used to write on, and to project slides and overhead transparencies. These types of boards are preferred for use around computers since chalk dust can harm computers and disks. The smooth, white plastic surface of a multipurpose board requires a special erasable marker to write. You should avoid using permanent felt-tip markers as they damage the surface permanently. "
                            )
                          ],
                          1
                        ),
                        _c(
                          "p",
                          { staticClass: "text-justify meme" },
                          [
                            _c("kk", [_vm._v("A bulletin board")]),
                            _vm._v(" is a surface on which bulletins or "),
                            _c("i", [_vm._v("brief news and announcements")]),
                            _vm._v(
                              " of urgent interest are posted for public notice. A bulletin board is a surface of variable size and shape made of material that holds pins, thumbtacks, and other materials without damaging the board. A bulletin board could be used to display students' work and help to reinforce students' efforts to do a good job. "
                            )
                          ],
                          1
                        ),
                        _c(
                          "p",
                          { staticClass: "text-justify meme" },
                          [
                            _c("kk", [_vm._v("Cloth board")]),
                            _vm._v(
                              " is constructed of cloth stretched over a backing material such as plywood, masonite, or heavy cardboard. The cloth used could be made of flannel or felt material with a rough surface or from an old blanket for visuals to stick on. The visuals to be displayed on a cloth board should be able to hold onto the cloth by backing the visuals or other items to be attached with a coarse, hook-like texture. You could also use coarse sandpaper on the back of visuals for attachment to a cloth board. Cloth boards are useful when describing a certain process or when narrating a story since the visuals could be displayed in a sequence one after the other. "
                            )
                          ],
                          1
                        ),
                        _c(
                          "p",
                          { staticClass: "text-justify meme" },
                          [
                            _c("kk", [_vm._v("Flip Chart")]),
                            _vm._v(
                              " is a pad of large paper fastened together at the top and mounted to an easel (flip chart stand). Each individual sheet can hold limited verbal/visual message. The message could be written while the presenter is talking or can be prepared in advance. The most common use of flip charts is for drawing of key illustrations and writing key words during a presentation. It is convenient to use a flip chart since you do not need electric power, it is portable, and only requires marking pen for writing or drawing. "
                            )
                          ],
                          1
                        ),
                        _c("p", { staticClass: "text-center meme" }, [
                          _c("img", {
                            staticClass: "img-fluid",
                            attrs: {
                              src: require("../assets/chart.png"),
                              alt: "Responsive image"
                            }
                          }),
                          _c("br"),
                          _c("i", [_vm._v(" Flip Chart on a stand")])
                        ]),
                        _c(
                          "p",
                          { staticClass: "text-justify meme" },
                          [
                            _c("kk", [_vm._v("Exhibits")]),
                            _vm._v(
                              " are displays of various objects and visuals designed to form an integrated whole for instructional purposes. Exhibits could include; real objects, models, as well as graphic materials. For example, when teaching a topic on rocks, you might have an exhibition of different types of rocks for students to identify. "
                            )
                          ],
                          1
                        ),
                        _c(
                          "p",
                          { staticClass: "text-justify meme" },
                          [
                            _c("kk", [_vm._v("Dioramas")]),
                            _vm._v(
                              " are static displays consisting of a three-dimensional foreground and a flat or two-dimensional background to create a realistic scene. The term 'diorama' is derived from the Greek language and it means 'to see through'. This refers to a medium that enables a teacher to bring little sections of the real world into a classroom for the students to examine. Dioramas represent three-dimensional scenes often in miniature form to represent natural settings. Dioramas could be used to illustrate different concepts. For example, in geography they can be constructed to illustrate how certain landforms like craters, rift valleys, etc. are formed. "
                            )
                          ],
                          1
                        ),
                        _c(
                          "p",
                          { staticClass: "text-center meme" },
                          [
                            _c("img", {
                              staticClass: "img-fluid",
                              attrs: {
                                src: require("../assets/box.png"),
                                alt: "Responsive image"
                              }
                            }),
                            _c("br"),
                            _c("kk", [
                              _vm._v(
                                " Example of Diorama showing a waterfall and boxes (3 dimensions)"
                              )
                            ])
                          ],
                          1
                        ),
                        _c("p", { staticClass: "text-justify meme" }, [
                          _vm._v(
                            " Before you continue reading the module, please stop for a while and carry out the following activity. "
                          )
                        ]),
                        _c(
                          "div",
                          {
                            staticClass:
                              "note note-primary shadow-lg p-3 text-left rounded"
                          },
                          [
                            _c(
                              "blockquote",
                              { staticClass: "blockquote bq-info" },
                              [
                                _c("i", { staticClass: "fas fa-tools" }, [
                                  _vm._v(" Activity 2.4")
                                ]),
                                _c("br"),
                                _c("ol", [
                                  _c("li", [
                                    _vm._v(
                                      " Using your own words, explain why printed materials dominate most instructional situations in Swaziland schools. "
                                    )
                                  ]),
                                  _c("li", [
                                    _vm._v(
                                      " List the various non-projected media that we have discussed. What are the advantages of using each one of these non-projected visual media during instruction? "
                                    )
                                  ])
                                ])
                              ]
                            ),
                            _c("p", { staticClass: "text-justify meme" }, [
                              _c("i", [
                                _vm._v(
                                  " In your answer to question one, you need to explain why printed materials have continued to be used even when the new technologies have invaded the classrooms such as computers. Consider the advantages that we mentioned above."
                                ),
                                _c("br"),
                                _vm._v(
                                  " In your answer to question two, you could mention the fact that non-projected media do not require any hardware equipment, nor do they need electricity. They are readily available from the environment, from textbooks and cost very little money if they have to be bought. "
                                )
                              ])
                            ])
                          ]
                        )
                      ])
                    ]),
                    _c("br"),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive text-left",
                        attrs: { id: "item-3-2" }
                      },
                      [_vm._v("2.3.2 Projected media")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Projected media refers to media formats in which still images are enlarged and displayed on a screen for viewing. Projection of the image is achieved by passing a strong light through transparent film, magnifying the image through a series of lenses and then casting it onto a reflective surface. Among the projected media include; overhead projection, multi-image presentations, and computer image projection. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Overhead Projection")]),
                          _c("br"),
                          _vm._v(
                            " Overhead projection was once the most widely used audio-visual device in the classroom and in training. Computer projection (commonly PowerPoint) is widely used as well. Due to the fact that the image is large and you can manipulate or add to it while projecting, the overhead projector is versatile and can be used to communicate in every subject in the curriculum. A typical overhead projector is a simple device. Basically, it is a box with a large stage on top. For it to function, light from a powerful lamp inside the box is condensed by a special type of lens called "
                          ),
                          _c("kk", [_c("i", [_vm._v("'Fresnel lens'")])]),
                          _vm._v(
                            " and passes through a transparency placed on the stage. A transparency refers to the type of film used for overhead projection. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _vm._v(
                            " A transparency is made of photographic film that is capable of being imprinted with an image or text by means of chemical or heat process. The individual sheets of transparent film are called "
                          ),
                          _c("kk", [_c("i", [_vm._v('"acetates"')])]),
                          _vm._v(
                            " in reference to the chemical composition of the standard type of film used. Transparencies may be used either individually or might be made into a series of images consisting of a base visual with more transparencies added on top to form "
                          ),
                          _c("kk", [_c("i", [_vm._v("overlays")])]),
                          _vm._v(
                            ". Overlays refer to sheets of transparent film, each containing additional information, that is laid over the base transparency. Overlays could be used to explain complex processes in a step-by-step manner by flipping the overlays one at a time and adding additional details to the base visual. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _vm._v(
                            " During the projection, a lens-and-mirror system that is mounted on a bracket above the box turns the light beam at an angle of 90 degrees and then projects the image back over the shoulder of the presenter. This type of projection where light passes through the transparency is referred to as "
                          ),
                          _c("kk", [_c("i", [_vm._v("'trans-missive'")])]),
                          _vm._v(
                            " type. In the other type of projector, the light source is above the projector stage and shines down onto the transparency. The light is then reflected by a mirror-like surface beneath the transparency back up and through the lens system. This type is referred to as "
                          ),
                          _c("kk", [_c("i", [_vm._v("'reflective'")])]),
                          _vm._v(
                            " type. The reflective type of projector does not produce brilliant light and does not perform as well as the trans-missive type. However, it is portable, lighter, and more compact than the trans-missive type. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-center meme" },
                        [
                          _c("kk", [
                            _vm._v(
                              " Types of Overhead Projectors (adapted from Heinich et al.; 1996:141)"
                            )
                          ]),
                          _c("br"),
                          _c("br"),
                          _c("img", {
                            staticClass: "img-fluid",
                            attrs: {
                              src: require("../assets/over1.png"),
                              alt: "Responsive image"
                            }
                          }),
                          _c("br")
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-center meme" }, [
                        _c("br"),
                        _c("img", {
                          staticClass: "img-fluid",
                          attrs: {
                            src: require("../assets/over2.png"),
                            alt: "Responsive image"
                          }
                        }),
                        _c("br")
                      ]),
                      _c("br"),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [
                            _vm._v("Creating Overhead Transparencies")
                          ]),
                          _c("br"),
                          _vm._v(
                            " One of the advantages of the overhead projector is that the teacher and students can easily prepare their own transparencies. Some of the methods to use to prepare transparencies include; "
                          ),
                          _c("kk", [
                            _vm._v(
                              "direct drawing method and computer printing"
                            )
                          ]),
                          _vm._v(
                            ". The direct drawing method involves drawing directly onto a transparency sheet (write-on transparency) using a transparency-marking pen (overhead projector pen). Overheads created by computers have transformed the task of creating overhead transparencies with the use of any word processing software to prepare simple verbal overheads which can then be printed on plain paper to make a master copy for photocopying. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [
                            _vm._v("Advantages of the Overhead Projector")
                          ]),
                          _c("br"),
                          _vm._v(
                            " The overhead projector has the following advantages: "
                          ),
                          _c("ul", [
                            _c("li", [
                              _c("i", [_vm._v("Brightness")]),
                              _vm._v(
                                "- the lamp and the efficient optical system generates so much light on the screen that the overhead can be used with normal room lighting. "
                              )
                            ]),
                            _c("li", [
                              _c("i", [_vm._v("Eye contact")]),
                              _vm._v(
                                "- the projector is operated from the front of the room with the presenter facing the audience allowing direct eye contact to be maintained. "
                              )
                            ]),
                            _c("li", [
                              _c("i", [_vm._v("Ease of use")]),
                              _vm._v(
                                "- overhead projectors are easy to operate and portable. "
                              )
                            ]),
                            _c("li", [
                              _c("i", [_vm._v("Manipulability")]),
                              _vm._v(
                                "- projected materials can be manipulated by the presenter. For example, the presenter can add details, notes, diagrams, highlight with colour, etc. during presentation. "
                              )
                            ]),
                            _c("li", [
                              _c("i", [_vm._v("Self-prepared materials ")]),
                              _vm._v(
                                "- the teachers and students can easily prepare their own transparencies. "
                              )
                            ])
                          ])
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [
                            _vm._v("Limitations of using overhead projectors")
                          ]),
                          _c("br"),
                          _vm._v(
                            " Even though there are many advantaged of the overhead projector, there are limitations too. These may include: "
                          )
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _c("ul", [
                          _c("li", [
                            _vm._v(
                              " The effectiveness of overhead projection presentation depends heavily on the presenter. "
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              " Not self-instructional- overhead projection does not lend itself to independent study. It is mainly designed for large group presentation. "
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              " Production process required- to use the overhead system, the material has to be made into transparencies by means of some production process. "
                            )
                          ]),
                          _c(
                            "li",
                            [
                              _vm._v(
                                " Keystone effect- distortion of images is common with the overhead projector than with other projection systems. This distortion of image is referred to as "
                              ),
                              _c("kk", [
                                _c("i", [_vm._v("'keystone effect'")])
                              ]),
                              _vm._v(" (Heinich, et al, 1996:140-144). ")
                            ],
                            1
                          )
                        ])
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Computer Image projection")]),
                          _c("br"),
                          _vm._v(
                            " The computer is capable of using presentation graphics software to project computer images onto a screen. "
                          ),
                          _c("kk", [_c("i", [_vm._v("PowerPoint")])]),
                          _vm._v(
                            " is an example of presentation software used on a computer connected to a data projector. PowerPoint allows the user to include text, draw pictures, produce diagrams, import digital photographs, include music, and create animation. "
                          )
                        ],
                        1
                      ),
                      _c("div", { staticClass: "container meme" }, [
                        _c("div", { staticClass: "row" }, [
                          _c("div", { staticClass: "col" }, [
                            _c("img", {
                              staticClass: "img-fluid",
                              attrs: {
                                src: require("../assets/pp1.png"),
                                alt: "Responsive image"
                              }
                            }),
                            _c("br")
                          ]),
                          _c("div", { staticClass: "col" }, [
                            _c("img", {
                              staticClass: "img-fluid",
                              attrs: {
                                src: require("../assets/pp2.png"),
                                alt: "Responsive image"
                              }
                            }),
                            _c("br")
                          ])
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(" Powerpoint presentation ")
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _vm._v(" With the advent of digital imaging, "),
                          _c("kk", [_c("i", [_vm._v("digital projectors")])]),
                          _vm._v(
                            " have taken a firm hold in instruction. These computer output devices such as the "
                          ),
                          _c("kk", [_c("i", [_vm._v("data projector")])]),
                          _vm._v(
                            ", project digital images onto a projection screen, large monitor, or whiteboard so that they can be shared with a large group (Lever-Duffy et al; 2005). "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-center meme" },
                        [
                          _c("img", {
                            staticClass: "img-fluid",
                            attrs: {
                              src: require("../assets/projection.png"),
                              alt: "Responsive image"
                            }
                          }),
                          _c("br"),
                          _c("kk", [
                            _c("i", [_vm._v("Latest type of Projection")])
                          ])
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [
                            _vm._v("Steps for connecting a computer projector")
                          ]),
                          _c("ul", [
                            _c("li", [
                              _vm._v(
                                " Check the connector cables that came with the projector to see which kind of output it uses, such as DVI, VGA, S-Video, or USB. Check the ports on the back and front of your computer to make sure you have a corresponding port to the output cable. (Buy a conversion cable, such as S-Video to USB, if you do not have the correct type of port on your computer.) "
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                " Connect the conversion cable to the original cable. "
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                " Plug the AC power cord from the projector into a wall outlet. Power off your computer and make sure the projector is turned off. Plug the output cable from the projector to the appropriate port on your computer. "
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                " Turn the power on to the projector and point it towards an empty wall or projector screen. "
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                ' Wait for a prompt to appear on the screen asking for the type of device you are using. Use the remote that came with the projector to choose the option that either says "PC" or the name of the output jack such as "VGA." '
                              )
                            ])
                          ])
                        ],
                        1
                      ),
                      _c(
                        "div",
                        {
                          staticClass:
                            "note note-primary shadow-lg p-3 text-left rounded"
                        },
                        [
                          _c(
                            "blockquote",
                            { staticClass: "blockquote bq-info" },
                            [
                              _c("i", { staticClass: "fas fa-tools" }, [
                                _vm._v(" Activity 2.5")
                              ]),
                              _c("br"),
                              _vm._v(
                                " Using the Faculty of Education Audio Visual Lab, practice on how to connect a computer projector. "
                              )
                            ]
                          )
                        ]
                      )
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive text-left",
                        attrs: { id: "item-3-3" }
                      },
                      [_vm._v("2.3.3 Audio media ")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Audio media is rarely used during instruction yet students spend most of the time in class listening to the teacher. Therefore, as teachers we can develop students' listening skills by using the audio media. Audio media refers to the use of human voice and other sounds for instructional purposes (Gathu, 2000:43). Audio recordings can be prepared for group or individual listening and they can be used in a variety of ways. For example, a speech could be documented, a role-play or drama could be recorded, animal sounds could be recorded, and a meeting could also be verbally recorded. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Audio media could be used in different formats which include: "
                        ),
                        _c("ul", [
                          _c("li", [_vm._v("Compact discs (CD)")]),
                          _c("li", [_vm._v("MP3/MP4 players")]),
                          _c("li", [_vm._v("Mobile phones")]),
                          _c("li", [
                            _vm._v("Other digital electronic gadgets")
                          ]),
                          _c("li", [_vm._v("Podcasts ")])
                        ])
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [
                            _vm._v(
                              "Examples of audio media usage in the classroom"
                            )
                          ]),
                          _c("ol", [
                            _c("li", [
                              _vm._v(
                                " Recording different sounds and playing them back to the students "
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                " Learners recording their voices while reading paragraphs then listening for correctness of pronunciations, etc. "
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                " Students with hearing problems or with learning difficulties can revisit classroom presentations in any of the subjects taught in order to reinforce what was taught in class. "
                              )
                            ])
                          ])
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Compact Discs")]),
                          _c("br"),
                          _vm._v(
                            " A CD uses a tiny laser beam to retrieve the information from the disk. The CD allows us to store a lot of information. The instructor or students can selectively retrieve information from a CD since the digital storage format provides for random access of the data stored which means that you can directly go to and play any segment on a CD. To use the CD, you will need a CD player though most computers have a CD deck as part of the computer accessories. "
                          )
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Please note that once digitized, audio media can be delivered through the Internet. The Internet allows you to find and download very specific audio clips for use in your classroom. The increasing availability of Internet audio has resulted in it becoming an emerging audio technology in today's classroom. "
                        )
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive text-left",
                        attrs: { id: "item-3-4" }
                      },
                      [_vm._v("2.3.4 Motion media")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " These refer to those media formats where moving images can be recorded for playback and viewing by the audience. Both sound and visual (picture) are recorded. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Video media")]),
                          _c("br"),
                          _vm._v(" The word "),
                          _c("kk", [_vm._v("'video'")]),
                          _vm._v(" comes from Latin and it simply means, "),
                          _c("i", [_vm._v('"I see"')]),
                          _vm._v(
                            ". The primary meaning of video is the playing of moving images on a television type screen. Video images are recorded electronically on magnetic tape along with sound for playback. Any media format that uses a television screen or monitor to present a picture can be referred to as video (e.g. DVD). Originally, the concept of video was synonymous with broadcast television, but the concept has expanded dramatically in recent years. New technologies connected to television sets have been added such as home computers, video games and specialized cable TV services. There are different formats of video. Among them are: video files, videodiscs, and compact discs. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v(" Videodisc")]),
                          _c("br"),
                          _vm._v(" A newer type of video medium called "),
                          _c("kk", [_c("i", [_vm._v("'digital video disc'")])]),
                          _vm._v(
                            " (DVD) has rapidly replaced the video and laser discs. DVD is a compact disc format for displaying motion video, which offers truly digital, optical recording, storage, and playback of full-motion video. A DVD has the same physical size as an audio CD or CD-ROM but it can hold four times as much data as a CD or CD-ROM. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Digital Video Camera")]),
                          _c("br"),
                          _vm._v(
                            " The most common option for creating digital video recording is using a digital video camera. A digital video camera captures and stores the target image in a digital format that can be downloaded to a personal computer or laptop. Some newer cameras can create a DVD that can be played instantly on any playback device. The resultant video files can then be manipulated, edited, and enhanced using digital video editing software. A digital video camera allows you to record digital images on storage devices and later transfer to a computer or for playback on a television. The user can edit the video on the camera before processing (using the camera) for final play on other devices. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Current capabilities of video")]),
                          _c("br"),
                          _vm._v(
                            " Currently video is used in many ways. Gone are the times of video cassettes! DVD's and video files are used often. While DVD's are common, video files are easily manipulated and stored. For an example, video files can be emailed easily, can be stored on data bases, and can be played online (e.g. YouTube videos), "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Advantages of motion media")]),
                          _c(
                            "ul",
                            { staticStyle: { "list-style-type": "square" } },
                            [
                              _c("li", [
                                _c("i", [_vm._v(" Motion: ")]),
                                _vm._v(
                                  " Moving images have an obvious advantage over still visuals when portraying concepts where motion is essential to mastery. "
                                )
                              ]),
                              _c("li", [
                                _c("i", [_vm._v(" Processes:")]),
                                _vm._v(
                                  " Operations, such as assembly line steps or procedures where sequential movements are critical can be shown more effectively by means of motion media. "
                                )
                              ]),
                              _c("li", [
                                _c("i", [_vm._v(" Risk-free observation:")]),
                                _vm._v(
                                  " Visual recordings allow learners to observe phenomena that might be dangerous to view directly such as volcanic eruption, warfare, etc. "
                                )
                              ]),
                              _c("li", [
                                _c("i", [_vm._v(" Dramatization: ")]),
                                _vm._v(
                                  "Dramatic creations can bring historical events and personalities to life. It allows us to observe and analyze human interactions. "
                                )
                              ]),
                              _c("li", [
                                _c("i", [_vm._v(" Skill Learning: ")]),
                                _vm._v(
                                  " Mastery of physical skills requires repeated observation and practice. Through recorded media, performance can be viewed over and over again for emulation. "
                                )
                              ]),
                              _c("li", [
                                _c("i", [_vm._v("Affective Learning:")]),
                                _vm._v(
                                  " Due to their great potential for emotional impact, video and film can be used to shape personal and social attitudes. "
                                )
                              ]),
                              _c("li", [
                                _c("i", [_vm._v("Problem solving: ")]),
                                _vm._v(
                                  "Open-ended dramatizations are used to present unresolved confrontations, leaving it to viewers to discuss various ways of dealing with the problem (Heinich, et al., 1996:207). "
                                )
                              ])
                            ]
                          )
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Before you continue reading this module and in order to confirm that you have understood what we have discussed so far, please stop for a while and carry out the following activity. "
                        )
                      ]),
                      _c(
                        "div",
                        {
                          staticClass:
                            "note note-danger shadow-lg p-3 text-left rounded"
                        },
                        [
                          _c(
                            "blockquote",
                            { staticClass: "blockquote bq-danger" },
                            [
                              _c("i", { staticClass: "fas fa-microphone" }, [
                                _vm._v("Discussion "),
                                _c("br"),
                                _vm._v("Activity 2.6")
                              ]),
                              _c("br"),
                              _vm._v(
                                " Online Discussion - There is much discussion today about the role of computers in the classroom. The main point often brought up is that this technology overshadows all other instructional technologies (many of which we have described above). Do you think the computer will indeed replace these other technologies? Support your answer. "
                              )
                            ]
                          ),
                          _c("i", [
                            _vm._v(
                              " In answering the above question, you will need to consider the issue of media integration so that you bring out the idea of all these other media that we have discussed being combined with computer technology. You could then explain how the various technologies could be combined with computer technology so that the computer is not seen as replacing the other forms of media during instruction. "
                            )
                          ])
                        ]
                      )
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive text-left",
                        attrs: { id: "item-3-5" }
                      },
                      [
                        _vm._v(
                          "2.3.5 Computer based multimedia and hypermedia "
                        )
                      ]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Despite technological advances, education has changed very little in some parts of the world. Teachers still teach the same way they were taught and are comfortable using the tried-and-true strategies from which they learned. However, application of new technological tools makes many enhancements to these strategies possible (Lever-Duffy et al.; 2005). To overcome any possible resistance to using the computer, it is best to begin by becoming more familiar with computers. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-center meme" },
                        [
                          _c("img", {
                            staticClass: "img-fluid",
                            attrs: {
                              src: require("../assets/computers.png"),
                              alt: "Responsive image"
                            }
                          }),
                          _c("br"),
                          _c("kk", [
                            _c("i", [_vm._v("Computers in a Classroom")])
                          ])
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The computer has become one of the best instructional tools in today's classroom. The computer has the ability to control and integrate a wide variety of media, such as; still visuals, moving images or printed information. Computers perform tasks such as: complex calculations, data manipulation, word processing, and data presentation as well,. "
                        )
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "h4",
                      {
                        staticClass: "h4-responsive text-left",
                        attrs: { id: "item-3-5-1" }
                      },
                      [_vm._v("2.3.5.1 Role of computers in instruction ")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The computer can perform different functions. A computer can be an object of instruction, an instructional tool, and an instructional device. Let us look at these different functions of a computer in the classroom. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [
                            _c("i", [_vm._v("As an object of instruction")])
                          ]),
                          _c("br"),
                          _vm._v(
                            " You can offer computer literacy to your student where you teach them the basics of computing, including learning about data processing and analysis, computer hardware and software, creating files and storing information, etc. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [
                            _c("i", [_vm._v("As an instructional tool ")])
                          ]),
                          _c("br"),
                          _vm._v(
                            " You can also use the computer to serve the role of a typewriter for word processing and desktop publishing, to create other instructional media such as slides, to present information and data, to communicate with other people through e-mails, and as a source for data retrieval. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_c("i", [_vm._v("As a writing tool")])]),
                          _c("br"),
                          _vm._v(
                            " The computer is being used widely for word processing and desktop publishing. As teachers, we need to encourage our students to embrace the new technologies. Therefore, the more we promote usage of computers by students to write assignments, projects, and homework the more we promote its usage as a learning tool. We should even encourage the students to integrate media such as graphics, sound and motion into the content that they write. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_c("i"), _vm._v("For calculating ")]),
                          _c("br"),
                          _vm._v(
                            " The computer can also serve as a tool during instruction which can aid in solving complex mathematical calculations just as you use a pocket calculator. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [
                            _c("i", [
                              _vm._v("For toring and retrieving information")
                            ])
                          ]),
                          _c("br"),
                          _vm._v(
                            " Today's students need to learn how to manage information, to store, retrieve, sort, and organize information, and also to evaluate their findings (Heinich et al.; 1996:231). For inquiry and research, students can use "
                          ),
                          _c(
                            "i",
                            [
                              _c("kk", [_vm._v("databases")]),
                              _vm._v(
                                ", which are collections of related information organized for quick access to specific information "
                              )
                            ],
                            1
                          ),
                          _vm._v(
                            "(Heinich et al.; 1996:231). Whereas a telephone book for example is a printed database, we can have databases also stored on your computer. A database is a versatile and easy-to-learn computer tool that can be used for research, and for gathering information. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [
                            _c("i", [_vm._v("As an instructional device")])
                          ]),
                          _c("br"),
                          _vm._v(
                            " Computer assisted instruction helps students to learn specific skills. Students can use different software capable of providing them with complex tasks that can link them with real-world problems. Such software can provide students with opportunities for drill and practice "
                          ),
                          _c("i", [
                            _vm._v(
                              "practice (drill and practice is a method of teaching that presents a lengthy series of items to be rehearsed and it is used with skills that require repetitive practice for mastery),"
                            )
                          ]),
                          _vm._v(" tutoring "),
                          _c("i", [
                            _vm._v(
                              "(the computer plays the role of a teacher),"
                            )
                          ]),
                          _vm._v(" offer simulation to real-life situations "),
                          _c("i", [
                            _vm._v(
                              "(in a simulation, the learner confronts an approximation of a real-life situation to allow realistic practice without any risk or expenses otherwise involved)"
                            )
                          ]),
                          _vm._v(" making discoveries "),
                          _c("i", [
                            _vm._v(
                              "(a general term used to describe activities that are undertaken by students using an inductive approach to learning) "
                            )
                          ]),
                          _vm._v(" and solving problems. ")
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Since the focus of this sub-section is to discuss computer-based multimedia and hypermedia, let us now define these two terms and then discuss the range of computer-based media. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _vm._v(" The term "),
                          _c("kk", [_c("i", [_vm._v("multimedia")])]),
                          _vm._v(
                            " refers to any combination of two or more media formats that are integrated to form an informational or instructional programme. "
                          ),
                          _c("kk", [_c("i", [_vm._v("Computer multimedia")])]),
                          _vm._v(
                            " systems incorporate the computer as a display device, management tool, and /or source of text, pictures, graphics, and sound (Heinich et al.; 1996:260). Multimedia today is synonymous with a computer-based format that combines text, graphics, audio and even video into a single, coherent digital presentation. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _vm._v(
                            " More than presenting information in multiple formats, "
                          ),
                          _c("kk", [_c("i", [_vm._v(" Computer multimedia")])]),
                          _vm._v(
                            "integrate the multiple media into a structured programme in which each element complements the other. The term multimedia was coined in the 1950s to describe early combinations of various still and motion media "
                          ),
                          _c("kk", [
                            _c("i", [
                              _vm._v(
                                "('multiple media' or 'a combination media')"
                              )
                            ])
                          ]),
                          _vm._v(
                            " to increase educational effect. The term has now been adopted in connection with computers to refer to combinations of sound and images stored in different devices which are combined through computer software to form interactive programmes. Multimedia systems provide learning experiences to individuals and groups where multi-sensory involvement is emphasized. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _vm._v(" The term "),
                          _c("kk", [_c("i", [_vm._v("hypermedia")])]),
                          _vm._v(" refers to "),
                          _c("kk", [_c("i", [_vm._v("'linked media'")])]),
                          _vm._v(
                            ". Hypermedia are computer software that use elements of text, graphics, video, and audio that are connected in such a manner that the user can easily move within the information. Each user uses a pathway that is unique to his/her style of thinking and processing information. Hypermedia provides a learning environment that is interactive and exploratory. Hypermedia is based on cognitive theories of how people structure knowledge and how they learn. You have been introduced to the various theories of learning in your EDC 100 course. We also made reference to the learning theories in Unit 1 of this particular module. Please refer to the relevant section in Unit 1 and also to your "
                          ),
                          _c("kk", [
                            _vm._v("EDC 100 Teaching Principles and Practice")
                          ]),
                          _vm._v(
                            " course module to remind yourself on the cognitive learning theory. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _vm._v(
                            " Hypermedia is designed to resemble the way people organize information with concepts and their relationships. These relationships or "
                          ),
                          _c("kk", [_c("i", [_vm._v("links")])]),
                          _vm._v(
                            " are associations between ideas. For example, when you think about a bicycle, you create a link between ideas about transportation and recreation. With hypermedia, one can compose and display information that might include text, audio, and visual information. Using the example of the bicycle, the learner can connect the word 'bicycle' with a photograph of a girl riding a bicycle in the field. "
                          )
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Computer hypermedia systems can be used for different instructional purposes. Among them are: "
                        ),
                        _c("ul", [
                          _c("li", [
                            _c("i", [_vm._v("Browsing- ")]),
                            _vm._v(
                              "where users navigate through information by choosing routes that are of interest. "
                            )
                          ]),
                          _c("li", [
                            _c("i", [_vm._v("Linking-")]),
                            _vm._v(
                              "where users create their own special connections within the information. "
                            )
                          ]),
                          _c(
                            "li",
                            [
                              _c("i", [_vm._v("Authoring- ")]),
                              _vm._v(
                                "The process of creating multimedia or hypermedia is called "
                              ),
                              _c("kk", [_c("i", [_vm._v("authoring")])]),
                              _vm._v(
                                ". This is where users create their own unique collections of information by adding or linking text, graphics, and audio as they wish "
                              )
                            ],
                            1
                          )
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The most common application of hypermedia authoring in a classroom is when students develop hypermedia projects that allow students either as individuals or as groups to create reports that summarize major efforts as in the case of a science experiment. Instead of merely compiling a written report, students could include written work with pictures, sound clips, video and links to describe what they did. "
                        )
                      ]),
                      _c(
                        "div",
                        {
                          staticClass:
                            "note note-primary shadow-lg p-3 text-left rounded"
                        },
                        [
                          _vm._v(
                            " Let us pause for a little. Please carry out the following activity. "
                          ),
                          _c(
                            "blockquote",
                            { staticClass: "blockquote bq-info" },
                            [
                              _c("i", { staticClass: "fas fa-tools" }, [
                                _vm._v(" Activity 2.7")
                              ]),
                              _c("br"),
                              _c("ol", [
                                _c("li", [
                                  _vm._v(
                                    " Interview your colleagues to see how they think computers could affect their teaching. On the basis of the interviews conducted and based on your own views, what is your overall view about the role of computers in instruction? "
                                  )
                                ]),
                                _c("li", [
                                  _vm._v(
                                    " What is your view about the future of educational computing in Swaziland? "
                                  )
                                ])
                              ])
                            ]
                          )
                        ]
                      )
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive text-left",
                        attrs: { id: "item-3-6" }
                      },
                      [_vm._v("2.3.6 Social Media")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          ' In Unit 1 you were introduced to social media as an Internet-based form of communication. It is also commonly associated with Web 2.0 technology that focuses on integration, collaboration, and interaction. While you may collaborate or interact through social media platforms (e.g. Facebook and Twitter), Web 2.0 also allows collaboration through teaching and learning. Some of these media may be termed "Participative Delivery Systems." In this case participants are the major authors as they create the content and supporting materials. Some of these technologies include Wikis and Blogs. '
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _c("i", [
                          _vm._v("Collaborative/Participative technologies")
                        ]),
                        _vm._v(
                          " offer a range of new ways that support learning by enabling learners to share and exchange both ideas and their own digital products. The technologies provide opportunities for building tools not only for authoring interactive multimedia content, but also for enhancing readers' experience beyond multi-media presentation, for example, through sharing comments, in-book search, browsing, skimming, visualisation, summarisation, and non-linear reading. Below are some participative tools we can use. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Google Docs (docs.google.com)")]),
                          _c("br"),
                          _vm._v(
                            " Google Docs is a lightweight Web-based suite of office applications that includes a "
                          ),
                          _c("i", [
                            _vm._v("word processor, a presentation tool")
                          ]),
                          _vm._v(
                            ", and a spread sheet tool. With this tool, you can create, edit and share documents online. The three Google Docs tools support "
                          ),
                          _c("i", [_vm._v("multiple authors")]),
                          _vm._v(
                            " editing the same document, presentation, or spread sheet at the same time, tracking revisions and showing, near real time, what each author is doing. Because the documents are stored online, they are available on any computer connected to the Internet. Import and export options allow one to upload Word docs, Excel, PowerPoint and PDFs and output back in the same format. One can also quickly publish what has been created online with a click of a button. "
                          )
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Students can use Google Docs to coordinate group work, including group papers. Instructors can easily monitor individual contributions using Docs's revision tracking tools. Likewise, facilitators can simplify collaborative paper writing with colleagues by sharing the same document with multiple authors without the worry of coordinating various individual versions. Google Docs is free for anyone to use. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Skype (www.skype.com)")]),
                          _c("br"),
                          _vm._v(
                            " Skype is a powerful video and voice application. Wikipedia describes Skype as a software application that allows users to make telephone calls over the Internet. In addition to making telephone calls, users can use Skype to: "
                          ),
                          _c("ol", [
                            _c("li", [
                              _vm._v(
                                "Make video calls (can actually see each other no matter how far apart you can be, "
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                "Engage in video conferencing (e.g. listen to a lecture and be able to ask and answer questions)"
                              )
                            ]),
                            _c("li", [_vm._v("Send instant messages, and ")]),
                            _c("li", [
                              _vm._v(
                                "Transfer files from one computer to another"
                              )
                            ])
                          ])
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Skype is best known for its ability to let people make free calls from one computer to another-anywhere in the world. While most calls are free (depending on the service options one selects) when they are made to other computers, calls can also be made to mobile devices or landlines for a fee. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Skype can be used as a means to connect users from around the world. This free and easy to use application can connect colleagues, students and researchers all within a web browser. So whether it is for office hours or to help students complete group work online, Skype is a great tool for any educator. The best thing about Skype is the ability to make free phone calls (with or without video). "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(" Some limitations of Skype however are that: "),
                        _c("ol", [
                          _c("li", [
                            _vm._v(
                              "It does not support emergency calls (i.e., 911), "
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              "Calls may be dropped from time to time (depending on your internet speed), and "
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              "Some organizations might block the use of Skype on their network. "
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              "The cost of Skype varies depending on use. However, basic computer-to-computer phone calls can be made for free."
                            )
                          ])
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " There are many reasons for using Skype in education. They include: "
                        ),
                        _c("ol", [
                          _c("li", [
                            _c("i", [_vm._v("Virtual field trips: ")]),
                            _vm._v(
                              " trips that are not possible due to financial reasons or distance can still be taken using Skype to transport learners to another country or area. "
                            )
                          ]),
                          _c("li", [
                            _c("i", [_vm._v("Interviewing: ")]),
                            _vm._v(
                              "connecting with and speaking to an author or celebrity can bring classroom theory alive and make it real for learners. "
                            )
                          ]),
                          _c("li", [
                            _c("i", [
                              _vm._v("Homework help or extra lessons: ")
                            ]),
                            _vm._v(
                              " teachers can offer help with homework, long-term projects or give extra lessons to learners who are lagging through Skype. "
                            )
                          ]),
                          _c("li", [
                            _c("i", [_vm._v("Guest appearances: ")]),
                            _vm._v(
                              "guest teachers or experts on a subject can teach learners through Skype or give an explanation directly from their work environment. "
                            )
                          ]),
                          _c("li", [
                            _c("i", [_vm._v("Illness: ")]),
                            _vm._v(
                              "learners who are hospitalized or who suffer from long-term illnesses and are schooled at home or hospital can also benefit by being included in lessons through the Skype platform. "
                            )
                          ])
                        ])
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Skype Requirements")]),
                          _c("br"),
                          _vm._v(
                            " For Skype to work, the software must be installed in your computer, laptop, notebook, tablet or mobile phone. The person you want to communicate with must also have Skype installed in their gadgets. In this course you will have a chance to experience Skype when all the necessary requirements are in-place. However, through instructions on the course website, you should be able to experiment with other learners who have Skype installed on their gadgets. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("YouTube (www.youtube.com)")]),
                          _c("br"),
                          _vm._v(
                            " YouTube is a video sharing website that enables users to upload video clips to the Web. Videos uploaded to YouTube can be accessed and viewed by a select group of users or open for anyone to view. Users can also view, comment, rate, embed, and link to their videos as well as the millions of other videos posted to the site. Signing up for YouTube is free and easy. Further, even if you do not plan to upload your own videos, signing up for an account enables you to bookmark your favourites and to create playlists. "
                          )
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " YouTube has become one of the largest repositories for video on the Internet, making it a great resource for educators. Staff and students can often find dozens, if not hundreds, of videos about the topics of their choice. YouTube has partnered with several universities and launched YouTube EDU focusing on university related videos and lectures. YouTube is also a great tool for creating personalized content allowing faculty to record lectures, introductions, and commentary. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The benefits of YouTube is that it is free, easy to use, supports high definition (HD) content and users can set their videos to public or private. The only major drawback of YouTube is that it limits users to uploading videos that are 1 GB or less than 10 minutes in length. One other minor drawback is that a video can be removed from YouTube at any time throughout the semester. YouTube is free and does not cost anything to use. "
                        )
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "h4",
                      {
                        staticClass: "h4-responsive text-left",
                        attrs: { id: "item-3-6-1" }
                      },
                      [_vm._v("2.3.6.1 Other capabilities of Social Media")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Social media platforms also allow users to have conversations, share information and create web content. There are many forms of social media, including blogs, micro-blogs, wikis, social networking sites, photo-sharing sites, instant messaging, video-sharing sites, podcasts, widgets, virtual worlds, and more. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " There are many ways in which information is conveyed from one person to the other. In the teaching/leaning process communication through social media is vital and its roles are numerous. Firstly it serves the purpose of the ease of learning. It provides learners with a situation where knowledge is abundantly available. Visuals help in adding meaning to words. As it is widely known in teaching, leaners understand better when they see and touch something. So when you explain abstract ideas then bring in a projector to show them what you mean, it helps to add the element of reality as they are seeing the object in front of them. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Social media is used as extensions of our efforts to communicate with students. Research shows that a major percentage (83%) of what people learn is derived through the sense of sight. Social media are also used to support instructional activities like feedback to students' work, visualisation of a lesson, transferring of abstract concepts to concrete objects, and presentation of new content. Media also helps learners to overcome physical limitations, improves the quality of learning and assists to provoke learners to change attitude of mind. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-center meme" },
                        [
                          _c("img", {
                            staticClass: "img-fluid",
                            attrs: {
                              src: require("../assets/social.png"),
                              alt: "Responsive image"
                            }
                          }),
                          _c("br"),
                          _c("kk", [
                            _c("i", [
                              _vm._v(
                                "Graphic showing different types of Social Media"
                              )
                            ])
                          ])
                        ],
                        1
                      ),
                      _c(
                        "div",
                        {
                          staticClass:
                            "note note-primary shadow-lg p-3 text-left rounded"
                        },
                        [
                          _c(
                            "blockquote",
                            { staticClass: "blockquote bq-info" },
                            [
                              _c("i", { staticClass: "fas fa-tools" }, [
                                _vm._v(" Activity 2.8")
                              ]),
                              _c("br"),
                              _vm._v(
                                " Conduct an Internet search and report the uses of social media in the classroom "
                              )
                            ]
                          )
                        ]
                      )
                    ]),
                    _c("br"),
                    _c(
                      "h5",
                      {
                        staticClass: "h5-responsive text-left",
                        attrs: { id: "item-3-6-1-1" }
                      },
                      [_vm._v("2.3.6.1.1 Wiki")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " A wiki is a type of free online writing space that allows users to add, modify and update its pages. If something is missing or incorrect in a wiki and permissions allow you to edit the wiki, you can easily add your thoughts or make changes to the wiki. It is essentially a fully editable web site. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Wikis can be used effectively by instructors for posting course information or lecture notes and inviting participation from learners. Notes can be distributed in the form of simple text, PowerPoint slides, or audio and video components. Learners can participate by adding their own notes and comments along with relevant links that they may have found. One can also create a discussion environment for a particular topic. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Learners or groups of learners can be invited to create their own wiki, either with personal information or project information related to the topics being studied. Wikis can also be used as e-portfolios of learners' work for evaluation by the instructor. Brainstorming activities can be especially powerful using a wiki, and Frequently Asked Questions (FAQ) pages are also possible. "
                        )
                      ]),
                      _c(
                        "div",
                        {
                          staticClass:
                            "note note-primary shadow-lg p-3 text-left rounded"
                        },
                        [
                          _c(
                            "blockquote",
                            { staticClass: "blockquote bq-info" },
                            [
                              _c("i", { staticClass: "fas fa-tools" }, [
                                _vm._v(" Activity 2.9")
                              ]),
                              _c("br"),
                              _vm._v(
                                " On the course website, participate in the Wiki activity by entering new information and responding to other student's submissions. The topic will be the uses of ICT's in the classroom. "
                              )
                            ]
                          )
                        ]
                      )
                    ]),
                    _c("br"),
                    _c(
                      "h5",
                      {
                        staticClass: "h5-responsive text-left",
                        attrs: { id: "item-3-6-1-2" }
                      },
                      [_vm._v("2.3.6.1.2 Blogs")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " A blog is a website on which an individual or group of users record opinions, information, etc. on a regular basis. While there are many uses of blogs, the actual art of doing it (blogging) is educationally sound for facilitating to learners because: "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _c(
                          "ul",
                          { staticStyle: { "list-style-type": "square" } },
                          [
                            _c("li", [
                              _vm._v(
                                " Blogs provide a space for sharing opinions and learning in order to grow communities of discourse and knowledge; a space where learners and facilitators can learn from each other. "
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                " Blogs help learners to see knowledge as interconnected as opposed to a set of discrete facts. "
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                " Blogs can give learners a totally new perspective on the meaning of voice. As they explore their own learning and thinking, their distinctive voices emerge. "
                              )
                            ]),
                            _c("li", [
                              _vm._v(" Blogs foster ownership and choice. ")
                            ]),
                            _c("li", [
                              _vm._v(
                                " They help lead us away from learners trying to find what the facilitator wants in terms of an answer. "
                              )
                            ])
                          ]
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Below are steps to assist you to create your own personal blog. The link below is currently working. In-case there are problems with the link, a new one will be posted on the course webpage. "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Steps to creating your blog")]),
                          _c("ol", [
                            _c("li", [
                              _vm._v(" Go to "),
                              _c(
                                "a",
                                { attrs: { href: " http://www.blogger.com" } },
                                [_vm._v(" http://www.blogger.com")]
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                ' Click where it says "Create Your Blog Now" '
                              )
                            ]),
                            _c("li", [
                              _vm._v(" Fill in a "),
                              _c("i", [_vm._v("user name.")]),
                              _vm._v(
                                " This can be anything you want - it is what you will use to sign in to your blog "
                              )
                            ]),
                            _c("li", [
                              _vm._v(" Select a "),
                              _c("i", [_vm._v("password")]),
                              _vm._v(
                                ". This must be at least 6 characters long. Try to use a combination of numbers and letters, and think of something that others will not be able to easily guess. "
                              )
                            ]),
                            _c("li", [
                              _vm._v(" Select a "),
                              _c("i", [_vm._v("display name")]),
                              _vm._v(
                                ". This will be used to sign your blog posts, so choose something that will protect your identity! It is recommended that you refrain from using your first and last name, or, if you can be easily located with your first name, choose a name that is somewhat disguising "
                              )
                            ]),
                            _c("li", [
                              _vm._v(" Enter an "),
                              _c("i", [_vm._v("e-mail address")]),
                              _vm._v(
                                ". You will need this to register, and later on you can change your preferences so this won't appear on your blog in clear sight of visitors. Consider setting up a separate e-mail account for your blog - this helps protect you from online predators. "
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                " Read the terms of service, and then click the box indicating you have done so. "
                              )
                            ]),
                            _c("li", [_vm._v(" Click continue ")]),
                            _c("li", [
                              _vm._v(" Give your blog a "),
                              _c("i", [_vm._v("title")]),
                              _vm._v(
                                ". This is what will show at the top of your blog page. "
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                " Choose a web address for your blog space. This will be displayed in the address bar as "
                              ),
                              _c(
                                "a",
                                {
                                  attrs: {
                                    href:
                                      " http://yourblogspacename.blogspot.com"
                                  }
                                },
                                [
                                  _vm._v(
                                    "http://yourblogspacename.blogspot.com"
                                  )
                                ]
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                " Choose a template. Select from the templates the way you would like your blog to look. If you don't like any of the templates you see, just select one to get started. You can change or customize it later. "
                              )
                            ])
                          ])
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Once your blog has been created, you are ready to change your personal profile and begin posting! "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Posting on your blog ")]),
                          _c("ol", [
                            _c("li", [
                              _vm._v('Click on "'),
                              _c("u", [_vm._v("Start Posting")]),
                              _vm._v('" once your blog has been created.')
                            ]),
                            _c("li", [
                              _vm._v("Create a "),
                              _c("i", [_vm._v("title")]),
                              _vm._v(
                                " for your first posting and write your first post in the text box."
                              )
                            ]),
                            _c("li", [
                              _vm._v('Click "'),
                              _c("u", [_vm._v("Publish Post")]),
                              _vm._v(
                                '" Publishing your post will make it live on your blog and visible on the Web.'
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                " Each time you add a new post to your blog, you have to publish it before it goes up on the Web ("
                              ),
                              _c(
                                "a",
                                {
                                  attrs: { href: "https://www.contentbank.org" }
                                },
                                [_vm._v("www.contentbank.org")]
                              ),
                              _vm._v("). ")
                            ])
                          ]),
                          _vm._v(
                            " Congratulations for having created your blog. More tasks on how to proceed with your blog will be posted on the course website. We now continue our discussion by looking at Mobile Learning (ML). "
                          )
                        ],
                        1
                      )
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive text-left",
                        attrs: { id: "item-3-7" }
                      },
                      [_vm._v("2.3.7 Mobile learning technologies")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Students these days are very comfortable with technology; computer games, iPhones and iPods. To them it is more of an accessory than a necessity, an extension of themselves if you like. With the availability of applications, a mobile becomes a multifunction device-useful tool. Having portable technology at your fingertips, certainly would transform the way teachers teach and students learn. Students now are able to carry a whole library of reference material in their pockets with them anywhere. Applications help organise student's life and become useful study tools anywhere anytime."
                        ),
                        _c("br"),
                        _c("br"),
                        _vm._v(
                          " According to Wikipedia, M-Learning or mobile learning has different meanings for different communities. Mobile learning could be "
                        ),
                        _c("i", [
                          _vm._v(
                            " any sort of learning that happens when the learner is not at a fixed, predetermined location, "
                          )
                        ]),
                        _vm._v("or it can be "),
                        _c("i", [
                          _vm._v(
                            " learning that happens when the learner takes advantage of learning opportunities offered by mobile technologies "
                          )
                        ]),
                        _vm._v(
                          ". What this means is that mobile learning decreases limitation of learning location with the mobility of general portable devices. "
                        )
                      ]),
                      _c(
                        "div",
                        { staticClass: "text-center" },
                        [
                          _c("img", {
                            staticClass: "img-fluid",
                            attrs: {
                              src: require("../assets/devs.png"),
                              alt: "Responsive image"
                            }
                          }),
                          _c("br"),
                          _c("kk", [
                            _c("i", [_vm._v("Examples of Mobile Technologies")])
                          ])
                        ],
                        1
                      ),
                      _c("br"),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Mobile learning or M-learning can also be viewed as any form of learning that happens when mediated through a mobile device, and a form of learning that has established the legitimacy of 'nomadic' learners (Alexander, 2004). Duncan (2010) states that: \"In the 21st century, students must be fully engaged. This requires the use of technology tools and resources, involvement with interesting and relevant projects, and learning environments-including online environments-that are supportive and safe.... In the 21st century, educators must be given and be prepared to use technology tools; they must be collaborators in learning-constantly seeking knowledge and acquiring new skills along with their students.\""
                        ),
                        _c("br"),
                        _vm._v(
                          " Arne Duncan, U.S. Secretary of Education March 3, 2010 "
                        )
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Application of M-Learning")]),
                          _c("br"),
                          _vm._v(
                            " While there are new developments on a daily basis on the use of technology and in-particular mobile learning, any of the following can be applied using mobile technology. "
                          ),
                          _c("ol", [
                            _c("li", [
                              _vm._v(
                                "They can deliver the education or training."
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                "They foster communication and/or collaboration between learners and facilitators"
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                "They can be used to assess or perform evaluations."
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                "They allow individuals to access to performance support and/or knowledge support."
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                "They may be used to capture evidence of learning activity."
                              )
                            ])
                          ])
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " With M-Learning, students can access resources online, they can chat and participate in discussion forums, and based on the capability of the gadget, can also send and receive assignments and download them to their standalone computer. This technology has also made it possible for individuals or learners to access programmes that make it easier to participate as a learner or just networking with other people, family and friends. This phenomenon is discussed next. "
                        )
                      ])
                    ])
                  ]),
                  _c("br"),
                  _c("br"),
                  _c("mdb-row", [
                    _c(
                      "h2",
                      {
                        staticClass: "h2-responsive text-left",
                        attrs: { id: "item-4" }
                      },
                      [_vm._v("2.4 Trends in Media Technologies")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c(
                        "p",
                        { staticClass: " text-justify meme" },
                        [
                          _vm._v(
                            " Technology is very crucial and essential in teaching and learning. New technologies may refer to advanced and upgraded modes of learning that you as a teacher may use to encode messages or content to the learner. These new technologies include Internet connected laptops, computers, audio visuals, smart phones, tablets, projectors, etc. which can be used in teaching and learning. This range of implements can aid in extension of efforts to deliver information and further facilitate proper, better, and easy learning strategies."
                          ),
                          _c("br"),
                          _c("br"),
                          _vm._v(
                            " New technologies may also favour learners who are dispersed to learn wherever they are at affordable costs. Students may not have to travel from their places of residence to institutions or learning centres for face to face sessions with lecturers. They may learn online and submit their assignments there. The new technologies can therefore be a key mediator between the teacher and the learner to convey messages and exchange them. Simulation, enactive and symbolic experiences can be integral in this relation to teaching and learning when technologies are used."
                          ),
                          _c("br"),
                          _vm._v(
                            " The new technology therefore is very important in learning because these new technologies such as I Pads, electronic readers, smart boards and handheld dictionaries can present information in many different ways. It can present information visually, orally, and in different colours so that every learner can benefit and learn through these new technologies."
                          ),
                          _c("br"),
                          _c("br"),
                          _vm._v(
                            " On the other hand, Educational Technology as a field of study continues to grow and evolve (Newby et al.; 2006). Today, we see a number of trends that will help educators project where the field is headed for the future. One of these developments is the Internet."
                          ),
                          _c("br"),
                          _c("br"),
                          _c("i", [_vm._v("The growth of the Internet")]),
                          _vm._v(
                            ": Today, we live in an era of global computer interconnectivity that brings a whole world of information to the personal computer user through computer networking and telecommunication. By accessing the Internet, one can instantly locate up-to-date information, communicate with others and explore the far corners of cyberspace (Newby et al.; 2006:58). This has created what is referred to as "
                          ),
                          _c("kk", [
                            _c("i", [_vm._v("'information superhighway'")])
                          ]),
                          _vm._v(
                            ". Information superhighways can deliver vast amounts of information to individuals at school, work and home."
                          ),
                          _c("br"),
                          _c("br"),
                          _vm._v(" The "),
                          _c("kk", [_c("i", [_vm._v("Internet")])]),
                          _vm._v(
                            " is the vast collection of computer networks that links millions of computers and tens of millions of people worldwide. Computers on the Internet are linked together by a maze of interconnections sort of like a spider's web. This web is composed of many separately administered computer networks with many different computers linked together."
                          ),
                          _c("br"),
                          _c("br"),
                          _c("kk", [_vm._v("Uses of the Internet")]),
                          _c("br"),
                          _c("kk", [_vm._v("Electronic mail (e-mail)")]),
                          _c("br"),
                          _vm._v(" Communication in the form of "),
                          _c("kk", [
                            _c("i", [_vm._v(" electronic mail (e-mail) ")])
                          ]),
                          _vm._v(
                            " is one of the most widespread applications of communication via Internet. E-mail for example, allows messages to be sent from one individual to the other or from individual to groups. A major advantage with the e-mail is that it allows you to send even huge files and documents as enclosures called "
                          ),
                          _c("kk", [_c("i", [_vm._v("'attachments'")])]),
                          _vm._v(
                            " and you can send the same information to different people spread in different parts of the world."
                          ),
                          _c("br"),
                          _c("br"),
                          _c("kk", [_vm._v("The World Wide Web")]),
                          _c("br"),
                          _vm._v(
                            " Information retrieval is another use of the Internet especially for education. The "
                          ),
                          _c("kk", [
                            _c("i", [_vm._v(" World Wide Web (WWW) ")])
                          ]),
                          _vm._v(
                            " consists of millions of sites with information displayed in hypermedia format as it supports formatted text, graphics, animation and even audio and video."
                          ),
                          _c("br"),
                          _c("br"),
                          _vm._v(
                            " Countless information resources (including text, graphics, sound, and video) are stored on computers all over the world in documents called "
                          ),
                          _c(
                            "i",
                            [_c("kk", [_vm._v("web pages. A web site")])],
                            1
                          ),
                          _vm._v(
                            " is a collection of web pages that are maintained by an organization, school, university, government agency, company or individual. Each web page has a unique Internet address called a "
                          ),
                          _c("kk", [
                            _c("i", [
                              _vm._v(" Uniform Resource Locator (URL) ")
                            ])
                          ]),
                          _c("br"),
                          _c("br"),
                          _vm._v(
                            ". Through the World Wide Web, a teacher can find information on any topic and subject. This is making it possible for teachers and students to access the most current information on any subject and topic without having to rely on textbooks. This has completely revolutionized the way we access information. As teachers and students, we can now create our own website where we can upload information for students to access without having to print it for them. To access the web, you need to use a software programme known as a "
                          ),
                          _c("kk", [_c("i", [_vm._v("browser")])]),
                          _vm._v(
                            ". A browser allows you to navigate the web and control how web pages are displayed. Popular web browsers include; "
                          ),
                          _c("kk", [
                            _c("i", [
                              _vm._v(
                                " Microsoft Internet Explorer, Netscape Navigator and Mozilla Firefox. "
                              )
                            ])
                          ]),
                          _c("br"),
                          _c("br"),
                          _c("kk", [_vm._v("Distance learning")]),
                          _c("br"),
                          _vm._v(
                            " One of the greatest advantages offered by modern electronic technology is the ability to instruct and to communicate with people who are not physically present in the same room/venue and at the same time. Today, "
                          ),
                          _c("kk", [_c("i", [_vm._v("distance learning")])]),
                          _vm._v(
                            " has become a popular term to describe learning via Internet. Distance learning is characterized by physical separation between the teacher and the learners, an organized instructional programme, use of technological media, and a two-way communication. As a result, most distance learning programmes use a wide variety of media configurations including; radio, telephone, television, and computers."
                          ),
                          _c("br"),
                          _c("br"),
                          _c("kk", [_vm._v("Wireless technologies")]),
                          _vm._v(
                            " are making it possible for people to use computers and the Internet without being connected to a wired connection. Below is a discussion on wireless technology . "
                          )
                        ],
                        1
                      )
                    ]),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive text-left",
                        attrs: { id: "item-4-1" }
                      },
                      [_vm._v("2.4.1 Wireless technology: What is it? ")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Wireless data is advancing at a good speed as more companies introduce more features for consumers and business users alike. From ring tones to picture phones, from text messaging to hi-speed wireless Web browsing, wireless data is making waves in both the consumer and business marketplaces. Wi-Fi or Wireless Fidelity refers to the "
                        ),
                        _c("i", [
                          _vm._v(
                            " technology surrounding the radio transmission of internet protocol data from an internet connection wirelessly to a host computer. "
                          )
                        ])
                      ]),
                      _c(
                        "div",
                        { staticClass: "text-center" },
                        [
                          _c("img", {
                            staticClass: "img-fluid",
                            attrs: {
                              src: require("../assets/pad.png"),
                              alt: "Responsive image"
                            }
                          }),
                          _c("br"),
                          _c("kk", [_c("i", [_vm._v("An I pad")])])
                        ],
                        1
                      ),
                      _c("br"),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Many of the new laptops and other technological gadgets on the market now come with wireless technology. They include Tablets, I pads and Smart Phones. This technology can be quite user friendly to remote areas provided they are facilitated. Wi-Fi networks use radio technologies called IEEE 802.11b or 802.11a to transmit data from the internet connection to the host computer (e.g. your laptop). These technologies provide reliable and fast wireless connectivity and to some degree a level of security. A Wi-Fi network can be used to connect computers to each other, to the Internet, and to wired networks. "
                        )
                      ]),
                      _c(
                        "p",
                        {
                          staticClass: " note note-secondary text-justify meme"
                        },
                        [
                          _vm._v(
                            " Do you recall the discussion in subsection 2.3.10 (Mobile Learning Technologies) in this unit? Wireless technology enables mobile learning to take place. People can learn while on the move. Just like how you are able to access Facebook and Twitter on your mobile phone or other gadgets, you can also access learning programmes/materials in the same manner. "
                          )
                        ]
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " We have come to the end of the unit. It is anticipated that you had a good experience on what was presented. Below is a summary of the unit. "
                        )
                      ])
                    ])
                  ]),
                  _c("br"),
                  _c("br"),
                  _c("mdb-row", [
                    _c("div", { staticClass: "note note-success meme" }, [
                      _c(
                        "blockquote",
                        { staticClass: "blockquote bq-success" },
                        [
                          _c(
                            "h1",
                            {
                              staticClass: "text-left",
                              attrs: { id: "item-5" }
                            },
                            [
                              _c("i", { staticClass: "fas fa-folder-open" }, [
                                _vm._v("Unit summary")
                              ])
                            ]
                          ),
                          _c("p", { staticClass: "text-justify" }, [
                            _vm._v(
                              " In this unit, we started by defining the term 'media'. We then went on to discuss the role of media in teaching and learning. We identified different media that we could use for teaching and learning and discussed them in detail. This brought us to the conclusion of the unit whereby we examined the trend in media and technology and noted that the current trend is for the various media to merge together through the computer. This in essence means that as teachers we need to be computer literate and we should embrace computer technology if we are to be effective in our use of media during instruction. "
                            )
                          ])
                        ]
                      )
                    ]),
                    _c("br"),
                    _c("hr"),
                    _c("div", { staticClass: "note note-warning meme" }, [
                      _c(
                        "blockquote",
                        { staticClass: "blockquote bq-warning" },
                        [
                          _c(
                            "h1",
                            {
                              staticClass: "text-left",
                              attrs: { id: "item-6" }
                            },
                            [
                              _c("i", { staticClass: "fas fa-medal" }, [
                                _vm._v(" Assignment")
                              ])
                            ]
                          ),
                          _c("ol", [
                            _c("li", [
                              _c("i", [
                                _vm._v(
                                  " Do you think enough emphasis is placed on the use of computers for classroom teaching and learning in Swaziland? Support your answer. "
                                )
                              ]),
                              _vm._v(
                                " [5 marks for arguments; 5 marks evidence/support of response] "
                              )
                            ]),
                            _c("li", [
                              _c("i", [
                                _vm._v(
                                  " Imagine that your school has been given a donation to improve the use of instructional media in the school. How would you spend the money to best equip the school for teaching and learning? Justify the choice of media that you would purchase. "
                                )
                              ]),
                              _vm._v(
                                " [10 marks for choice and justification of media; 5 marks for budget]. "
                              )
                            ])
                          ])
                        ]
                      )
                    ]),
                    _c("hr"),
                    _c("br"),
                    _c("div", { staticClass: "note note-secondary meme" }, [
                      _c(
                        "blockquote",
                        { staticClass: "blockquote bq-secondary" },
                        [
                          _c(
                            "h1",
                            {
                              staticClass: "text-left",
                              attrs: { id: "item-7" }
                            },
                            [
                              _c("i", { staticClass: "fas fa-" }, [
                                _vm._v(" References")
                              ])
                            ]
                          ),
                          _c(
                            "p",
                            { staticClass: "text-justify" },
                            [
                              _vm._v(" Bruner, J.S. (1966). "),
                              _c(
                                "i",
                                [
                                  _c("kk", [
                                    _vm._v("Towards a Theory of Instruction")
                                  ])
                                ],
                                1
                              ),
                              _vm._v(
                                ". Cambridge, MA: Harvard University Press."
                              ),
                              _c("br"),
                              _c("br"),
                              _vm._v(" Dale, E. (1969). "),
                              _c("kk", [
                                _vm._v("Audio-Visual Methods in Teaching")
                              ]),
                              _vm._v(", 3"),
                              _c("sup", [_vm._v("rd")]),
                              _vm._v(
                                " Edition, New York: Holt, Rinehart and Winston."
                              ),
                              _c("br"),
                              _c("br"),
                              _vm._v(" Erickson, C.W.H; & Curl, D.H. (1972)."),
                              _c("kk", [
                                _vm._v(
                                  " Fundamentals of Teaching with Audiovisual Technology "
                                )
                              ]),
                              _vm._v(
                                ". New York: Macmillan Publishing Co.; Inc."
                              ),
                              _c("br"),
                              _c("br"),
                              _vm._v(" Gathu, K. (2000). "),
                              _c("kk", [
                                _vm._v("Materials Development Module")
                              ]),
                              _vm._v(
                                ". Kwaluseni: Institute of Distance Education, University of Swaziland."
                              ),
                              _c("br"),
                              _c("br"),
                              _vm._v(
                                " Heinich, R.; Molenda, M.; Rusell, J.D.; & Smaldino, S.E (1996). "
                              ),
                              _c("kk", [
                                _vm._v(
                                  " Instructional Media and Technologies for Learning "
                                )
                              ]),
                              _vm._v(". 5"),
                              _c("sup", [_vm._v("th")]),
                              _vm._v(
                                " Edition. New Jersey: Prentice Hall, Inc."
                              ),
                              _c("br"),
                              _c("br"),
                              _vm._v(
                                " Lever-Duffy, J.; McDonald, J.B.; Mizell, A.P. (2005). "
                              ),
                              _c("kk", [
                                _vm._v("Teaching and Learning with Technology")
                              ]),
                              _vm._v(". 2"),
                              _c("sup", [_vm._v("nd")]),
                              _vm._v(" Edition. New York: Allyn and Bacon."),
                              _c("br"),
                              _c("br"),
                              _vm._v(
                                " Newby, T.J.; Stepich, D.A.; Lehman, J.D.; & Russell, J.D. (2006). "
                              ),
                              _c("kk", [
                                _vm._v(
                                  " Educational Technology for Teaching and Learning. "
                                )
                              ]),
                              _vm._v(
                                " Upper Saddle River, New Jersey: Pearson Education, Inc.,"
                              ),
                              _c("br"),
                              _c("br"),
                              _vm._v(" Sampath, K (1981). "),
                              _c("kk", [
                                _vm._v(
                                  " Introduction to Educational technology "
                                )
                              ]),
                              _vm._v(". New Delhi: Sterling Publisher"),
                              _c("br"),
                              _c("br")
                            ],
                            1
                          )
                        ]
                      )
                    ])
                  ])
                ],
                1
              )
            ],
            1
          )
        ])
      ])
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-sm-4 col-lg-3" }, [
      _c(
        "nav",
        {
          staticClass: "navbar navbar-light sticky-top flex-column mt-4",
          attrs: { id: "navbar-example3" }
        },
        [
          _c("a", { staticClass: "navbar-brand", attrs: { href: "#" } }, [
            _vm._v("Unit 2")
          ]),
          _c("nav", { staticClass: "nav nav-pills flex-column" }, [
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-1" } }, [
              _vm._v("2.1 Introduction")
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-1-1" }
                },
                [_vm._v(" Unit Outcomes")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-1-2" }
                },
                [_vm._v(" Terminology")]
              )
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-2" } }, [
              _vm._v("2.2 The Role of Media in Teaching and Learning ")
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-2 my-1",
                  attrs: { href: "#item-2-1" }
                },
                [_vm._v("2.2.1 What is instructional media? ")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-2 my-1",
                  attrs: { href: "#item-2-2" }
                },
                [_vm._v("2.2.2 The Role of Media in Teaching and Learning ")]
              )
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-3" } }, [
              _vm._v(
                "2.3 Instructional Media Available for Teaching and Learning "
              )
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-2 my-1",
                  attrs: { href: "#item-3-1" }
                },
                [_vm._v("2.3.1 Non-projected media ")]
              ),
              _c("nav", { staticClass: "nav nav-pills flex-column" }, [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-3 my-1",
                    attrs: { href: "#item-3-1-1" }
                  },
                  [_vm._v("2.3.1.1 Printed materials")]
                ),
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-3 my-1",
                    attrs: { href: "#item-3-1-2" }
                  },
                  [_vm._v("2.3.1.2 Non-projected visuals")]
                ),
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-3 my-1",
                    attrs: { href: "#item-3-1-3" }
                  },
                  [_vm._v("2.3.1.3 Non-projected display surfaces")]
                )
              ]),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-2 my-1",
                  attrs: { href: "#item-3-2" }
                },
                [_vm._v("2.3.2 Projected media")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-2 my-1",
                  attrs: { href: "#item-3-3" }
                },
                [_vm._v("2.3.3 Audio media ")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-2 my-1",
                  attrs: { href: "#item-3-4" }
                },
                [_vm._v("2.3.4 Motion media")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-2 my-1",
                  attrs: { href: "#item-3-5" }
                },
                [_vm._v("2.3.5 Computer based multimedia and hypermedia ")]
              ),
              _c("nav", { staticClass: "nav nav-pills flex-column" }, [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-3 my-1",
                    attrs: { href: "#item-3-5-1" }
                  },
                  [_vm._v("2.3.5.1 Role of computers in instruction")]
                )
              ]),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-2 my-1",
                  attrs: { href: "#item-3-6" }
                },
                [_vm._v("2.3.6 Social Media")]
              ),
              _c("nav", { staticClass: "nav nav-pills flex-column" }, [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-3 my-1",
                    attrs: { href: "#item-3-6-1" }
                  },
                  [_vm._v("2.3.6.1 Other capabilities of Social Media")]
                ),
                _c("nav", { staticClass: "nav nav-pills flex-column" }, [
                  _c(
                    "a",
                    {
                      staticClass: "nav-link ml-4 my-1",
                      attrs: { href: "#item-3-6-1-1" }
                    },
                    [_vm._v("2.3.6.1.1 Wiki")]
                  ),
                  _c(
                    "a",
                    {
                      staticClass: "nav-link ml-4 my-1",
                      attrs: { href: "#item-3-6-1-2" }
                    },
                    [_vm._v("2.3.6.1.2 Blogs")]
                  )
                ])
              ]),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-2 my-1",
                  attrs: { href: "#item-3-7" }
                },
                [_vm._v("2.3.7 Mobile learning technologies")]
              )
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-4" } }, [
              _vm._v("2.4 Trends in Media Technologies")
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-4-1" }
                },
                [_vm._v("2.4.1 Wireless technology: What is it? ")]
              )
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-5" } }, [
              _vm._v("Unit summary")
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-6" } }, [
              _vm._v("Assignment")
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-7" } }, [
              _vm._v("References")
            ])
          ])
        ]
      )
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}