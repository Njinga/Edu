{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit6.vue?vue&type=template&id=34ff3468&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit6.vue","mtime":1594099795922},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9ImFib3V0Ij4KICAgIDxkaXYgY2xhc3M9ImJvcmRlciBib3JkZXItbGlnaHQgcC0zIG1iLTUgcm91bmRlZCAiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgZGF0YS1zcHk9InNjcm9sbCIgY2xhc3M9ImNvbC1zbS00IGNvbC1sZy0zIiBzdHlsZT0iaGVpZ2h0OmluaGVyaXQiPgogICAgICAgICAgICAgICAgPG5hdiBpZD0ibmF2YmFyLWV4YW1wbGUzIiBjbGFzcz0ibmF2YmFyIG5hdmJhci1saWdodCBzdGlja3ktdG9wIGZsZXgtY29sdW1uIG10LTQiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9IiMiPlVuaXQgNjwvYT4KICAgICAgICAgICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXYgbmF2LXBpbGxzIGZsZXgtY29sdW1uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSIjaXRlbS0xIj4xLjEgSW50cm9kdWN0aW9uPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXYgbmF2LXBpbGxzIGZsZXgtY29sdW1uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayBtbC0zIG15LTEiIGhyZWY9IiNpdGVtLTEtMSI+IFVuaXQgT3V0Y29tZXM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsgbWwtMyBteS0xIiBocmVmPSIjaXRlbS0xLTIiPiBUZXJtaW5vbG9neTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9uYXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iI2l0ZW0tMiI+Ni4yIFRoZSBDb25jZXB0cyBvZiBNYWludGVuYW5jZSwgQ2FyZSBhbmQgU3RvcmFnZSBvZiBJbnN0cnVjdGlvbmFsIE1lZGlhIEVxdWlwbWVudCBhbmQgTWF0ZXJpYWxzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsgbWwtMyBteS0xIiBocmVmPSIjaXRlbS0zLTEiPjYuMy4xIFRoZSBPdmVyaGVhZCBQcm9qZWN0b3I8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdiBuYXYtcGlsbHMgZmxleC1jb2x1bW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIG1sLTUgbXktMSIgaHJlZj0iI2l0ZW0tMy0xLTEiPjYuMy4xLjEgT3BlcmF0aW5nIHRoZSBPdmVyaGVhZCBQcm9qZWN0b3IvQ29tcHV0ZXIgUHJvamVjdG9yPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIG1sLTUgbXktMSIgaHJlZj0iI2l0ZW0tMy0xLTIiPkFjdGl2aXR5IDYuMTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9uYXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayBtbC0zIG15LTEiIGhyZWY9IiNpdGVtLTMtMiI+Ni4zLjIgQXVkaW8gZXF1aXBtZW50PC9hPgoKICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIG1sLTMgbXktMSIgaHJlZj0iI2l0ZW0tMy0zIj42LjMuMyBWaWRlbyBlcXVpcG1lbnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdiBuYXYtcGlsbHMgZmxleC1jb2x1bW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIG1sLTUgbXktMSIgaHJlZj0iI2l0ZW0tMy0zLTEiPkFjdGl2aXR5IDYuMjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9uYXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayBtbC0zIG15LTEiIGhyZWY9IiNpdGVtLTMtNCI+Ni4zLjQgQ29tcHV0ZXIgZXF1aXBtZW50PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXYgbmF2LXBpbGxzIGZsZXgtY29sdW1uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayBtbC01IG15LTEiIGhyZWY9IiNpdGVtLTMtNC0xIj42LjMuNC4xIE1haW50ZW5hbmNlIG9mIGNvbXB1dGVyIGVxdWlwbWVudDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9uYXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iI2l0ZW0tNCI+Ni40IFN0b3JpbmcgZXF1aXBtZW50IGFuZCBNYXRlcmlhbHM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iI2l0ZW0tNSI+VW5pdCBzdW1tYXJ5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9IiNpdGVtLTYiPkFzc2Vzc21lbnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iI2l0ZW0tNyI+UmVmZXJlbmNlczwvYT4KICAgICAgICAgICAgICAgICAgICA8L25hdj4KICAgICAgICAgICAgICAgIDwvbmF2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS04IGNvbC1sZy05Ij4KICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1zcHk9InNjcm9sbCIgY2xhc3M9InNjcm9sbHNweS1leGFtcGxlIHotZGVwdGgtMSBtdC00IHNoYWRvdy1sZyBwLTMgbWItNSByb3VuZGVkIiBkYXRhLXRhcmdldD0iI25hdmJhci1leGFtcGxlMyIKICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZzZXQ9IjAiPgogICAgICAgICAgICAgICAgICAgIDxtZGItY29udGFpbmVyIGZsdWlkPgogICAgICAgICAgICAgICAgICAgICAgICA8bWRiLXJvdyBjbGFzcz0iYmctcHJpbWFyeSB0ZXh0LWp1c3RpZnkiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0iaDEtcmVzcG9uc2l2ZSI+VW5pdCA2PC9oMT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0iaDEtcmVzcG9uc2l2ZSI+TWFuYWdlbWVudCBvZiBMZWFybmluZyBSZXNvdXJjZXM8L2gxPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgaWQ9Iml0ZW0tMSIgY2xhc3M9ImgyLXJlc3BvbnNpdmUiPjYuMSBJbnRyb2R1Y3Rpb248L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWwtNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtanVzdGlmeSBtZW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW4gdGhpcyB1bml0LCB3ZSBhcmUgZ29pbmcgdG8gZGlzY3VzcyBtYWludGVuYW5jZSwgY2FyZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Ugb2YgaW5zdHJ1Y3Rpb25hbCBtZWRpYS90ZWNobm9sb2d5IGVxdWlwbWVudCBhbmQgbWF0ZXJpYWxzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaW5jZSBpbnN0cnVjdGlvbmFsIG1lZGlhL3RlY2hub2xvZ3kgZXF1aXBtZW50IGFyZSBlaXRoZXIgZXhwZW5zaXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJ1eSBvciBkaWZmaWN1bHQgdG8gb2J0YWluLCBpdCBpcyBuZWNlc3NhcnkgdGhhdCB3ZSB0YWtlIGNhcmUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbSBieSBtYWludGFpbmluZyB0aGVtIGFuZCBzdG9yaW5nIHRoZW0gaW4gdGhlIG1vc3QgYXBwcm9wcmlhdGUgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhZmVzdCBwbGFjZXMuICBXZSBhbHNvIG5lZWQgdG8ga25vdyBob3cgdG8gdHJvdWJsZSBzaG9vdCB3aGVuIHVzaW5nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcXVpcG1lbnQgYW5kIG1hdGVyaWFscyBzaW5jZSBzZXZlcmFsIHByb2JsZW1zIG1heSBhcmlzZSB3aGVuZXZlciB3ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2UgbWVkaWEgZXF1aXBtZW50IGFuZCBtYXRlcmlhbHMuIE5vdGUgdGhhdCBpdCBpcyBub3QgcG9zc2libGUgdG8gZGlzY3VzcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgbWFpbnRlbmFuY2UsIGNhcmUgYW5kIHN0b3JhZ2Ugb2YgYWxsIHRoZSBlcXVpcG1lbnQgYW5kIG1hdGVyaWFscyB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSBhcmUgbGlrZWx5IHRvIHVzZS4gSW4gdGhpcyBjYXNlLCB3ZSB3aWxsIHNlbGVjdCBhbmQgZGlzY3VzcyBob3cgdG8gbWFpbnRhaW4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmUgYW5kIHN0b3JlIHNvbWUgb2YgdGhlIGVxdWlwbWVudC90ZWNobm9sb2dpZXMgYW5kIG1hdGVyaWFscy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibm90ZSBub3RlLWluZm8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmxvY2txdW90ZSBjbGFzcz0iYmxvY2txdW90ZSBicS1pbmZvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBpZD0iaXRlbS0xLTEiPjxpIGNsYXNzPSJmYXMgZmEtcGFwZXItcGxhbmUiPiBVbml0IE91dGNvbWVzPC9pPjwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcG9uIGNvbXBsZXRpb24gb2YgdGhpcyB1bml0IHlvdSB3aWxsIGJlIGFibGUgdG86CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZGVudGlmeSB0aGUgcHJvY2VkdXJlIGZvciBtYWludGFpbmluZyBhbmQgaGFuZGxpbmcgZGlmZmVyZW50IHR5cGVzIG9mIGluc3RydWN0aW9uYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhL3RlY2hub2xvZ3kgZXF1aXBtZW50IGFuZCBtYXRlcmlhbHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPm1haW50YWluLCBzdG9yZSwgcmV0cmlldmUgYW5kIHVzZSBkaWZmZXJlbnQgdHlwZXMgb2YgaW5zdHJ1Y3Rpb25hbCBtZWRpYSBlcXVpcG1lbnQgYW5kIG1hdGVyaWFscyA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+aGFuZGxlIGFuZCBvcGVyYXRlIGRpZmZlcmVudCB0eXBlcyBvZiBpbnN0cnVjdGlvbmFsIG1lZGlhIGVxdWlwbWVudC48L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9ibG9ja3F1b3RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5vdGUgbm90ZS1zdWNjZXNzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJsb2NrcXVvdGUgY2xhc3M9ImJsb2NrcXVvdGUgYnEtc3VjY2VzcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgaWQ9Iml0ZW0tMS0yIj48aSBjbGFzcz0iZmFzIGZhLWNoZWNrLXNxdWFyZSI+IFRlcm1pbm9sZ3k8L2k+PC9oND4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxraz5LZXlzdG9uZSBFZmZlY3Q8L2trPjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWZlcnMgdG8gYSBkaXN0b3J0aW9uIG9mIHRoZSBpbWFnZSBvbiB0aGUgcHJvamVjdGlvbiBzY3JlZW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGVmZmVjdCB0YWtlcyBpdHMgbmFtZSBmcm9tIHRoZSB0eXBpY2FsIHNoYXBlIG9mIGEga2V5LXN0b25lZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlIHdoaWNoIGlzIHdpZGUgYXQgdGhlIHRvcCBhbmQgbmFycm93ZXIgYXQgdGhlIGJvdHRvbSBsaWtlIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlzdG9uZS48YnIvPjxici8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8a2s+Q29tcHV0ZXIgVmlydXNlczwva2s+OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb2dyYW1tZXMgd3JpdHRlbiBhbmQgc3ByZWFkIHNwZWNpZmljYWxseSB0byBjYXVzZSBkYW1hZ2Ugb3IgY29ycnVwdCBvdGhlciBwcm9ncmFtbWVzIG9yIGluZm9ybWF0aW9uLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgoKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Jsb2NrcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9tZGItcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz48YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPG1kYi1yb3cgY2xhc3M9ImJnLXByaW1hcnkgdGV4dC1qdXN0aWZ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGlkPSJpdGVtLTIiIGNsYXNzPSJoMi1yZXNwb25zaXZlIj42LjIgVGhlIENvbmNlcHRzIG9mIE1haW50ZW5hbmNlLCBDYXJlIGFuZCBTdG9yYWdlIG9mIEluc3RydWN0aW9uYWwgTWVkaWEgRXF1aXBtZW50IGFuZCBNYXRlcmlhbHM8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWwtNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtanVzdGlmeSBtZW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTW9zdCB1c2VycyBvZiB0ZWNobm9sb2d5IGFyZSBub3QgYW5kIGRvIG5vdCBleHBlY3QgdG8gYmVjb21lIGVsZWN0cm9uaWMgd2l6YXJkcyBvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWFsaXN0cyBidXQgdGhleSB3YW50IHRvIGJlIGFibGUgdG8gdXNlIHRoZSBoYXJkLXdhcmUgc2FmZWx5IGFuZCBlZmZlY3RpdmVseS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIG1vc3QgZnVuZGFtZW50YWwgZWxlbWVudHMgb2YgZWZmZWN0aXZlIHRlY2hub2xvZ3kgdXNlIGFyZSBzaW1wbHkgZ2V0dGluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXF1aXBtZW50IHByb3Blcmx5IHNldCB1cCwga2VlcGluZyBpdCBydW5uaW5nLCBhbmQgYmVpbmcgcmVhZHkgdG8gY29wZSB3aXRoIHNuYWdzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGljaCBhbHdheXMgc2VlbSB0byBvY2N1ciBhdCB0aGUgbW9zdCBpbm9wcG9ydHVuZSB0aW1lcyAoSGVpbmljaCBldCBhbC4sIDE5OTY6MzY0KS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBtYWpvciBjb25jZXJuIHRvIGNvbnNpZGVyIHdoZW5ldmVyIHdlIHVzZSB0ZWNobm9sb2d5IGlzIHNhZmV0eS4gQWNjaWRlbnRzIGludm9sdmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcXVpcG1lbnQgY2FuIGJlIHNlcmlvdXMgYW5kIGV2ZW4gZmF0YWwuIFlvdSBvciB5b3VyIHN0dWRlbnRzIGNvdWxkIHN1c3RhaW4gaW5qdXJpZXMgaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IG1pc2hhbmRsZSBlcXVpcG1lbnQuIEFzIGFuIGVkdWNhdG9yLCB5b3UgYXJlIHJlc3BvbnNpYmxlIGFuZCBsZWdhbGx5IGxpYWJsZSBpZiBzdHVkZW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgZXhwb3NlZCB0byBoYXphcmRvdXMgY29uZGl0aW9ucy4gQXMgYSB0ZWFjaGVyLCB5b3Ugc2VydmUgYXMgcm9sZSBtb2RlbCBmb3Igc2FmZSBwcmFjdGljZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB1c2luZyB0ZWNobm9sb2d5IGFuZCB5b3UgbmVlZCB0byBrbm93IGFuZCBwcmFjdGljZSBnb29kIHNhZmV0eSBoYWJpdHMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdlIGFsc28ga25vdyB0aGF0IGVsZWN0cm9uaWMgZXF1aXBtZW50IGlzIGV4cGVuc2l2ZSB0byBidXkgYW5kIHdlIG5lZWQgdG8gdGFrZSBnb29kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmUgb2YgaXQgdGhyb3VnaCBwcm9wZXIgbWFpbnRlbmFuY2UgYW5kIGhhbmRsaW5nIGluIG9yZGVyIHRvIGluY3JlYXNlIGl0cyBsaWZlIHNwYW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhcmUgb2YgZXF1aXBtZW50IGFuZCBwcm9wZXIgbWFpbnRlbmFuY2UgZW5zdXJlcyBjb250aW51ZWQgdXNlIG9mIHRoZSBlcXVpcG1lbnQgZm9yIGEgbG9uZyB0aW1lLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L21kYi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPjxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICA8bWRiLXJvdyBjbGFzcz0iYmctcHJpbWFyeSB0ZXh0LWp1c3RpZnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGlkPSJpdGVtLTMiIGNsYXNzPSJoMi1yZXNwb25zaXZlIj42LjMgSG93IHRvIEhhbmRsZSwgT3BlcmF0ZSwgTWFpbnRhaW4gYW5kIFN0b3JlIE1lZGlhIEVxdWlwbWVudCBhbmQgTWF0ZXJpYWxzPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1sLTUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpbmNlIHdlIGFyZSBsaWtlbHkgdG8gdXNlIGEgbnVtYmVyIG9mIGVxdWlwbWVudCBpbiBvdXIgd29yayBzaXR1YXRpb25zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZSBuZWVkIHRvIGtub3cgaG93IHRvIGhhbmRsZSBhbmQgb3BlcmF0ZSB0aGVtIGFuZCBiZSBhYmxlIHRvIGRldGVjdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJvdWJsZSBzaG9vdGluZyBzcG90cyBvciBhcmVhcyB0aGF0IGFyZSBsaWtlbHkgdG8gY3JlYXRlIHByb2JsZW1zIHdoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNpbmcgdGhlIGVxdWlwbWVudCBzbyB0aGF0IHdlIGNhbiBpZGVudGlmeSB0aGUgcmVtZWRpZXMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBpZD0iaXRlbS0zLTEiIGNsYXNzPSJoMy1yZXNwb25zaXZlIj42LjMuMSBUaGUgT3ZlcmhlYWQgUHJvamVjdG9yPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1sLTUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBvdmVyaGVhZCBwcm9qZWN0b3IgKEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBzZWN0aW9uIDIuMy41IC0gUHJvamVjdGVkIE1lZGlhKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBhbiBlcXVpcG1lbnQgd2l0aCBhIGZldyBjb21wb25lbnRzIHRoYXQgcmVxdWlyZSBzcGVjaWFsIG1haW50ZW5hbmNlIHByb2NlZHVyZXMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhvd2V2ZXIsIHlvdSBuZWVkIHRvIHRha2UgYSBmZXcgYmFzaWMgcHJlY2F1dGlvbnMgdG8gZW5zdXJlIHRoYXQgdGhlIHByb2plY3RvciBrZWVwcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXR0aW5nIG9uIGEgYnJpZ2h0IHBlcmZvcm1hbmNlLiBTb21lIG9mIHRoZSBwcmVjYXV0aW9ucyBpbmNsdWRlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IG1lbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgS2VlcGluZyBpdCBhcyBjbGVhbiBhcyBwb3NzaWJsZS4gVGhlIGhvcml6b250YWwgc3RhZ2Ugd2hpY2ggaXMgbWFkZSB1cCBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsYXNzIHRlbmRzIHRvIGdhdGhlciBkdXN0IGFuZCBmaW5nZXIgcHJpbnRzIHN0aWNrIG9uLiBJdCBzaG91bGQgYmUgY2xlYW5lZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ3VsYXJseSB3aXRoIGxlbnMgdGlzc3VlIGFuZCBwcm9wZXIgbGVucyBjbGVhbmluZyBzb2x1dGlvbi4gSWYgcG9zc2libGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2VlcCB0aGUgZ2xhc3Mgc3VyZmFjZSBjb3ZlcmVkIGluIGZsYW5uZWwgY2xvdGguIFRoaXMgd2lsbCBoZWxwIGF2b2lkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyYXRjaGluZyBhbmQgZHVzdCBhY2N1bXVsYXRpb24uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IG1lbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvdGVjdGluZyA8a2s+PGk+dGhlIHByb2plY3RvciBsYW1wLiBUaGUgcHJvamVjdG9yIGxhbXA8L2k+PC9raz4gd2hpY2ggZ2VuZXJhdGVzIGxpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHByb2plY3Rpb24gc2hvdWxkIGJlIHByb3RlY3RlZCBpbiBvcmRlciB0byBsZW5ndGhlbiBpdHMgbGlmZSBzcGFuIHNpbmNlIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyeSBleHBlbnNpdmUuIFRoZSBiZXN0IHdheSB0byBsZW5ndGhlbiB0aGUgbGlmZSBvZiB0aGUgbGFtcCBpcyB0byBlbnN1cmUgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0b3IgaXMgbm90IGxlZnQgb24gZm9yIHRvbyBsb25nIHNpbmNlIG92ZXJoZWF0aW5nIGRhbWFnZXMgdGhlIGxhbXAuIE5ldmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2ggdGhlIGxhbXAgd2hlbiBpdCBpcyBob3Qgbm9yIHNob3VsZCB5b3UgdG91Y2ggYSBuZXcgbGFtcCB3aXRoIGJhcmUgZmluZ2VycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmNlIHRoaXMgc2hvcnRlbnMgaXRzIGxpZmUgc3Bhbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2hlbmV2ZXIgeW91IGFyZSBub3QgdXNpbmcgaXQsIHN3aXRjaCBvZmYgdGhlIHByb2plY3Rvci4gIEFsc28sIGFmdGVyIHVzaW5nIHRoZSBwcm9qZWN0b3IsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92ZSBpdCB0byBhbGxvdyB0aW1lIGZvciBjb29saW5nLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNb3ZlIHRoZSBwcm9qZWN0b3IsIHdpdGggY2FyZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgaWQ9Iml0ZW0tMy0xLTEiIGNsYXNzPSJoNC1yZXNwb25zaXZlIj42LjMuMS4xIE9wZXJhdGluZyB0aGUgT3ZlcmhlYWQgUHJvamVjdG9yL0NvbXB1dGVyIFByb2plY3RvcjwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtbC01Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IG1lbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUbyBnZXQgdGhlIGJlc3Qgb3V0IG9mIHlvdXIgb3ZlcmhlYWQgb3IgY29tcHV0ZXIgcHJvamVjdG9yLCB5b3UgbmVlZCB0byBrbm93IGhvdyB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRlIGl0IHRoZSByaWdodCB3YXkuIEZvbGxvdyB0aGUgZm9sbG93aW5nIHN0ZXBzIHRvIG9wZXJhdGUgYW4gb3ZlcmhlYWQgcHJvamVjdG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q29ubmVjdCB0aGUgcG93ZXIgY29yZCB0byB0aGUgcG93ZXIgb3V0bGV0PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UdXJuIHRoZSBwcm9qZWN0b3Igb248L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBvc2l0aW9uIHRoZSB0cmFuc3BhcmVuY3kgb24gc3RhZ2U8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFkanVzdCB0aGUgcHJvamVjdG9yIHRvIGVsaW1pbmF0ZSBrZXkgc3RvbmluZyBlZmZlY3Q8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZvY3VzIHRoZSBpbWFnZS48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IG1lbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aT48a2s+S2V5IHN0b25lIGVmZmVjdDwva2s+PC9pPiByZWZlcnMgdG8gYSBkaXN0b3J0aW9uIG9mIHRoZSBpbWFnZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGVmZmVjdCB0YWtlcyBpdHMgbmFtZSBmcm9tIHRoZSB0eXBpY2FsIHNoYXBlIG9mIGEga2V5LXN0b25lZCBpbWFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGljaCBpcyB3aWRlIGF0IHRoZSB0b3AgYW5kIG5hcnJvd2VyIGF0IHRoZSBib3R0b20gbGlrZSBhIGtleXN0b25lLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUga2V5IHN0b25lIGlzIGNhdXNlZCBieSB0aGUgcG9zaXRpb24gaW4gd2hpY2ggdGhlIHByb2plY3RvciBpcyBwbGFjZWQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHRoZSBwcm9qZWN0b3IgaXMgdG9vIGhpZ2gsIHRvbyBsb3cgb3Igb2ZmIGVpdGhlciBzaWRlcywgYSBkaXN0b3J0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBpbWFnZSB3aWxsIG9jY3VyLiBUbyByZW1lZHkgdGhpcyBzaXR1YXRpb24sIHlvdSBjYW4gZWl0aGVyICBtb3ZlIHRoZSBwcm9qZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgdGhlIHNjcmVlbiB0byBicmluZyB0aGUgdHdvIGludG8gcGVycGVuZGljdWxhciByZWxhdGlvbnNoaXAuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9uY2UgeW91IGhhdmUgYWxpZ25lZCB0aGUgcHJvamVjdG9yIGFuZCBzY3JlZW4sIGNvbnNpZGVyIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHRoZSBkaXN0YW5jZSBpcyB0b28gbG9uZywgdGhlIGltYWdlIHdpbGwgc3BpbGwgb3ZlciB0aGUgZWRnZXMgb2YgYSBzY3JlZW4gYW5kIGlmIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSBpcyB0b28gc2hvcnQsIHRoZSBpbWFnZSB3aWxsIG5vdCBmaWxsIHRoZSBzY3JlZW4gcHJvcGVybHkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBiYXNpYyBydWxlIG9mIHRodW1iIGlzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgdGhlIHByb2plY3RlZCBpbWFnZSBpcyB0b28gbGFyZ2UgZm9yIHRoZSBzY3JlZW4sIHB1c2ggdGhlIHByb2plY3RvciBjbG9zZXIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB0aGUgaW1hZ2UgaXMgdG9vIHNtYWxsLCBwdWxsIHRoZSBwcm9qZWN0b3IgYmFjay4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxraz48aT5Ucm91YmxlLXNob290aW5nIGFuZCByZW1lZGllcyB3aXRoIG92ZXJoZWFkIHByb2plY3Rpb248L2k+PC9raz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXQgdGltZXMgeW91IHdhbnQgdG8gdXNlIHRoZSBvdmVyaGVhZCBwcm9qZWN0b3IgYnV0IHNvbWUgcHJvYmxlbXMgbWlnaHQgYXJpc2UgLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3UgbmVlZCB0byBrbm93IHdoYXQgdG8gZG8gaW4gc3VjaCBzaXR1YXRpb25zLiBTdWNoIHByb2JsZW1zIHRoYXQgbWlnaHQgcHJldmVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3UgZnJvbSB1c2luZyB0aGUgZXF1aXBtZW50IGFyZSBjYWxsZWQgPGtrPjxpPnRyb3VibGUgLXNob290aW5nIHNwb3RzPC9pPjwva2s+LkZvciBleGFtcGxlOgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdoZW4gbm8gcG93ZXIgY29tZXMgb24gYWZ0ZXIgc3dpdGNoaW5nIG9uIHRoZSBlcXVpcG1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91IG5lZWQgdG8gYmUgc3VyZSB0aGF0IHRoZSBwcm9qZWN0b3IgaXMgcGx1Z2dlZCBpbnRvIGFuIGVsZWN0cmljCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGV0IGFuZCB0aGF0IHRoZXJlIGlzIGVsZWN0cmljIHBvd2VyIGluIHRoYXQgcG93ZXIgcG9pbnQuIEF0IHRpbWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGVxdWlwbWVudCBzd2l0Y2ggbWlnaHQgYmUgZGVmZWN0aXZlIGFuZCB5b3UgbWlnaHQgaGF2ZSB0byByZXBsYWNlIGl0LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB0aGUgbGVucyBmYWlscyB0byBmb2N1cyBkZXNwaXRlIGFsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkanVzdG1lbnRzIG9mIHRoZSBmb2N1cywgZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGxlbnMgaXMgZGlydHkgb3IgdGhlIGZvY3VzIGNvbnRyb2wgaXMgZmF1bHR5LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB0aGUgbGFtcCBpcyBidXJuZWQgb3V0LCBsaWdodCB3aWxsIG5vdCBzaG93IG9uIHRoZSBwcm9qZWN0b3IgYW5kIHlvdSB3aWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVlZCB0byByZXBsYWNlIHRoZSBsYW1wIHdpdGggYW5vdGhlciBsYW1wIG9mIHRoZSBzYW1lIHZvbHRhZ2UuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibm90ZSBub3RlLXByaW1hcnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmxvY2txdW90ZSBjbGFzcz0iYmxvY2txdW90ZSBicS1wcmltYXJ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBpZD0iaXRlbS0zLTEtMiI+IDxpIGNsYXNzPSJmYXMgZmEtdG9vbHMiPiBBY3Rpdml0eSA2LjE8L2k+PC9oND4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByYWN0aWNlIG9wZXJhdGluZyBhbmQgdXNpbmcgdGhlIE9IUCBpbiByb29tIEMxLjIgKEVkdWNhdGlvbiBCbG9jaykgb3IgSURFIEF1ZGlvIFZpc3VhbCBMYWIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYmxvY2txdW90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IG1lbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMZXQgdXMgbm93IGJyaWVmbHkgbG9vayBhdCBhbm90aGVyIHByb2plY3Rpb24gbWVkaWEgd2hpY2ggaXMgY29tbW9ubHkgdXNlZCBpbiB0aGUgY2xhc3Nyb29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBuZWVkcyBwcm9wZXIgc3RvcmFnZSwgbWFpbnRlbmFuY2UgYW5kIGNhcmUuIFRoaXMgaXMgdGhlIGNvbXB1dGVyIHByb2plY3RvciBvciBjb21tb25seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrbm93biBhcyBMQ0QgKExpcXVpZCBEaWdpdGFsIERpc3BsYXkpLiBOb3JtYWxseSB0aGV5IGFyZSBzbWFsbCBpbiBzaXplIGFuZCBxdWl0ZSBwb3J0YWJsZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXNlZCB0b2dldGhlciB3aXRoIGEgbW9iaWxlIGdhZGdldCAoZS5nLiBMYXB0b3ApIHRoZXkgbWFrZSBhIHVzZWZ1bCB0ZWNobm9sb2d5IGluIHRoZSBjbGFzc3Jvb20uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxraz5DYXJlIGFuZCBvcGVyYXRpb24gb2YgdGhlIENvbXB1dGVyIFByb2plY3RvciAoTENEKTwva2s+PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgcHJvamVjdG9yIHByb2plY3RzIHRleHQsIGltYWdlcywgZ3JhcGhpY3MgYW5kIG1vdmluZyBwaWN0dXJlcyBlbGVjdHJvbmljYWxseS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5mb3JtYXRpb24gdG8gYmUgcHJvamVjdGVkIGlzIHN0b3JlZCBpbiBhIGNvbXB1dGVyIChtb3N0bHkgbGFwdG9wcy9JIHBhZHMvVGFibGV0cykuCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IG1lbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCZWZvcmUgdXNpbmcgdGhlIExDRCBwcm9qZWN0b3IgbWFrZSBzdXJlIHRoYXQgYWxsIHRoZSByZXF1aXJlZCBjYWJsZXMgYXJlIGF2YWlsYWJsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgaGF2ZSBub3QgYmVlbiBkYW1hZ2VkLiBZb3UgbWF5IG5lZWQgYW4gZXh0ZW5zaW9uIGNhYmxlIGluIGNhc2Ugd2hlcmUgeW91IGFyZSBwcm9qZWN0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gaXMgZmFyIGZyb20gYW4gZWxlY3RyaWNhbCBzb2NrZXQuIEluY2FzZSB5b3UgYXJlIHVzaW5nIHRoZSBwcm9qZWN0b3IgaW4gYW4gYXJlYSB3aGVyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVyZSBpcyBubyBlbGVjdHJpY2l0eSBvciBlbGVjdHJpY2l0eSBpcyB1bnN0YWJsZSwgaGF2ZSBhIHN0YW5kYnkgZ2VuZXJhdG9yLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IG1lbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgcHJvamVjdGlvbiBzY3JlZW4gbXVzdCBiZSBjbGVhbi4gSW4gY2FzZSB0aGVyZSBpcyBhIHdoaXRlYm9hcmQgaW4gdGhlIGNsYXNzcm9vbSB5b3UgY2FuIHByb2plY3Qgb24gaXQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byBjb25uZWN0IHRoZSBwcm9qZWN0b3IgdG8gdGhlIGNvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzZWUgU2VjdGlvbiAyLjMuNSAtIFByb2plY3RlZCBNZWRpYSkuIEFzIHdlbGwsIHJlZmVyIHRvIGEgdmlkZW8gcG9zdGVkIG9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLWxlYXJuaW5nIHdlYnNpdGUgZm9yIHN0ZXBzIG9uIGhvdyB0byBjb25uZWN0IHRoZSBwcm9qZWN0b3IgYW5kIG9wZXJhdGUgaXQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJlZm9yZSB1c2luZyB0aGUgcHJvamVjdG9yIGluIHRoZSBjbGFzc3Jvb20sIHRyeSBpdCBvdXQgKHByYWN0aWNlIG9yIHJlaGVhcnNlKSBzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBhcmUgY29tZm9ydGFibGUgIHVzaW5nIGl0IGluIGZyb250IG9mIHRoZSBzdHVkZW50cy4gUmVmZXIgdG8gdGhlIEFTU1VSRQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCBpbiBTZWN0aW9uIDMuNSBvbiBob3cgdG8gdXRpbGlzZSBtZWRpYSBkdXJpbmcgaW5zdHJ1Y3Rpb24uIExldCB1cyBub3cgbG9vayBhdCBBdWRpbyBFcXVpcG1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgaWQ9Iml0ZW0tMy0yIiBjbGFzcz0iaDMtcmVzcG9uc2l2ZSI+Ni4zLjIgQXVkaW8gZXF1aXBtZW50PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1sLTUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1ZGlvIGVxdWlwbWVudCBhbmQgZ2FkZ2V0cyBoYXZlIGV2b2x2ZWQgZnJvbSByZWVsIHRvIHJlZWwgdGFwZXMsIHRvIGNhc3NldHRlcywgdG8gQ0QncywgdG8gYXVkaW8gZmlsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIG5vdyAgdG8gcG9kY2FzdHMuIFRoZSBlcXVpcG1lbnQgdG8gcGxheSB0aGUgYXVkaW8gbWF0ZXJpYWxzIGluY2x1ZGUgY2Fzc2V0dGUgcGxheWVycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobm93IGFsbW9zdCBvYnNvbGV0ZSksIENEIHBsYXllcnMgYW5kIENELVJPTXMgKG9uIGNvbXB1dGVycyBhbmQgTGFwdG9wcyksIE1QMy9NUDQgcGxheWVycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcyB3ZWxsIGFzIGRpZ2l0YWwgcGxheWVycy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtanVzdGlmeSBtZW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9yIGdlbmVyYWwgbWFpbnRlbmFuY2Ugb2YgYXVkaW8gZXF1aXBtZW50LCBhbGwgdGFwZXMsIHRhcGUgcmVjb3JkZXJzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDRHMgYW5kIENEIHBsYXllcnMgbXVzdCBiZSBrZXB0IGNsZWFuIGlmIHRoZXkgYXJlIHRvIG9wZXJhdGUgcHJvcGVybHkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdoaWxlIHlvdXIgc2Nob29sIG1heSBub3QgaGF2ZSBhbGwgdGhlIGVxdWlwbWVudCBhbmQgZ2FkZ2V0cyB0byBwbGF5IGF1ZGlvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFscywgdGhlIHJ1bGUgb2YgdGh1bWIgaXMgdG8gZG8gdGhlIGZvbGxvd2luZzoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBLZWVwIHRoZW0gYXdheSBmcm9tIGRhbXAgb3IgbW9pc3QgcGxhY2VzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdG9yZSB0aGVtIGF3YXkgZnJvbSBkdXN0IGFuZCBkaXJlY3Qgc3Vuc2hpbmU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVzZSBhcHByb3ByaWF0ZSBwb3dlciBzb3VyY2VzOyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xlYW4gdGhlbSByZWd1bGFybHkuIFZpc2l0IHlvdXIgbG9jYWwgZWxlY3Ryb25pYyBzaG9wIGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25zIG9uIHByb3BlciBjbGVhbmluZyBtYXRlcmlhbHMgb2YgeW91ciBlcXVpcG1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IG1lbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJ0cyB3aGljaCBtYXkgcmVxdWlyZSBzcGVjaWFsIGNsZWFuaW5nIHNvbHV0aW9ucyBpbmNsdWRlIHBsYXllciBoZWFkcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgb3IgcmVhZGVycy4gQXMgYW4gZXhhbXBsZSwgdG8gaW1wcm92ZSB0aGUgcXVhbGl0eSBvZiB5b3VyIHJlY29yZGluZ3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB5b3UgaGF2ZSBjYXNzZXR0ZXMsIHlvdSBzaG91bGQgdXNlIGEgY2Fzc2V0dGUgaGVhZCBjbGVhbmVyIHRvIGNsZWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjYXNzZXR0ZSByZWNvcmRlciByZWd1bGFybHkuIENEIHBsYXllciBoZWFkcyBzaG91bGQgYWxzbyBiZSBjbGVhbmVkIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlY2lhbCBzb2x1dGlvbnMuIFRoZSBDRCdzIHRoZW1zZWx2ZXMgbXVzdCBhbHNvIGJlIGtlcHQgY2xlYW4gYW5kIHJlZnJhaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBzY3JhdGNoaW5nIHRoZW0uIExldCB1cyBub3cgbG9vayBhdCB2aWRlbyBlcXVpcG1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBpZD0iaXRlbS0zLTMiIGNsYXNzPSJoMy1yZXNwb25zaXZlIj42LjMuMyBWaWRlbyBlcXVpcG1lbnQ8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWwtNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtanVzdGlmeSBtZW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlkZW8gZXF1aXBtZW50IGhhcyBhbHNvIGV2b2x2ZWQgZnJvbSB0aGUgRmlsbSBQcm9qZWN0b3IsIFZpZGVvIFRhcGUgUmVjb3JkZXJzIChWVFIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWRlbyBDYXNzZXR0ZSBSZWNvcmRlcnMgKFZDUiksIFZpZGVvIERpc2tzLCBhbmQgRFZEIHBsYXllcnMuIEN1cnJlbnRseSB2aWRlbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbHMgY2FuIGJlIHBsYXllZCBvbiBjb21wdXRlcnMsIGFzIHdlbGwgYXMgZWxlY3Ryb25pYyB2aWRlbyBwbGF5ZXJzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbGVjdHJvbmljIHBsYXllcnMgcGxheSB3aGF0IGlzIGtub3duIGFzIHZpZGVvIGZpbGVzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IG1lbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPdGhlciBnYWRnZXRzICBzdWNoIGFzIHZpZGVvIGNhbWVyYXMgYW5kIGNhbWVyYXMgYXJlIGZvdW5kIG9uIHBob25lcyB3aGljaCBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcGFiaWxpdGllcyBvZiByZWNvcmRpbmcgYW5kIHBsYXlpbmcgcmVjb3JkZWQgdmlkZW8gbWF0ZXJpYWxzLiBJbiBvcmRlciB0byBlbnN1cmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F0aXNmYWN0b3J5IHBlcmZvcm1hbmNlIGZyb20geW91ciB2aWRlbyBlcXVpcG1lbnQsIGNhcmVmdWwgaGFuZGxpbmcgaXMgbmVjZXNzYXJ5LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IG1lbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFcXVpcG1lbnQgc2hvdWxkIGJlIHN0b3JlZCBpbiBhIGNsZWFuIHBsYWNlIHdoaWNoIGlzIGRhbXAgb3IgbW9pc3R1cmUgZnJlZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxhc3RpYyBjb3ZlcnMgb3IgY2xvdGggY2FuIGJlIHVzZWQgdG8gcHJvdGVjdCB0aGUgZXF1aXBtZW50LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbGVhbmluZyBvZiBoZWFkcyBmb3IgdGhlIHBsYXllcnMgY2FuIGJlIGRvbmUgdXNpbmcgc3BlY2lhbCBzb2x1dGlvbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgaW4gZWxlY3Ryb25pYyBzaG9wcy4gVmlkZW8gY2FtZXJhcyBzaG91bGQgYWxzbyBiZSB3ZWxsIHRha2VuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmUtb2YgYXMgdGhleSBjb3VsZCBiZSBkYW1hZ2VkIGVhc2lseS4gRm9yIGV4YW1wbGU6RXF1aXBtZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBzdG9yZWQgaW4gYSBjbGVhbiBwbGFjZSB3aGljaCBpcyBkYW1wIG9yIG1vaXN0dXJlIGZyZWUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsYXN0aWMgY292ZXJzIG9yIGNsb3RoIGNhbiBiZSB1c2VkIHRvIHByb3RlY3QgdGhlIGVxdWlwbWVudC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xlYW5pbmcgb2YgaGVhZHMgZm9yIHRoZSBwbGF5ZXJzIGNhbiBiZSBkb25lIHVzaW5nIHNwZWNpYWwgc29sdXRpb25zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kIGluIGVsZWN0cm9uaWMgc2hvcHMuIFZpZGVvIGNhbWVyYXMgc2hvdWxkIGFsc28gYmUgd2VsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWtlbiBjYXJlLW9mIGFzIHRoZXkgY291bGQgYmUgZGFtYWdlZCBlYXNpbHkuIEZvciBleGFtcGxlOgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtanVzdGlmeSBtZW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5ldmVyIGFpbSB0aGUgY2FtZXJhIGF0IHRoZSBzdW4gb3Igb3RoZXIgYnJpZ2h0IGxpZ2h0IHNpbmNlIHRoaXMgY2FuIGRhbWFnZSB0aGUgdmlkZW8gdHViZS48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlR1cm4gdGhlIGNhbWVyYSBvZmYgIGlmIGl0IHdpbGwgbm90IGJlIHVzZWQgZm9yIGEgcGVyaW9kIG9mIHRpbWUuPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SZXBsYWNlIHRoZSBjYXAgaWYgdGhlIGNhbWVyYSB3aWxsIG5vdCBiZSB1c2VkIGZvciBzb21lIHRpbWUuPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZWVwIHRoZSBjYW1lcmEgbGVucyBjbGVhbiBieSBkdXN0aW5nIGl0IHdpdGggYSBzb2Z0IGJydXNoPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5vdGUgbm90ZS1wcmltYXJ5IHRleHQtanVzdGlmeSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxibG9ja3F1b3RlIGNsYXNzPSJibG9ja3F1b3RlIGJxLXByaW1hcnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGlkPSJpdGVtLTMtMy0xIj48aSBjbGFzcz0iZmFzIGZhLXRvb2xzIj4gQWN0aXZpdHkgNi4yPC9pPjwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlByYWN0aWNlIHVzaW5nIHRoZSB2aWRlbyBjYW1lcmEgaW4gdGhlIEZhY3VsdHkgb2YgRWR1Y2F0aW9uIEF1ZGlvIFZpc3VhbCBMYWIuPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91IGNhbiB1c2UgeW91ciBwaG9uZSBjYW1lcmEgdG8gdGFrZSBnb29kIHZpZGVvcyAgYW5kIHVzZSB0aGVtIGluIHRoZSBjbGFzc3Jvb20uPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYmxvY2txdW90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgaWQ9Iml0ZW0tMy00IiBjbGFzcz0iaDMtcmVzcG9uc2l2ZSI+Ni4zLjQgQ29tcHV0ZXIgZXF1aXBtZW50PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1sLTUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbXB1dGVycyB0b28gYXJlIG5vdCBhbiBleGNlcHRpb24gd2hlbiBpdCBjb21lcyB0byBjYXJlIGFuZCBtYWludGVuYW5jZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhleSBtdXN0IGJlIGtlcHQgaW4gYSBwbGFjZSBmcmVlIGZyb20gZHVzdCwgbW9pc3R1cmUgYW5kIHRvbyBtdWNoIGhlYXQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZXkgc2hvdWxkIGJlIGNvdmVyZWQgd2hlbiBub3QgaW4gdXNlLiBQdXJjaGFzZSBvZiBlcXVpcG1lbnQgaXMgYW4gZXNzZW50aWFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYXRpb24gd2hlbiBidXlpbmcgY29tcHV0ZXIgZXF1aXBtZW50LiBBbW9uZyB0aGUgcHVyY2hhc2UgY29uc2lkZXJhdGlvbnMgaW5jbHVkZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtanVzdGlmeSBtZW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbXBhdGliaWxpdHkgb2YgZXF1aXBtZW50IC0gV2hpbGUgdGhlIGlzc3VlIG9mIGNvbXBhdGliaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXMgaW1wcm92ZWQgYXMgdGVjaG5vbG9neSBoYXMgYWR2YW5jZWQgY2FyZSBzaG91bGQgYmUgdGFrZW4gZXNwZWNpYWxseQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIHNjaG9vbCBoYXMgb2xkZXIgZXF1aXBtZW50IHdoaWNoIG1heSBuZWVkIHRvIGJlIHVzZWQgd2l0aCBuZXdlciBvbmVzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluIHNob3J0LCBhIG1hcnJpYWdlIG5lZWRzIHRvIG9jY3VyIHdoZXJlYnkgIG5ldyBlcXVpcG1lbnQgY2FuIGJlIGludGVncmF0ZWQgb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JrIHRvZ2V0aGVyIHdpdGggYW4gb2xkZXIgb25lLiBFeGFtcGxlcyBvZiB0aGlzIGFyZSB3aGVyZWJ5IGFuIG9sZGVyIFBQVCBwcmVzZW50YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0b3IgaXMgdG8gYmUgY29ubmVjdGVkIHRvIGEgbmV3ZXIgbGFwdG9wLiBTb21ldGltZXMgdGhlIHByb2plY3Rpb24gbWF5IG5vdCB3b3JrLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9yIGNlcnRhaW4gc29mdHdhcmUgbWF5IG5vdCB3b3JrIG9uIGEgbmV3ZXIgY29tcHV0ZXIgYW5kIHZpY2UgdmVyc2EuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IG1lbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXhwYW5kYWJpbGl0eSAtIFdoZW4gcHVyY2hhc2luZyBhIGNvbXB1dGVyLCBjb25zaWRlciB0aGUgcG9zc2liaWxpdHkgb2YgeW91cgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVyIGhhdmluZyB0aGUgY2FwYWNpdHkgdG8gYWNjb21tb2RhdGUgYWRkaXRpb25hbCBoYXJkd2FyZSBzbyB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IGRvIG5vdCBkaXNjYXJkIGl0IHRvbyBzb29uIGFmdGVyIHRoZSBwdXJjaGFzZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgaWQ9Iml0ZW0tMy00LTEiIGNsYXNzPSJoNC1yZXNwb25zaXZlIj42LjMuNC4xIE1haW50ZW5hbmNlIG9mIGNvbXB1dGVyIGVxdWlwbWVudCA8L2g0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWwtNSI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbXB1dGVycyBhbmQgcmVsYXRlZCB0ZWNobm9sb2dpZXMgYXJlIHN1YmplY3RlZCB0byB0aGUgY29tbW9uIHByb2JsZW1zIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFueSBlcXVpcG1lbnQgc3VjaCBhczsgcmVndWxhciBicmVha2Rvd24sIG1hbGZ1bmN0aW9uLCBkYW1hZ2Ugb3IgYmVpbmcgc3RvbGVuLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXZSB3aWxsIG1lbnRpb24gc29tZSBvbmdvaW5nIG1haW50ZW5hbmNlIGFuZCBzZWN1cml0eSBjb25jZXJucyB0aGF0IGNvdWxkIGFzc2lzdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgbWFpbnRlbmFuY2Ugb2YgeW91ciBlcXVpcG1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aT5MYWJvcmF0b3J5IHJ1bGVzLiA8L2k+IE1vc3QgbGFib3JhdG9yeSBydWxlcyBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbmRlZCB0byBleHRlbmQgdGhlIGxpdmVzIG9mIHRoZSByZXNvdXJjZXMgdGhhdCB5b3UgYnV5LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBsYWIgcnVsZXMgYW5kIHJlZ3VsYXRpb25zIHNob3VsZCBiZSBwb3N0ZWQgcHJvbWluZW50bHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgc2hvdWxkIGFwcGx5IHRvIGV2ZXJ5b25lIHdobyB1c2VzIHRoZSBsYWIgIFN1Y2ggcnVsZXMgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY292ZXIgYXJlYXMgbGlrZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vIGVhdGluZywgZHJpbmtpbmcsIG9yIHNtb2tpbmcgc2hvdWxkIGJlIGFsbG93ZWQgbmVhciBlcXVpcG1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MYWIgcmVzb3VyY2VzIHNob3VsZCBiZSByZXNlcnZlZCBmb3IgaW5zdHJ1Y3Rpb25hbCBwdXJwb3NlcyBvbmx5LjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Pbmx5IGF1dGhvcml6ZWQgbGFiIHBlcnNvbm5lbCBzaG91bGQgY2hlY2sgb3V0IGxhYiByZXNvdXJjZXMuPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNjaGVkdWxlcyBmb3IgdXNlIHNob3VsZCBiZSBzdHJpY3RseSBvYnNlcnZlZC48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UHJvYmxlbXMgd2l0aCBlcXVpcG1lbnQgc2hvdWxkIGJlIHJlcG9ydGVkIHByb21wdGx5IHRvIGRlc2lnbmF0ZWQgcGVyc29ubmVsLjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MYWIgdXNlcnMgc2hvdWxkIHNob3cgcmVzcGVjdCBmb3Igb3RoZXJzIGJ5IG1haW50YWluaW5nIGFwcHJvcHJpYXRlIG5vaXNlIGxldmVscy48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+PGJyIC8+PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpPk1haW50ZW5hbmNlIG5lZWRzIGFuZCBvcHRpb25zLiA8L2k+IEVhY2ggdGVhY2hlciB3aG8gdXNlcyB0aGUgZXF1aXBtZW50IG5lZWRzIHRyYWluaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gc2ltcGxlIHRyb3VibGVzaG9vdGluZyBwcm9jZWR1cmVzIHN1Y2ggYXMgbWFraW5nIHN1cmUgYSBwcmludGVyIGlzIHBsdWdnZWQgaW4gYW5kIG9uLWxpbmUgb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0IHRvIGRvIHdoZW4gdGhlIGNvbXB1dGVyIGRpc3BsYXkgYSBtZXNzYWdlICJhIGRpc2sgaXMgdW5yZWFkYWJsZSIuICBTY2hvb2xzIGNvdWxkIG1pbmltaXplCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwYWlyIHByb2JsZW1zIGlmIHVzZXJzIGZvbGxvdyBnb29kIHVzYWdlIHJ1bGVzIGFuZCBjb25kdWN0IHByZXZlbnRpdmUgbWFpbnRlbmFuY2UgcHJvY2VkdXJlcy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb3IgdGhlIGNvbXB1dGVyIGFuZCBvdGhlciBlcXVpcG1lbnQsIGl0IGlzIG5lY2Vzc2FyeSB0byBoYXZlIGEgbWFpbnRlbmFuY2UgcG9saWN5LiBGb3IgZXhhbXBsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3RhYmxpc2ggYSBtYWludGVuYW5jZSBjb250cmFjdCB3aXRoIGFuIGV4dGVybmFsIHN1cHBsaWVyIGFuZCBzZXQgYXNpZGUgYSBtYWludGVuYW5jZSBidWRnZXQuPGJyIC8+PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aT5TZWN1cmluZyB0aGUgcmVzb3VyY2VzPC9pPiBTZWN1cml0eSBpcyBhIHNlcGFyYXRlIGJ1dCBlcXVhbGx5IGltcG9ydGFudCBtYWludGVuYW5jZSBpc3N1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmNlIGxvc3Mgb2YgZXF1aXBtZW50IGZyb20gdmFuZGFsaXNtIGFuZCB0aGVmdCBpcyBhIGNvbW1vbiBwcm9ibGVtIGluIHNjaG9vbHMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWFueSBvZiB0aGUgY29tcHV0ZXIgYWNjZXNzb3JpZXMgYXJlIHZlcnkgcG9ydGFibGUgYW5kIGNhbiBlYXNpbHkgYmUgc3RvbGVuLiBBIHNjaG9vbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRzIHRvIGRldmlzZSBhIHNlY3VyaXR5IHN5c3RlbSB0aGF0IHdvdWxkIHdvcmsgZm9yIHRoZW0gdG8gcHJvdGVjdCB0aGUgZXF1aXBtZW50IGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWluZyBzdG9sZW4uIDxiciAvPjxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGk+VmlydXNlczogY2F1c2VzLCBwcmV2ZW50aW9uIGFuZCBjdXJlcy4gPC9pPiBDb21wdXRlciB2aXJ1c2VzIGFyZSBwcm9ncmFtbWVzIHdyaXR0ZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWZpY2FsbHkgdG8gY2F1c2UgZGFtYWdlIG9yIGNvcnJ1cHQgb3RoZXIgcHJvZ3JhbW1lcyBvciBpbmZvcm1hdGlvbiAoSGFuc2VuICYgS29sdGVzLCAxOTkyKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaWtlIHJlYWwgdmlydXNlcywgdGhlc2UgcHJvZ3JhbW1lcyBjYW4gYmUgcGFzc2VkIHRvIG90aGVyIHByb2dyYW1tZXMgd2l0aCB3aGljaCB0aGV5IGNvbWUgaW4gY29udGFjdC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb3IgaW5zdGFuY2UsIHRoZXkgaW5mZWN0IG90aGVyIGNvbXB1dGVycyBieSBjb25uZWN0aW5nIG9uZSBjb21wdXRlciB0byBhbm90aGVyIHZpYSB0ZWxlY29tbXVuaWNhdGlvbnMgb3IgYnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRpbmcgYSBkaXNrIGNvbnRhaW5pbmcgdGhlIHZpcnVzIGludG8gYSBjb21wdXRlci4gU29tZSB2aXJ1c2VzIGFyZSBjYXJyaWVkIGludG8gYSBjb21wdXRlciBzeXN0ZW0gb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8a2s+PGk+VHJvamFuIGhvcnNlczwvaT48L2trPiBvciBhdHRyYWN0aXZlIHByb2dyYW1tZXMgZGVzaWduZWQgZm9yIGFub3RoZXIgcHVycG9zZSBidXQgd2hpY2ggY2FycnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbnMgdGhhdCBnZXQgYXJvdW5kIHByb3RlY3Rpb24gY29kZXMgKExlZSwgMTk5MikuIFNvbWUgdmlydXNlcyBhcmUgPGk+d29ybXM8L2k+IG9yIHByb2dyYW1tZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNpZ25lZCBzcGVjaWZpY2FsbHkgdG8gcnVuIHNpbXVsdGFuZW91c2x5IHdpdGggb3RoZXIgcHJvZ3JhbW1lcy4gTWFueSBkaWZmZXJlbnQgc3RyYWlucyBvZiB2aXJ1c2VzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhZ3VlIGNvbXB1dGVyIHN5c3RlbXMgYW5kIG1vcmUgYXJlIGJlaW5nIGdlbmVyYXRlZC4gIFRoZSBpbXBhY3Qgb2YgdGhlIHZpcnVzIHRha2VzIG1hbnkgZm9ybXMuIFNvbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXJ1c2VzIGVhdCB0aHJvdWdoIGRhdGEgc3RvcmVkIGluIGEgY29tcHV0ZXI7IG90aGVycyByZXBsaWNhdGUgY29waWVzIG9mIHRoZW1zZWx2ZXMgaW4gY29tcHV0ZXIgbWVtb3J5IGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3Ryb3kgZmlsZXMuIFZpcnVzZXMgaGF2ZSB0aGUgZ2VuZXJhbCBlZmZlY3Qgb2YgdHlpbmcgdXAgY29tcHV0ZXIgcmVzb3VyY2VzLCBmcnVzdHJhdGluZyB1c2VycyBhbmQgd2FzdGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVhYmxlIHRpbWUuICBUbyBkZWFsIHdpdGggdGhlIHByb2JsZW0gb2YgdmlydXNlcywgRG9ybWFkeSAoMTk5MSkgcmVjb21tZW5kcyBhIGZvdXItcG9pbnQgcHJvZ3JhbW1lIHRvIG1pbmltaXplCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGltcGFjdCBvZiB2aXJ1c2VzOiBlc3RhYmxpc2ggZ29vZCBwcmFjdGljZXMgKHNjYW4gc3lzdGVtcyBhbmQgZGlza3MgcmVndWxhcmx5LCBiYWNrIHVwIGltcG9ydGFudCBkYXRhIG9yIGZpbGVzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZm9yY2Ugc2FmZXR5IHBvbGljaWVzIChubyB1bmF1dGhvcml6ZWQgcHJvZ3JhbW1lcyksIHVzZSB2aXJ1cyBtYW5hZ2VtZW50IHByb2dyYW1tZXMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbWRiLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxtZGItcm93IGNsYXNzPSJiZy1wcmltYXJ5IHRleHQtanVzdGlmeSI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGlkPSJpdGVtLTQiIGNsYXNzPSJoMi1yZXNwb25zaXZlIj42LjQgU3RvcmluZyBlcXVpcG1lbnQgYW5kIE1hdGVyaWFsczwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtbC01Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IG1lbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdG9yYWdlIG9mIGVxdWlwbWVudCBoZWxwcyB5b3UgdG8gdXNlIHRoZW0gbG9uZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBtb3JlIGVmZmljaWVudGx5IHdpdGhvdXQgcmVndWxhciBicmVha2FnZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlcmVmb3JlLCBhbiBhcmVhIHNob3VsZCBiZSBjcmVhdGVkIGFuZCBwYXJ0aXRpb25lZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZSB0aGUgZXF1aXBtZW50IGFuZCBtYXRlcmlhbHMgY2FuIGJlIHN0b3JlZC4gRm9yIGNvbnZlbmllbmNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGVsdmVzIHNob3VsZCBiZSBlcmVjdGVkIGZvciBzdG9yaW5nIHRoZSBwcm9qZWN0b3JzIGFuZCBvdGhlciBlcXVpcG1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1ha2Ugc3VyZSB0aGF0IGFsbCBlcXVpcG1lbnQgaGF2ZSBhbiBvdXRlciBjb3ZlciB0byBwcm90ZWN0IHRoZW0gZnJvbSBkdXN0LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb3IgZ29vZCBtYWludGVuYW5jZSwgZXNzZW50aWFsIHNwYXJlIHBhcnRzIHN1Y2ggYXMgcHJvamVjdGlvbiBsYW1wcywgYmVsdHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1c2VzLCBjYWJsZXMsIGV0Yy4sIHNob3VsZCBhbHdheXMgYmUgbWFkZSBhdmFpbGFibGUgZm9yIHJlcGxhY2VtZW50IHdoZW4gdGhlIG9sZCBvbmVzIGFyZSBicm9rZW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IG1lbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRlcmlhbHMgbGlrZSB2aWRlb3MsIENEcywgRFZEcywgQ0QtUk9Ncywgc2hvdWxkIGJlIGtlcHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gcmFja3MgYnVpbHQgaW4gY2FiaW5ldHMgYW5kIGFycmFuZ2VkIHdpdGggc2VyaWFsIG51bWJlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGVhc3kgcmV0cmlldmFsIGFuZCBxdWljayByZWZlcmVuY2UuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRvIHN0b3JlIHRyYW5zcGFyZW5jaWVzLCB1c2UgY2FyZCBib3hlcyB3aXRoIGNvdmVyIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2UgYSBsYXllciBvZiBwYXBlciBpbiBiZXR3ZWVuIHRoZSB0cmFuc3BhcmVuY2llcyB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2ZW50IHRoZW0gZnJvbSBzdGlja2luZyBhZ2FpbnN0IGVhY2ggb3RoZXIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgbWVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvciBvdGhlciBtYXRlcmlhbHMgbGlrZSBjaGFydHMsIHBvc3RlcnMsIGV0Yy4sIHN0b3JlIHRoZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gcmVhc29uYWJseSB3aWRlIGRyYXdlcnMgYW5kIGxheSB0aGVtIGZsYXQgdG8gcHJldmVudCB0aGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gYmVpbmcgZm9sZGVkLiBDdXQtb3V0cyBmcm9tIG1hZ2F6aW5lcyBhbmQgbmV3c3BhcGVycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgcHV0IGluIGZpbGVzIG9yIGluIGxhcmdlIGVudmVsb3BlcyBiZWZvcmUgc3RvcmluZyB0aGVtIGluIGRyYXdlcnMgb3IgY2FiaW5ldHMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbWRiLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxtZGItcm93IGNsYXNzPSIgdGV4dC1sZWZ0Ij4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5vdGUgbm90ZS1zdWNjZXNzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmxvY2txdW90ZSBjbGFzcz0iYmxvY2txdW90ZSBicS1zdWNjZXNzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGlkPSJpdGVtLTUiPjxpIGNsYXNzPSJmYXMgZmEtZm9sZGVyLW9wZW4iPiBVbml0IFN1bW1hcnk8L2k+PC9oMT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9IiB0ZXh0LWp1c3RpZnkiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluIHRoaXMgdW5pdCB3ZSBoYXZlIGRpc2N1c3NlZCBob3cgdG8gY2FyZSwgbWFpbnRhaW4gYW5kIHN0b3JlIG1lZGlhIGVxdWlwbWVudCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFscy4gV2UgaGF2ZSBnaXZlbiBzb21lIGV4YW1wbGVzIHRvIGlsbHVzdHJhdGUgaG93IHRvIGNhcmUgYW5kIG1haW50YWluIGVxdWlwbWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGVxdWlwbWVudC4gV2UgaGF2ZSBub3RlZCB0aGF0IG9uZSBtYWpvciBjb25jZXJuIHdoZW5ldmVyIHdlIHVzZSBlcXVpcG1lbnQgYW5kIG1hdGVyaWFscwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgc2FmZXR5LiBXZSBoYXZlIG1lbnRpb25lZCB0aGF0IHNpbmNlIGVsZWN0cm9uaWMgZXF1aXBtZW50IGlzIGV4cGVuc2l2ZTsgd2Ugc2hvdWxkIHRha2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvb2QgY2FyZSBvZiBpdCB0aHJvdWdoIHByb3BlciBtYWludGVuYW5jZSBhbmQgaGFuZGxpbmcuIEkgaG9wZSB5b3Ugd2lsbCBhcHBseSBzb21lIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgdGVjaG5pcXVlcyB0aGF0IHdlIGhhdmUgZGlzY3Vzc2VkIHRvIGNhcmUgYW5kIG1haW50YWluIHlvdXIgZXF1aXBtZW50IGluIG9yZGVyIHRvIHByb2xvbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZWlyIGxpZmUgc3BhbiBhbmQgZm9yIHRoZW0gdG8gc2VydmUgeW91IGJldHRlci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYmxvY2txdW90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJub3RlIG5vdGUtd2FybmluZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJsb2NrcXVvdGUgY2xhc3M9ImJsb2NrcXVvdGUgYnEtd2FybmluZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBpZD0iaXRlbS02Ij48aSBjbGFzcz0iZmFzIGZhLWV5ZSI+IEFzc2Vzc21lbnQ8L2k+PC9oMT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXNzdW1pbmcgdGhhdCB5b3VyIHNjaG9vbCBoYXMgYnVpbHQgYSBuZXcgcmVzb3VyY2UgY2VudHJlIHdoaWNoIGluY2x1ZGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIGNvbXB1dGVyIGxhYm9yYXRvcnkgYW5kIHlvdSBoYXZlIGJlZW4gYXBwb2ludGVkIHRoZSB0ZWFjaGVyIGluLWNoYXJnZSBvZiBpdHMgb3BlcmF0aW9uLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sIHR5cGU9ImEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Gb3JtdWxhdGUgc29tZSBndWlkZWxpbmVzIHRvIGJlIG9ic2VydmVkIGJ5IHRoZSB1c2Vycy4gWzUgbWFya3NdPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+V2hhdCBtZWFzdXJlcyB3aWxsIHlvdSB0YWtlIHRvIHNlY3VyZSB0aGUgZXF1aXBtZW50IGluIHRoZSByZXNvdXJjZSBjZW50cmU/IFs1IG1hcmtzXTwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaGF0IHN0cmF0ZWdpZXMgd2lsbCB5b3UgdXNlIHRvIHByb3RlY3QgIGNvbXB1dGVycyBmcm9tIHZpcnVzZXMgYW5kIHJlbW92ZSB2aXJ1c2VzIHRoYXQgaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZlY3RlZCBwcm9ncmFtbWVzPyBbNSBtYXJrc10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2hhdCBzdHJhdGVnaWVzIHdpbGwgeW91IHJlY29tbWVuZCB0byB0aGUgc2Nob29sIG1hbmFnZW1lbnQgb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbnRlbmFuY2UgYW5kIGNhcmUgb2YgZXF1aXBtZW50IGFuZCBtYXRlcmlhbD8gWzUgbWFya3NdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Jsb2NrcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibm90ZSBub3RlLXNlY29uZGFyeSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJsb2NrcXVvdGUgY2xhc3M9ImJsb2NrcXVvdGUgYnEtc2Vjb25kYXJ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGlkPSJpdGVtLTciPjxpIGNsYXNzPSJmYXMgZmEtIj4gUmVmZXJlbmNlczwvaT48L2gxPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtanVzdGlmeSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIYW5zZW4sIEIuLCAmIEtvbHRlcywgUy4gKDE5OTIpLiA8a2s+VmlydXNlcy48L2trPkluIEcuQml0dGVyIChFZC4pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGk+IE1hY21pbGxhbiBlbmN5Y2xvcGVkaWEgb2YgY29tcHV0ZXJzPC9pPk5ldyBZb3JrOiBNYWNtaWxsYW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVpbmljaCwgUi47IE1vbGVuZGEsIE0uOyBSdXNlbGwsIEouRC47ICYgU21hbGRpbm8sIFMuRSAoMTk5NikuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8a2s+PGk+IEluc3RydWN0aW9uYWwgTWVkaWEgYW5kIFRlY2hub2xvZ2llcyBmb3IgTGVhcm5pbmc8L2k+PC9raz4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1PHN1cD50aDwvc3VwPiBFZGl0aW9uLiBOZXcgSmVyc2V5OiBQcmVudGljZSBIYWxsLCBJbmMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGVlLCBKLiAoMTk5MikuIDxraz5IYWNraW5nLiBJbiBHLiBCaXR0ZXI8L2trPiAoRWQpLCA8aT5NYWNtaWxsYW4gZW5jeWNsb3BlZGlhIG9mIGNvbXB1dGVycy48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXcgWW9yazogTWFjbWlsbGFuLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJvYmx5ZXIsIE0uRC4gKDIwMDQpLiAyMDA0IDxraz5VcGRhdGU6IEludGVncmF0aW5nIEVkdWNhdGlvbmFsIFRlY2hub2xvZ3kgaW50byBUZWFjaGluZzwva2s+LjM8c3VwPnJkPC9zdXA+IEVkaXRpb24uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcHBlciBTYWRkbGUgUml2ZXIsIE5ldyBKZXJzZXksIENvbHVtYnVzLCBPaGlvOiBQZWFyc29uIE1lcnJpbGwgUHJlbnRpY2UgSGFsbC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Jsb2NrcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9tZGItcm93PgogICAgICAgICAgICAgICAgICAgIDwvbWRiLWNvbnRhaW5lcj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4K"},null]}