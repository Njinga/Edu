{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit5.vue?vue&type=template&id=34f11ce7&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit5.vue","mtime":1594191850954},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:
<div class="about mt-4">
    <div class="border border-light p-3 mb-5 rounded">
        <div class="row">
            <div class="col-sm-4 col-lg-3">
                <nav id="navbar-example3" class="navbar navbar-light sticky-top flex-column mt-4">
                    <a class="navbar-brand" href="#">Unit 5</a>
                    <nav class="nav nav-pills flex-column">
                        <a class="nav-link" href="#item-1">5.1 Introduction</a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ml-3 my-1 " href="#item-1-1"> Unit Outcomes</a>
                            <a class="nav-link ml-3 my-1" href="#item-1-2"> Terminology</a>
                        </nav>
                        <a class="nav-link" href="#item-2">5.2 What is media Integration?</a>
                        <a class="nav-link" href="#item-3">5.3 Why Integrate Media into Instruction?</a>
                        <a class="nav-link" href="#item-4">5.4 How to Integrate Media into the Instructional Process</a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ml-3 my-1" href="#item-4-1">5.4.1 The computer as a teacher</a>
                            <nav class="nav nav-pills flex-column">
                                <a class="nav-link ml-5 my-1" href="#item-4-1-1">Activity 5.1</a>
                                <a class="nav-link ml-5 my-1" href="#item-4-1-2">Activity 5.2</a>
                            </nav>
                            <a class="nav-link ml-3 my-1" href="#item-4-2">5.4.2 Computer as learner (Student as teacher)</a>
                            <a class="nav-link ml-3 my-1" href="#item-4-3">5.4.3 Using the Internet to support learning</a>
                            <a class="nav-link ml-3 my-1" href="#item-4-4">5.4.4 Uses of the Internet</a>
                        </nav>
                        <a class="nav-link" href="#item-5">Unit summary</a>
                        <a class="nav-link" href="#item-6">References</a>
                    </nav>
                </nav>
            </div>

            <div class="col-sm-8 col-lg-9">
                <div data-spy="scroll" class="scrollspy-example z-depth-1 mt-4 shadow-lg p-3 mb-5 rounded" data-target="#navbar-example3"
                     data-offset="0">
                    <mdb-container fluid>
                        <mdb-row class="bg-primary text-justify">

                            <h1 class="h1-responsive">Unit 5</h1>
                            <h1 class="h1-responsive">Integrating Instructional Media into the Instructional Process</h1>
                            <br />
                            <h2 id="item-1" class="h2-responsive">5.1 Introduction</h2>
                            <div class="ml-5">

                                <p class="text-justify meme">
                                    In this unit, we discuss how to integrate instructional media into the
                                    instructional process. In particular, we focus on the integration of
                                    computer technology into the instructional process. As you may well be aware,
                                    the computer has invaded most instructional situations and therefore we need
                                    to embrace it to promote student learning.
                                </p>
                                <p class="text-justify meme">
                                    What you must not overlook is the fact that even if you use instructional media
                                    during instruction this does not suggest that they are used effectively. You need
                                    to know how to select media and integrate them into the lesson. Therefore, this unit
                                    is meant to assist you as teachers to know how to integrate computer technology as well
                                    as other media into teaching and learning.
                                </p>
                                <div class="note note-info">
                                    <blockquote class="blockquote bq-info">
                                        <h4 id="item-1-1"><i class="fas fa-paper-plane"> Unit Outcomes</i></h4>
                                        <p class="text-justify">
                                            Upon completion of this unit you will be able to:
                                            <ul>
                                                <li>
                                                    define the concept of media integration
                                                </li>
                                                <li>describe the rationale for integrating media into the instructional process </li>
                                                <li>describe the procedure for integrating media into the instructional process.</li>


                                            </ul>
                                        </p>
                                    </blockquote>
                                </div>
                                <br />
                                <div class="note note-success">
                                    <blockquote class="blockquote bq-success">
                                        <h4 id="item-1-2"> <i class="fas fa-check-square"> Terminolgy</i></h4>
                                        <p>
                                            <kk>Media integration</kk>:
                                            Refers to the combining of different types of media during instruction
                                            and incorporating them into the lesson plan and making them part of the
                                            total instructional process<br /><br />


                                            <kk>Media</kk>:
                                            Things used to assist the teacher in communicating
                                            instruction/s to the learners. It includes print,
                                            video, audio, and real materials.<br /><br />


                                            <kk>Drill and Practice:</kk>
                                            Classroom method for helping individual learners' master
                                            basic skills or knowledge through repetitive work.<br /><br />



                                            <kk>Simulation</kk>:
                                            A representation of a real or sometimes imaginary situation or phenomenon.
                                            The representation is usually simplified to make learning easier. <br /><br />


                                            <kk>Internet uses</kk>:
                                            Communication, information retrieval, and information publishing.
                                        </p>
                                    </blockquote>
                                </div>

                            </div>
                        </mdb-row>
                        <br />
                        <mdb-row class="bg-primary text-justify">
                            <br />
                            <h2 id="item-2" class="h2-responsive">5.2 What is media Integration?</h2>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    Media integration refers to the combining of different types
                                    of media during instruction and incorporating them into your
                                    lesson plan and making them part of the total instructional process.
                                </p>
                                <p class="text-justify meme">
                                    As we may be aware, multimedia facilities are now becoming a
                                    common-place on desk-top personal computer systems. In order
                                    for such facilities to be of use as intended, it is important
                                    that the different media are integrated so that users can use
                                    the computer to perform different roles.
                                </p>
                            </div>
                        </mdb-row>
                        <br /><br />
                        <mdb-row class="bg-primary text-justify">

                            <h2 id="item-3" class="h2-responsive">5.3 Why Integrate Media into Instruction?</h2>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    The fact that teachers bring instructional media into the
                                    classroom does not suggest that students learn from the media.
                                    For the media to be useful in the instructional process, it must
                                    be integrated into the lesson. The media must be properly selected,
                                    incorporated into the lesson, and students involved in the utilization
                                    process.  According to Duhaney (2000:71), technology use in the
                                    classroom should only be considered appropriate if it is used for
                                    specific purposes in the teaching and learning process, and
                                    that its incorporation in this process should not just be as
                                    an appendage, but an integral part of the teaching and learning objectives.
                                </p>
                                <p class="text-justify meme">
                                    Literature available on integration of media into instruction, highlights the following key issues:
                                    <br />
                                    <kk>A need to capacitate teachers</kk>
                                    <ul>
                                        <li>
                                            Integration of technology in the classroom has been the focal point for innovation
                                            in the educational system of many developing countries (Abu-Jaber, 1987; Abu-Ras,
                                            1979; El-Hmaisat, 1985; Al-Sharhan, 1993; Mohammed, 1994). One aspect of integration
                                            of technology that has been studied is the training required for effective use of
                                            instructional technology.  The type and amount of training in instructional technology
                                            available to teachers varies enormously in quantity and quality (Abu-Jaber, 1996:60).
                                        </li>
                                        <li>
                                            A study by the National Center for Educational Statistics in the United States (1999)
                                            found that although a majority of teachers indicated that they had some training in
                                            technology, only 20% felt very well prepared to integrate educational technology in
                                            classroom activities.
                                        </li>
                                        <li>
                                            Bitter & Yohe (1989) have indicated that teacher preparation programmes must
                                            focus on the long and short-term needs of their students in the following ways:
                                            <ol>
                                                <li>
                                                    teachers must be proficient, critical users of
                                                    current educational technologies;

                                                </li>
                                                <li>
                                                    teachers must be competent designers
                                                    of instructional systems which will
                                                    enable them to assist their students
                                                    to become critical thinkers.
                                                </li>
                                            </ol>
                                        </li>
                                        <li>
                                            According to Faison (1994: 169-171), teachers must be competent
                                            in two areas; they must be able to operate technological hardware,
                                            and they must develop competencies in identifying and using appropriate
                                            educational software and materials.
                                        </li>
                                        <li>
                                            Len et al. (1997), argue that even when teachers attempt to use the
                                            new technology in the classroom, they are often unsuccessful because they
                                            lack the necessary implementation skills, including necessary training.
                                        </li>
                                        <li>
                                            For education to be successful, public schools must make current technologies
                                            which are already available in the business world, also available to students
                                            (Davis & Henry, 1993). Also, for this transition to smoothly occur, students must
                                            become actively involved, and teachers must be given the resources and training
                                            needed to properly implement technology (Moursund, 1991; Pearlman, 1999; Stintson, 1993).
                                        </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    Today, media may include print, video, audio, and the delivery systems
                                    may consist of the Internet, World Wide Web, telephone lines, or satellite
                                    links (Hains et al; 2000).  Often instructors use media and delivery systems
                                    with little thought as to how they fit into the instructional system experienced
                                    by their students (Belland, 2000).
                                </p>
                                <p class="text-justify meme">
                                    Utilization of media involves the adoption of innovations (Belland, 2000).
                                    As new technological products and processes become available to educational
                                    professionals, they need to be in a position to evaluate them and provide
                                    students access to the best of the new technology (Belland, 2000; Newby et al., 2000).
                                </p>
                                <p class="text-justify meme">
                                    Lawless, Smith, Kulikowich, & Owen, (2001:264) argue that, while many of these new
                                    teaching tools have shown promise, if teachers have limited knowledge regarding these
                                    tools and their abilities, they may have difficulty evaluating the effectiveness of
                                    these aides in student learning.
                                </p>
                                <p class="text-justify meme">
                                    We are also aware of the fact that teachers are living in a time of general
                                    uncertainty where rapid changes in professional practice are commonplace
                                    (Wheeler, 2001:7). One of the most widepread changes in professional practice
                                    is emerging as a result of the implementation of Information and Communications
                                    technology (Wheeler, 2001:7).   In the context of teaching and learning, Jones & Knezek (1993),
                                    argue that ICT should be seen as a means of improving efficiency in the educational process.
                                    It has been shown that the use of computers in education can generally help to improve memory
                                    retention, increase motivation and generally deepen understanding (Dede, 1998).  According to
                                    Perraton (2000:31), Communication technologies have been used for three purposes, to
                                    <i>widen access to education, to raise its quality, and to reform it.</i>
                                </p>
                                <p class="text-justify meme">
                                    Heide & Henderson (2001) contends that technology can be used to enhance instruction
                                    and expand the limits of the existing curriculum as it can be used to
                                    obtain, organize, manipulate and communicate knowledge and information.
                                    Therefore, technology can be used to address the range of different
                                    learning styles and different modalities of individual learning strengths.
                                    We want students to learn how to acquire information where and when they
                                    want it and develop both their cognitive and communicative skills.
                                    According to Kershaw (1996), for delivery systems to be effective,
                                    they must act as a means of facilitating teaching and learning rather
                                    than an end in itself. This is illustrated by trends shifting from
                                    teacher-focused delivery systems to learner focused.
                                </p>
                                <p class="text-justify meme">
                                    With the proliferation of ICT in the classroom, your role as
                                    a teacher must change (Wheeler, 2001:12).  Firstly, because
                                    certain teaching resources will become obsolete as new electronic
                                    forms of distributed communication will be employed Wheeler (2001:12).
                                    For example, advancements in computer technology continue to create new frontiers
                                    in geography education (Nellis, 1994) with the most recent change being in the form of
                                    teaching with the Internet.
                                </p>
                                <p class="text-justify meme">
                                    Menges (1994) asserted that information technology can improve
                                    teaching and enhance student learning (Hedberg et al. 1994). According
                                    to Sui & Bednarz (1999:96), virtually everyone who has written about the
                                    impact of the Internet has predicted that it would result in a basic change
                                    in the way people learn and in the student- teacher relationship.
                                </p>
                                <p class="text-justify meme">
                                    Researchers think the introduction of the Internet into the classroom will
                                    support inquiry learning and analytical skills by making available a wide
                                    variety of new resources (Braun et al; 1998; Windschitl, 1998;), accommodate
                                    different learning styles and non-linear thinkers (Keller et al. 1996). It will
                                    also change the role of the teacher from knowledge source to learning facilitator
                                    (Jonassen et al., 1997), break down the classroom's physical limitations and expand students'
                                    experiences (Wilson, 1995), and expand student experiences with visual technologies (White,1997).
                                </p>
                                <p class="text-justify meme">
                                    Becker (1999:32), concluded, "along with word processing, the Internet may be the
                                    most valuable of the many computer technologies available to teachers and students".
                                    However, all these claims remain to be validated (Brien & Eastmond, 1994; McKnight et at.; 1993).
                                    The current research  will attempt to validate this claim by exploring the extent to
                                    which computers are used during instruction and in particular the Internet.
                                </p>
                                <p class="text-justify meme">
                                    Effective integration of instructional technology in the curriculum is a complex process
                                    that will require restructuring of schools and classrooms.  Educators
                                    are far from agreeing on what is the most cost-effective way of integrating
                                    technology into the classrooms (Prawd, 1996:283).  Dyrenfurth & Miller, (1984), contend that if changes
                                    in media utilization patterns and use of more sophisticated classroom technology are to become a reality for
                                    technology educators, the following must occur:
                                </p>
                                <p class="text-justify meme">
                                    <ol>
                                        <li>
                                            Convenient media facilities and computer equipment need to be made available in schools,
                                        </li>
                                        <li>
                                            In-service education must be provided to train instructors in media
                                            development and utilization and teacher education programmes need to employ
                                            the latest form of educational technology in their teacher preparation and certification
                                            experiences.  Concerns about pre-service teacher education and the integration of
                                            technology are well documented in research literature.
                                        </li>
                                    </ol>
                                </p>

                            </div>
                        </mdb-row>
                        <br /><br />
                        <mdb-row class="bg-primary text-justify">

                            <h2 id="item-4" class="h2-responsive">5.4 How to Integrate Media into the Instructional Process</h2>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    As we have indicated above, media should not be seen as an appendage but an integral
                                    part of your lesson. You need to conceive the media that you intend to use as part of
                                    your whole lesson. In that case, plan when to use media in your lesson and how it will
                                    be used and include it into your lesson plan. Since in a lesson plan you specify the teacher
                                    and learner activities; indicate what will be the role of the teacher as well as the role of
                                    the students when the media is used.  Also specify when a particular media will be used.
                                    This helps you as a teacher to prepare the media and to plan both the teacher and learner
                                    activities prior to using the media.
                                </p>
                                <p class="text-justify meme">
                                    This suggests that as you state the lesson objectives, you need to specify the intended
                                    application of instructional media to the different types of learning outcomes; i.e. cognitive,
                                    affective, or psychomotor depending on the role that you want the media to play in your lesson
                                    and the outcomes that you wish the students to achieve by using the selected media.
                                    Different types of media help us to achieve the cognitive, affective and psychomotor
                                    learning domains to varying degrees. So, be sure what type of learning outcome you would
                                    like the selected media to achieve in your lesson.
                                </p>
                                <p class="text-justify meme">
                                    Before selecting and using the media always ask yourself the question;
                                    <i>"What is it that I want my students to learn and how can media help?</i>
                                    After selecting the media, you again need to ask yourself the following questions;
                                    <i>
                                        "What will be the role of media during the lesson? At what point of the lesson
                                        will the media be used? What will be my role  and that of the students as the media
                                        is being used?
                                    </i>
                                </p>
                                <p class="text-justify meme">
                                    The next thing that we discuss in this section is how to integrate the computer
                                    into the teaching/learning experience. The computer which is a commonly used media
                                    technology, is used here as an example. The first thing to consider in this process
                                    is to consider your instructional objectives. Then ask yourself the question; <i>
                                        "What is it that I want my students to learn and how can the computer be of benefit?"
                                    </i>

                                </p>
                                <p class="text-justify meme">
                                    In answering the above question, you need to note the role of a computer in a classroom setting.
                                    The computer can play different roles during instruction. The computer can be a <i>
                                        teacher,
                                        an assistant and also a learner
                                    </i>. In this case then it will be easier
                                    to integrate it into your lesson.
                                </p>


                            </div>
                            <br />
                            <h3 id="item-4-1" class="h3-responsive">5.4.1 The computer as a teacher</h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    The oldest use of the computer in education dating back
                                    to early 1960s was as a tool that presents instruction directly
                                    to students (Newby at el., 2006).  Such is termed as <i>computer assisted instruction</i> (CAI),
                                    <i>computer-based instruction </i>CBI), or <i>computer-assisted learning</i> (CAL).
                                    In this mode, the computer can present instruction, use various media
                                    (text, graphics, audio, video, etc.), provide instructional activities or
                                    situations, or otherwise require interaction from learners, evaluate learners' responses,
                                    provide feedback, and determine appropriate follow-up activities.
                                    You should then use it in the appropriate events in the instruction.
                                </p>
                                <p class="text-justify meme">
                                    The chief advantage of the computer is its interactivity. The computer
                                    can demand active learner involvement, and when you use it as a teaching machine,
                                    the computer can be highly interactive, individualized, engaging, and infinitely
                                    patient (Newby et al., 2006:163).
                                </p>
                                <p class="text-justify meme">
                                    <KK>Categories of Computer-Assisted Instruction </KK><br />
                                </p>
                                <p class="text-justify meme">
                                    <kk>Drill and Practice-</kk> Drill and practice, although outdated, is still a
                                    common classroom method used by teachers to help  learners master basic skills
                                    or knowledge through repetitive work. The purpose is to give learners the opportunity
                                    to master the material at their own pace. Compared with non-computer drill and practice,
                                    the computer offers significant advantages:

                                    <ul>
                                        <li>
                                            <i>Interactivity</i>. The computer can present many problems and require student responses.
                                        </li>
                                        <li>
                                            <i>Immediate feedback.</i> The computer can immediately inform the learner if an answer is right
                                            or wrong. Many drill and practice programmes automatically recycle missed items until they
                                            are mastered.
                                        </li>
                                        <li>
                                            <i>Adaptable level of difficulty.</i>  The computer can adjust automatically based on the student's
                                            performance.
                                        </li>
                                        <li>
                                            <i>Motivation.</i> Through the use of challenge and gaming elements, a computer drill and practice
                                            programme may be more motivating to students than similar paper-and-pencil
                                            exercises (Newby et al., 2006:165).
                                        </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    <kk>Tutorial</kk> - In a tutorial application, the computer assumes the primary
                                    instructional role of a teacher or tutor. It presents new content and assesses
                                    learning. A tutorial contains an organized body of knowledge, one or more pathway
                                    through that knowledge, specific learning objectives, and built-in-tests for student learning.
                                </p>
                                <p class="text-justify meme">
                                    Computer-based tutorials offer a number of advantages:
                                    <ul>
                                        <li>
                                            <i>Embedded questions</i>. Like drill and practice,
                                            tutorials have the advantage of being interactive.
                                            Students take an active part by answering embedded questions
                                        </li>
                                        <li>
                                            <i>Branching.</i> Computer tutorials can automatically branch,
                                            or adjust content presentation order according to the learner's responses
                                            to embedded questions.
                                        </li>
                                        <li>
                                            <i>Record keeping.</i> Computer tutorials can automatically
                                            maintain student records, which inform students of their progress (Newby et al., 2006:165).
                                        </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    <kk>Simulation </kk>- A simulation is a representation of a real or sometimes
                                    imaginary situation or phenomenon. The representation is usually
                                    simplified to make learning easier. Simulations make excellent use of the computer's capabilities. For example:
                                </p>
                                <p class="text-justify meme">
                                    <ul>
                                        <li>
                                            <i>Control of multiple variables.</i> Computers can manage multiple variables simultaneously to depict complex phenomena.
                                        </li>
                                        <li>
                                            <i>Time control.</i> The computer can contract or expand time to allow study of phenomena that are
                                            too slow (e.g. population growth) or too fast (e.g. chemical reaction) for normal classroom observation.
                                        </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    The graphic below shows an example of a simulator machine. In this case, it is a car simulator
                                    whereby one will make believe as if driving a real car when actually it is stationary.
                                </p>
                                <p class="text-center meme">
                                    <img src="../assets/vr.png" class="img-fluid" alt="Responsive image"><br />
                                    <kk>Simulator machine in action</kk>
                                </p>
                                <p class="text-justify meme">
                                    <kk>Instructional games-</kk> Instructional games add an element of fun to CAI.
                                    In most cases, games are modified versions of other types of CAI, such as drill
                                    and practice or simulation but have the following distinguishing characteristics:
                                </p>
                                <p class="text-justify meme">
                                    <ul>
                                        <li>
                                            <i>Motivation</i>. The chief advantage of computer games is the variety
                                            of motivational elements they may employ including competition, cooperation,
                                            challenge, reward, and recognition.
                                        </li>
                                        <li>
                                            <i>Game structure.</i> The game structure means that there are rules of play and end goal.
                                        </li>
                                        <li>
                                            <i>Sensory appeal.</i>  Games on computer often appeal through the use of graphics,
                                            animation, sound, and other sensory enhancements (Newby et al., 2006:167).
                                        </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    <kk>Computer as Assistant</kk><br />
                                    As an assistant, the computer aids the learner in performing
                                    routine work tasks. Computer applications mainly follow into:
                                    word processing, graphic tools, presenting software, computer
                                    databases, and electronic spreadsheets.

                                </p>

                                <div class="note note-primary text-justify">
                                    <blockquote class="blockquote bq-primary">
                                        <h4 id="item-4-1-1"><i class="fas fa-tools"> Activity 5.1</i></h4>
                                        <br>
                                        <i>
                                            Based on your subjects of specialization,
                                            identify tasks that you could engage your
                                            students in to give them practice on word processing.
                                            Discuss your suggestions with a colleague.
                                        </i>
                                    </blockquote>
                                </div>
                                <br />
                                <p class="text-justify meme">
                                    <kk> Graphic tools </kk>- graphic tools provide students with the capacity
                                    to work with images of all types (e.g. photographs, charts, clip art, graphs, etc.). Students learn by using these tools for the following:
                                </p>
                                <p class="text-justify meme">
                                    <ul>
                                        <li>
                                            <i>Creative drawing</i>. Students can use drawing or
                                            painting programmes to produce original artwork.
                                        </li>
                                        <li>
                                            <i>Illustration of work.</i> Students can use drawing or
                                            painting programmes and clip art to illustrate written stories, reports, etc.
                                        </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    <kk>Databases</kk> - Computer database software provides the capacity for creating,
                                    editing, and manipulating organized collections of information.
                                    Students can use database software to do the following:
                                </p>
                                <p class="text-justify meme">
                                    <ul>
                                        <li>
                                            <i>Locate information in prepared databases</i>. Students should
                                            be able to use available database software to find information
                                            e.g. locate a book in the library's electronic card catalogue;
                                            locate an article from a certain journal, search for information on a certain topic, etc.
                                        </li>
                                        <li>
                                            <i>Develop problem-solving and higher-order thinking skills.</i>
                                            Databases make excellent tools for the development of problem-solving
                                            and higher-order thinking skills. You could assign your student a problem
                                            to investigate using available databases.
                                        </li>
                                        <li>
                                            <i>Develop original databases.</i>   Students can learn a great
                                            deal about research, information organization, and a particular
                                            content area and develop their own database. For example,
                                            they can develop their own database about historical sites
                                            within their community (Newby et al., 2006:173).
                                        </li>
                                    </ul>
                                </p>
                                <div class="note note-primary text-justify">
                                    <blockquote class="blockquote bq-primary">
                                        <h4 id="4-1-2"><i class="fas fa-tools"> Activity 5.2</i></h4>
                                        <br>
                                        <i>
                                            Imagine that you have a problem based on a selected topic
                                            from one of the subjects that you are currently teaching
                                            and you would like the students to investigate the following:
                                        </i>
                                        <ol>
                                            <li>
                                                <i>Formulate a problem that the students could investigate in order to help them develop higher thinking skills.</i>
                                            </li>
                                            <li>
                                                <i>
                                                    Identify possible databases that the students could use to investigate the problem.
                                                </i>
                                            </li>
                                            <li>
                                                <i>
                                                    Explain how you will guide your students as they investigate the problem.
                                                </i>
                                            </li>

                                        </ol>

                                    </blockquote>
                                </div>
                                <br />
                                <p class="text-justify meme">
                                    The above were different capabilities of what a computer can do.
                                    Your role then is to use it (integrate it) appropriately based on
                                    the lesson requirements. We now look at the computer as learner.
                                    The idea is for the learner to perform certain tasks and the computer learns or executes.
                                </p>
                            </div>
                            <br />
                            <h3 id="item-4-2" class="h3-responsive">5.4.2 Computer as learner (Student as teacher)</h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    When the computer functions as a learner, the roles of computer and
                                    student that are seen in traditional computer-assisted instruction are reversed.
                                    The computer becomes the learner and the student becomes the teacher. The objective
                                    is for the student to teach the computer to perform some tasks.
                                    This requires the student to apply programming language.
                                    This is challenging for the students at the secondary school level.
                                </p>
                            </div>
                            <br />
                            <h3 id="item-4-3" class="h3-responsive">5.4.3 Using the Internet to support learning</h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    Another way of integrating the computer is by using the Internet to
                                    support learning. The Internet brings information resources including text, pictures,
                                    sounds, and video from all over the world into your classroom. You and your students can
                                    then browse through available resources in order to pick and choose what you need to teach
                                    or learn about a topic of interest or create lessons and learning experiences for your
                                    students. Many Internet information resources are updated daily or even minute by minute
                                    thus making them very up-to-date.
                                </p>
                                <p class="text-justify meme">
                                    When using the Internet, you have to be selective about the quality
                                    of what you might find since you have no control over what is uploaded
                                    onto the Internet. Guide your students wisely when searching for information
                                    on the Internet. You need to evaluate Internet information and control what
                                    type of information your students have access to.
                                </p>
                                <p class="text-justify meme">
                                    Please note that the Internet is a vast information storehouse
                                    but contains information that might be incomplete, inaccurate,
                                    and/or out of date.
                                </p>
                                <p class="text-justify meme">
                                    The following signs could help in determining whether a particular
                                    Internet site is accurate and reliable:
                                    <ul>
                                        <li>
                                            <i>Known author.</i> The web page author could be
                                            a person or organization with a recognized
                                            name and authority. Be wary of those sites
                                            where the author is not indicated, or with a known bias.
                                        </li>
                                        <li>
                                            <i>Contact information.</i> Authors of genuine sites usually
                                            give an e-mail address or any other way of being contacted.
                                        </li>
                                        <li>
                                            <i>Frequent updates.</i> The site should indicate the last time it was updated on the front page.
                                        </li>
                                        <li>
                                            <i>Links to other sites.</i> Some sites list the documents they used as sources for the information.
                                        </li>
                                    </ul>
                                </p>

                            </div>
                            <br />
                            <h3 id="item-4-4" class="h3-responsive">5.4.4 Uses of the Internet</h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    You and your students can use the Internet in a variety of ways.
                                    The main uses of the Internet include; <kk>
                                        communication,
                                        information retrieval, and information publishing.
                                    </kk>
                                </p>
                                <p class="text-justify meme">
                                    <i>Communication</i><br />
                                    Electronic mail (e-mail) is the most widely used
                                    service on the Internet. Anyone with a computer
                                    connected to the Internet can communicate with
                                    anyone else in the world that is connected. You
                                    can use the Internet to join discussion groups where
                                    you can ask questions, discuss problems and share experiences.

                                </p>
                                <p class="text-justify meme">
                                    <i>Information retrieval</i><br />
                                    A lot of information is available on the Internet for students and teachers
                                    to retrieve. A lot of that information is available free of charge.


                                </p>
                                <p class="text-justify meme">
                                    <i>Information publishing</i><br />
                                    You and your students can publish materials on the Internet.
                                    You could create your own Web Site where you could post materials
                                    created by students such as poems, short stories, etc. You could also
                                    share your teaching ideas with other teachers in your discipline. Using
                                    social media platforms you could create Wiki pages and blogs. Information
                                    can also be created via Facebook and Twitter.


                                </p>
                                <p class="text-justify meme">

                                    <i>Integrating the Internet into the learning experience</i><br />
                                    When planning any instructional activity involving the Internet,
                                    develop a plan by doing the following:
                                    <ul>
                                        <li>
                                            <i>Consider the learner characteristics.</i>
                                            When using the Internet, consider the students'
                                            abilities to access the Internet for communication,
                                            information retrieval, and information publishing.
                                            If students do not have such skills, you will need to teach them.
                                        </li>
                                        <li>
                                            <i>Specify the instructional objectives</i>. You should only use the
                                            Internet if it will add value to your lesson.
                                            So consider why you want to use the Internet during the lesson.
                                        </li>
                                        <li>
                                            <i>Provide the necessary resources</i>. To use the Internet,
                                            students should have access to computers with Internet
                                            connection. The type of connection in your classroom or computer
                                            laboratory might limit your options. For example, dial-up
                                            connection on the Internet tends to be slower than the broad band connection
                                        </li>
                                        <li>
                                            <i>Preparation is key to success</i>. Prepare the learning environment,
                                            prepare the learners, and then proceed with the lesson.
                                            While preparing the learning environment, check to confirm
                                            that the computers are working properly and have Internet access.
                                            Schedule the computer laboratory if you plan to have several students
                                            access the Internet at the same time. Confirm that the web sites that
                                            you want to use are available. Prepare the students for the lesson
                                            activity whether to be done individually, in small groups, or as a class.
                                            Provide written guidelines on the activities to be undertaken by the students.
                                        </li>
                                        <li>
                                            When the lesson begins, monitor individual students to keep them on task and
                                            to be sure they are following the Internet use guidelines.
                                        </li>

                                    </ul>


                                </p>
                                <p class="text-justify meme">
                                    After the lesson, you and your students need to
                                    take time to evaluate how the use of the
                                    Internet worked. You need to determine whether
                                    your students learned from the experience.

                                </p>
                            </div>
                        </mdb-row>
                        <br/><br/>
                             <mdb-row>
                                 <div class="note note-success meme text-justify">
                                     <blockquote class="blockquote bq-success">
                                         <h1 id="item-5"><i class="fas fa-folder-open">Unit summary</i></h1>

                                         <p class="text-justify meme">
                                             In this unit, we have discussed how to integrate instructional
                                             media during instruction. One of the things we have noted in
                                             this unit is that generally some teachers do not integrate
                                             media into their lessons. The main reason because of limited
                                             or no training on media integration. We also discussed at
                                             length how you can integrate the computer into teaching and
                                             learning. Remember that in order to effectively integrate the
                                             computer, we need to be very clear of the intended role of the
                                             computer during instruction.   We have noted that the first thing
                                             to consider in that process is to consider your instructional objectives.
                                             Then ask yourself the question; "What is it that I want  my students to
                                             learn and how can the computer be of benefit?"
                                         </p>
                                     </blockquote>
                                 </div>
                                 <br />
                                 <hr>

                                 <br />
                                 <div class="note note-secondary meme text-justify">
                                     <blockquote class="blockquote bq-secondary">
                                         <h1 id="item-6"><i class="fas fa-">References</i></h1>
                                         <p class="text-justify meme">
                                             Abu-Jaber, M. (1987). <kk>
                                                 A Study of factors affecting the use
                                                 of media in instruction at Jordanian Community Colleges
                                             </kk>. <i>
                                                 International
                                                 Journal of Instructional Media
                                             </i>, 14(1), 23-31.<br /><br />

                                             Abu-Jaber, M. (1996). <kk>
                                                 Student Teachers' Use of Instructional Media
                                                 and its Implications at the Sultan Qaboos University in the Sultanate
                                                 of Oman
                                             </kk>. <i>International Journal of Instructional media</i>, 23 (1), 59-78.<br /><br />

                                             Abu-Ras, A. (1979). <kk>
                                                 Factors affecting teachers' utilization of educational
                                                 technology in Saudi-Arabia
                                             </kk>. Ph.D. dissertation. Indiana University.<br /><br />

                                             Al-Sharhan, J. A.  (1993) <kk>
                                                 The Use of audio-Visual aids in teaching:
                                                 A study in the Saudi Girls Colleges
                                             </kk>.  <i>
                                                 International Journal of
                                                 Instructional media
                                             </i>, 20 (3), 263-272.<br /><br />

                                             Becker, H. J. (1999). <i>
                                                 Internet Use by teachers: Conditions of professional
                                                 use and student-directed use. Irvine, CA: Center for Research on Information
                                                 Technology and Organizations. Accessed from
                                                 <a href="http://www.crito.uci.edu/TLC/findings/InternetUse/srartpage.htm">
                                                     http://www.crito.uci.edu/TLC/findings/InternetUse/srartpage.htm
                                                 </a>
                                                 on September 7, 1999.
                                             </i><br /><br />

                                             Belland, J. C. (2000). <kk>
                                                 Extension and augmentation of the
                                                 1994 definition of the field of instructional technology
                                             </kk> by
                                             Seels and Richey. <i>Unpublished manuscript.</i><br /><br />

                                             Bitter, G. G.; & Yohe, R. L. (1989). <kk>
                                                 Preparing teachers for
                                                 the Information age
                                             </kk>. <i>Educational Technology</i>, 29, (3), 22-25.<br /><br />

                                             Braun, J.; Femlund, P.; and white, C. (1998). <kk>
                                                 <i>
                                                     Technology tools
                                                     in the Social Studies classroom
                                                 </i>
                                             </kk>. Wilsonville, OR: Franklin,
                                             Beedle and Associates.<br /><br />

                                             Brien, R.; and Eastmond, N. (1994). <kk>
                                                 <i>
                                                     Cognitive Science
                                                     and Instruction
                                                 </i>
                                             </kk>. Englewood cliffs, New Jersey: Educational
                                             Technology Publications.<br /><br />

                                             Davis, M. & Henry, M. J. (1993). <kk>
                                                 Technology
                                                 Implementation in two restructuring schools:
                                                 Past, Present and Future
                                             </kk>. (ERIC Document reproduction
                                             Services No. Ed 362 162).<br /><br />

                                             Dede, C. (1998). <kk>Learning about teaching and vice versa</kk>.
                                             A paper presented at the conference of the society for
                                             Information technology in Education, Washington D. C.; USA.<br /><br />

                                             Dyrefurth, M.; & Miller, F. (1984). <kk>
                                                 Media Use in Vocational
                                                 technical education
                                             </kk>. <i>Media and methods</i>, 36, 8-13.<br /><br />

                                             Duhaney, D. C. (2000). <kk>
                                                 Technology and the Educational Process:
                                                 Transforming Classroom Activities
                                             </kk>. <i>
                                                 International Journal of
                                                 Instructional Media
                                             </i>, 27 (1), 67-72.<br /><br />

                                             El-Hmaisat, H. (1985). <kk>
                                                 Barriers encountered in
                                                 the use of instructional media by Jordanian general
                                                 secondary level teachers in the public schools of
                                                 Amman
                                             </kk>. Ph.D. Dissertation. Michigan State University.<br /><br />

                                             Faison, C. L. (1994).<kk>
                                                 Integrating technology into teacher
                                                 education:
                                             </kk> Proceedings of state 94. Annual Conference of
                                             the society for Technology and Teacher education.
                                             Washington, D.C. March, 16-19.<br /><br />

                                             Hains, A. H.; Conceicao-Runlee, S.; Caro, P.; Marchel, M. A. (2000).
                                             <kk>
                                                 Collaborative course development in Early Childhood Special
                                                 Education through distance learning. Early Childhood Research
                                                 & practice
                                             </kk>[Online], <a href="http://ecrp.uiuc.edu/v1n1/v1n1.html">
                                                 http://ecrp.uiuc.edu/v1n1/v1n1.html
                                             </a> <br /><br />

                                             Hedberg, J.; Harper, B.; Brown, C.; and Corderoy, R. (1994).
                                             <kk>
                                                 Exploring user interfaces to improve learning outcomes. <i>
                                                     In
                                                     Interactive Multimedia in University Education: Designing
                                                     for change in Teaching and Learning
                                                 </i>
                                             </kk>, Beattie, K.; McNaught,
                                             C.; and Wills, S. (Eds.). The Netherlands: Elsevier Science B. V.<br /><br />

                                             Heide, A.; & Henderson, D. (2001).<kk>
                                                 Active Learning in the
                                                 Digital Age classroom.
                                             </kk> Heinemann; Portsmouth, NH.<br /><br />

                                             Jonassen, D. H.; Dyer, D.;Robinson, T.; Harvey, D.; King, M.;
                                             and Loughner, P. (1997). <kk>
                                                 Cognitive Flexibility hypertexts on
                                                 the Web: Engaging learners in meaning Making
                                             </kk>. <i>
                                                 In Web Based
                                                 Instruction
                                             </i>, Khan, B. H. (Ed.), pp. 119-134. Englewood Cliffs,
                                             New Jersey: Educational Technology Publication.<br /><br />

                                             Jones, G. & Knezer, G. (1993). <kk>
                                                 Non-Commercial radio-satellite
                                                 telecommunications: Affordable options for technology educators
                                             </kk>,
                                             cited in S. ROMI (2000). Distance Learning and Non-formal education:
                                             Existing trends and new possibilities of Distance
                                             Learning Experiences. <i>Educational Media International</i>,
                                             37, pp. 39-44.<br /><br />

                                             Keller, C. P.; Davis, T. J.; and Canessa, R. R. (1996).
                                             <kk>
                                                 A Hypertext tutor for teaching principles and techniques
                                                 of GIS
                                             </kk>. <i>Journal of Geography in Higher Education</i>
                                             20:193-207.<br /><br />

                                             Lawless, K. A.; Smith, E. V.; Kulikowich, J. M.; & Owen,
                                             S. V. (2001). <kk>
                                                 Pre-service Teachers' Beliefs about the
                                                 Relationship between domain knowledge and Instructional
                                                 media
                                             </kk>. <i>International Journal of Instructional Media</i>, 28,
                                             (3), 261-270.<br /><br />

                                             Len, D.; Len, D. D.; and Len, K. (1997). <kk>
                                                 Teaching
                                                 with the Internet: Lessons from the classroom.
                                             </kk>
                                             Norwood, MA: Christopher-Gordon Publishers.<br /><br />

                                             McKnight, C.; Dillon, A.; and Richardson, J.
                                             (1993). <kk>Hypertext: A Psychological Perspective.</kk>
                                             Ellis Horwood: New York.<br /><br />

                                             Menges, R. J. (1994). <kk>
                                                 Teaching in the Age of
                                                 electronic information
                                             </kk>. In <i>Teaching Tips.</i>
                                             McKeachie, W. J. (Ed.). Lexington,
                                             Massachusetts: D. C. Heath and Co.<br /><br />


                                             Mohammed, M. A. (1994). <kk>
                                                 Media Utilization by
                                                 Faculty at the University of Qatar
                                             </kk>. <i>
                                                 Educational
                                                 Technology, Research & Development
                                             </i>, 42, (4), 108-119.<br /><br />

                                             Moursund, D. (1991). <kk>
                                                 Restructuring Education.
                                                 Part 2
                                             </kk>: Now and 10 Years ago. <i>
                                                 The Computing
                                                 Teacher
                                             </i>, 19(2), 4.<br /><br />

                                             Nellis, M. D. (1994). <kk>
                                                 Technology in geographic
                                                 education: Reflection and future directions.
                                             </kk>
                                             <i>Journal of Geography</i>, 9:37-39.<br /><br />

                                             Newby, T. J.; Stepich, D. A.; Lehman, J. D.;
                                             Russell, J. D. (2000). <kk>
                                                 Instructional technology
                                                 for Teaching and Learning: Designing instruction,
                                                 integrating computers, and using media (2<sup>nd</sup> Ed.)
                                             </kk>
                                             Upper Saddle River, NJ: Merrill/Prentice Hall.<br /><br />

                                             Newby, T.J.; Stepich, D.A.; Lehman, J.D.; &
                                             Russell, J.D. (2006). <kk>
                                                 Educational Technology
                                                 for Teaching and Learning
                                             </kk>. Upper Saddle River,
                                             New Jersey: Pearson Education, Inc.<br /><br />

                                             Pearlman, R. (1999). <kk>
                                                 Technology's role in
                                                 restructuring schools
                                             </kk>. <i>
                                                 Electronic
                                                 Learning
                                             </i> 8 (9), 8-15.<br /><br />

                                             Perraton, H. (2000). <kk>
                                                 Choosing Technologies
                                                 for Education
                                             </kk>. <i>Journal of Educational Media</i>,
                                             25 (1), 31-38.<br /><br />

                                             Prawd, L. (1996). <kk>
                                                 Are our children ready
                                                 for the future? A Look at Technology in
                                                 education
                                             </kk>. <i>
                                                 International Journal of
                                                 Instructional Media
                                             </i>, 23 (3),
                                             281-288.<br /><br />

                                             Stintson, J. (1993). <kk>
                                                 Technology Outlook on
                                                 Math and Science
                                             </kk>: Conversations with experts.
                                             <i>Media and Methods</i>, 22 (4), 24-27.<br /><br />

                                             Sui, D. Z.; and Bednarz, R. S. (Eds.) (1999).
                                             <kk>
                                                 The Message is the Medium: Geographic Education
                                                 in the Age of the Internet
                                             </kk>. <i>Journal of Geography</i>,
                                             98: 93-99.<br /><br />

                                             Wheeler, S. (2001). <kk>
                                                 Information and Communication
                                                 Technologies and the Changing Role of the Teacher.
                                             </kk>
                                             <i>Journal of Educational Media</i>, 26 (1), 7-17.<br /><br />

                                             White, C. (1997). <kk>
                                                 Technology and social studies:
                                                 An Introduction.
                                             </kk> <i>Social Education</i>, 61 (3), 147-149.<br /><br />

                                             Wilson, J. (1995). Social Studies online
                                             resources.<kk>
                                                 <i>
                                                     Social Studies and the Young
                                                     Learner
                                                 </i>
                                             </kk>, 7, 24-26.<br /><br />

                                             Windschitl, M. (1998). <kk>
                                                 The WWW and
                                                 Classroom research: What path should we
                                                 take?
                                             </kk> <i>Educational Researcher</i>, 27; 28-3<br /><br />

                                         </p>

                                     </blockquote>
                                 </div>
                             </mdb-row>
                    </mdb-container>
                </div>
            </div>
        </div>
    </div>
</div>
"},null]}