{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit2.vue?vue&type=template&id=34c6d664&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit2.vue","mtime":1594192379167},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:
<div class="about">
    <div class="border border-light p-3 mb-5 rounded ">
        <div class="row">
            <div class="col-sm-4 col-lg-3">
                <nav id="navbar-example3" class="navbar navbar-light sticky-top flex-column mt-4">
                    <a class="navbar-brand" href="#">Unit 2</a>
                    <nav class="nav nav-pills flex-column">
                        <a class="nav-link" href="#item-1">2.1 Introduction</a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ml-3 my-1" href="#item-1-1"> Unit Outcomes</a>
                            <a class="nav-link ml-3 my-1" href="#item-1-2"> Terminology</a>
                        </nav>
                        <a class="nav-link" href="#item-2">2.2 The Role of Media in Teaching and Learning </a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ml-2 my-1" href="#item-2-1">2.2.1 What is instructional media? </a>
                            <a class="nav-link ml-2 my-1" href="#item-2-2">2.2.2 The Role of Media in Teaching and Learning </a>
                        </nav>
                        <a class="nav-link" href="#item-3">2.3 Instructional Media Available for Teaching and Learning </a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ml-2 my-1" href="#item-3-1">2.3.1 Non-projected media </a>
                            <nav class="nav nav-pills flex-column">
                                <a class="nav-link ml-3 my-1" href="#item-3-1-1">2.3.1.1 Printed materials</a>
                                <a class="nav-link ml-3 my-1" href="#item-3-1-2">2.3.1.2 Non-projected visuals</a>
                                <a class="nav-link ml-3 my-1" href="#item-3-1-3">2.3.1.3 Non-projected display surfaces</a>
                            </nav>
                            <a class="nav-link ml-2 my-1" href="#item-3-2">2.3.2 Projected media</a>
                            <a class="nav-link ml-2 my-1" href="#item-3-3">2.3.3 Audio media </a>
                            <a class="nav-link ml-2 my-1" href="#item-3-4">2.3.4 Motion media</a>
                            <a class="nav-link ml-2 my-1" href="#item-3-5">2.3.5 Computer based multimedia and hypermedia </a>
                            <nav class="nav nav-pills flex-column">
                                <a class="nav-link ml-3 my-1" href="#item-3-5-1">2.3.5.1 Role of computers in instruction</a>
                            </nav>
                            <a class="nav-link ml-2 my-1" href="#item-3-6">2.3.6 Social Media</a>
                            <nav class="nav nav-pills flex-column">
                                <a class="nav-link ml-3 my-1" href="#item-3-6-1">2.3.6.1 Other capabilities of Social Media</a>
                                <nav class="nav nav-pills flex-column">
                                    <a class="nav-link ml-4 my-1" href="#item-3-6-1-1">2.3.6.1.1 Wiki</a>
                                    <a class="nav-link ml-4 my-1" href="#item-3-6-1-2">2.3.6.1.2 Blogs</a>
                                </nav>
                            </nav>
                            <a class="nav-link ml-2 my-1" href="#item-3-7">2.3.7 Mobile learning technologies</a>

                        </nav>
                        <a class="nav-link" href="#item-4">2.4 Trends in Media Technologies</a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ml-3 my-1" href="#item-4-1">2.4.1 Wireless technology: What is it? </a>
                        </nav>
                        <a class="nav-link" href="#item-5">Unit summary</a>
                        <a class="nav-link" href="#item-6">Assignment</a>
                        <a class="nav-link" href="#item-7">References</a>
                    </nav>
                </nav>
            </div>

            <div class="col-sm-8 col-lg-9">
                <div data-spy="scroll" class="scrollspy-example z-depth-1 mt-4 shadow-lg p-3 mb-5 rounded" data-target="#navbar-example3"
                     data-offset="0">
                    <mdb-container fluid>
                        <mdb-row class="bg-primary text-justify">
                           
                            <h1 class="h1-responsive">Unit 2</h1>
                            <h1 class="h1-responsive">Media Technologies Used for Teaching and Learning</h1>
                            <br />
                            <h2 id="item-1" class="h2-responsive">2.1 Introduction</h2>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    In this unit, we will discuss the different media available
                                    for teaching and learning.   This unit will explore both the
                                    traditional and the current technologies that we could use to
                                    enhance teaching and learning. We will also look at the
                                    advantages and disadvantages of using the various instructional
                                    media for teaching and learning and discuss the trend in the use
                                    of media and technologies so that we are prepared for the changes
                                    that are likely to occur in teaching and learning.
                                </p>
                                <p class="text-justify meme">
                                    Like we indicated in the introduction to this module,
                                    you will be given some self-assessment activities to
                                    carry out on your own. Again you are requested to
                                    ensure that you actually carry the activities out
                                    before you continue reading the module.
                                </p>
                                <div class="note note-info">
                                    <blockquote class="blockquote bq-info">
                                        <h4 id="item-1-1"><i class="fas fa-paper-plane"> Unit Outcomes</i></h4>
                                        <p class="text-justify">
                                            Upon completion of this unit you will be able to:
                                            <ul style="list-style-type:square;">
                                                <li>identify the range of instructional media available for teaching and learning</li>
                                                <li>differentiate between traditional and current technologies that are used during instruction </li>
                                                <li>discuss the advantages and disadvantages of using the different types of media during instruction.</li>


                                            </ul>
                                        </p>
                                    </blockquote>
                                </div>
                                <br />
                                <div class=" note note-success text-justify">
                                    <blockquote class="blockquote bq-success">
                                        <h4 id="item-1-2"><i class="fas fa-check-square"> Terminolgy</i></h4>


                                        <p>
                                            <kk> Instructional Media</kk>:Anything that carries information between
                                            a source and a receiver. For example; diagrams, printed materials,
                                            computers, PowerPoint slides, and instructors.<br /><br />

                                            <kk>Hypermedia</kk>:
                                            Refers to a computer software that uses elements of text,
                                            graphics, video, and audio and is connected in such a way
                                            that the user can easily move within the information.<br /><br />


                                            <kk>Dale's Cone of Experience</kk>:
                                            A model used to provide an intuitive model of the correctness
                                            of various kinds of audio-visual media. It informs viewers of how much people remember
                                            based on how they encounter information.<br /><br />

                                            <kk>Non-Projected Media</kk>:
                                            Non-projected media refers to the range of
                                            media resources that do not require any equipment
                                            (hardware) to project them onto a screen for viewing.<br /><br />


                                            <kk>Projected Media</kk>:Projected media refers to media
                                            formats in which still images, text and graphics are
                                            enlarged through an OHP and displayed on a screen for
                                            viewing; motion and other media can be displayed via a
                                            computer projector.<br /><br />

                                        </p>

                                    </blockquote>
                                </div>
                            </div>
                        </mdb-row>
                        <br /><br />
                        <mdb-row class="bg-primary text-justify">

                            <h2 id="item-2" class="h2-responsive">2.2 The Role of Media in Teaching and Learning</h2>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    So far we have defined the terms 'educational technology' and 'communication.'
                                    We have noted the importance of effective communication in a classroom
                                    in order to facilitate learning. As well as that, educational technology
                                    focuses on the use of resources to facilitate learning. We need to use
                                    instructional media to physically extend our ability to communicate.
                                    We have also looked at ICTs and their relationship to educational
                                    media and/or instructional technology. We have also noted from our
                                    discussion on communication and learning that one of the key
                                    elements of communication is the channel or medium of communication.
                                    The channel/medium carries the message to be shared. We  went on to
                                    say that the medium is indeed the message, since it affects how the
                                    message is received and interpreted by the target audience.
                                </p>
                                <p class="text-justify meme">
                                    Some of the main channels that we use in human communication are our senses.
                                    We therefore need to use media because they appeal to the different sensory
                                    channels and can make teaching and learning effective. We should therefore
                                    enrich the instructional environment with many and varied experiences including
                                    the use of instructional media.
                                </p>
                                <p class="text-justify meme">
                                    Perhaps before we discuss the role of
                                    instructional media in teaching and
                                    learning, we need to understand the term 'media'.
                                </p>
                            </div>
                            <br />
                            <h3 id="item-2-1" class="h3-responsive">2.2.1 What is instructional media?</h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    Heinich et al. (1996:8) defines a medium as a means of
                                    communication as it refers to anything that carries
                                    information between a source and a receiver. For example;
                                    diagrams, printed materials, computers, PowerPoint slides,
                                    and instructors. (Please note that the plural for medium is 'media').
                                    We can therefore conclude that, instructional media refers to the
                                    resources both human and non-human that a teacher deliberately
                                    selects and uses to carry information during instruction to
                                    facilitate learning.  These are the resources that serve an
                                    instructional function for education and training.
                                </p>
                                <p class="text-justify meme">
                                    The terms used to describe the instructional
                                    resources that teachers use in the classroom
                                    have changed over the years to reflect technological
                                    advances in the field of communication. For example,
                                    in the early part of the 20<sup>th</sup> Century, most of media
                                    available was in form of visuals and it was described
                                    as <i>'visual education</i>, but with the advent of the
                                    radio tape recorders, TV, and a combination of radio and visuals,
                                    the term <i>'audio-visual</i> was accepted. Then in the 1950s,
                                    the term <i>multimedia</i> was coined to describe the early
                                    combination of various still and motion media for increased educational effect.
                                    This reflected a methodology called 'multi-media'
                                    approach, which was based on the principle that a variety
                                    of audiovisual media and experiences could be combined to
                                    reinforce the value of each other.  Later in the 1980s,
                                    the computer technology was introduced into the classrooms
                                    and the technology changed into <i>computer multi-media'. Multimedia</i> refers
                                    to any combination of two or more media formats that are integrated to
                                    form an informational or instructional programme (Heinich, et al.; 1996).
                                    The term was adopted in connection with computers to refer to combinations
                                    of sounds and images stored in different devices and combined through computer
                                    software into an interactive programme.

                                </p>
                                <p class="text-justify meme">
                                    Today, we can combine a variety of media materials together using
                                    the computer technology to form<i> computer-based instructional media.</i>
                                    Since the early days of simpler media combinations, designers have
                                    understood that individual learners respond differently to various
                                    information sources and instructional methods, and so chances of
                                    reaching an individual are increased when a variety of media is
                                    used as a result of <i>multi-sensory involvement</i>.
                                </p>
                                <p class="text-justify meme">
                                    As you continue reading this module, you will
                                    come across the term <kk><i>'Hypermedia'</i></kk>. Hypermedia refers to
                                    a computer software that uses elements of text, graphics, video, and audio
                                    and is connected in such a way that the user can easily move within the information.
                                    Hypermedia is based on cognitive theories of how people structure knowledge and
                                    how they learn. It is designed to resemble the way people organize information
                                    with concepts and relationships. The relationships or associations between ideas
                                    are called <kk>'links'.</kk>

                                </p>
                                <p class="text-justify meme">
                                    When defining the term 'media', we need to differentiate between
                                    <i>materials and equipment. Material</i> is the term used to refer to
                                    those instructional resources that might be used to convey
                                    information without complete dependence on verbal symbols or
                                    language. For example, concrete objects, construction materials,
                                    pictures and graphics fall in this category. <i>Equipment</i> is what we use
                                    to display the media materials. These include projectors, video
                                    and audio players and computers to mention just a few.

                                </p>
                            </div>
                            <br />
                            <h3 id="item-2-2" class="h3-responsive">2.2.2 The Role of Media in Teaching and Learning</h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    Media serve a variety of roles in education. Their primary role is to help students
                                    learn and one way they do this is by providing an information-rich
                                    environment (Newby; Stepich; Lehman; & Russell, 2006:120).  For example,
                                    media can provide simulated experiences and students do not have to go to
                                    far off places to observe or experience certain reality. A good example is
                                    a flight simulator whereby student pilots learn how to fly an airplane while
                                    still on the ground. Computers also offer simulation capabilities where a motor
                                    mechanic student for example, can observe on a computer, how the engine runs
                                    (pistons running and fuel being burnt). For more on simulation refer to sub-sections 2.3.8.1
                                    (Role of Computers in Instruction) and 5.4.1 (The Computer as a Teacher - Simulation).
                                    In this regard therefore, we can conclude that the use of visuals can add meaning to words,
                                    thus enhancing learning.
                                </p>
                                <p class="text-justify meme">
                                    The following website offers live experience on simulation in the science
                                    subjects. You may also Google for other possible sites dealing with simulations
                                    and animations.<br />
                                    (<a href="https://phet.colorado.edu/en/simulations/category">https://phet.colorado.edu/en/simulations/category</a>)
                                </p>
                                <p class="text-justify meme">
                                    As  principle, educational experiences that involve the learner physically and that give concrete examples are retained longer than abstract experiences such as listening to a lecture. Instructional media help to add elements of reality for instance, when you include a picture or a highly involved computer simulation in lecture.
                                </p>
                                <p class="text-justify meme">
                                    Psychologist Jerome Bruner proposed that instruction should proceed from <kk>direct experience (enactive) to iconic representation</kk> of experience such as the use of pictures and films and finally to <kk>symbolic representation</kk> such as use of words (Bruner, 1966:49).   An icon is an image that resembles a real object.  In other words, students learn best when they observe the reality directly, but when the reality cannot be observed directly, the next best option is to use some representation of the reality through the use of icons such as pictures. The last alternative to use should be a symbolic representation of the reality through the use of words or any other symbols. The reason is that words do not resemble the objects that they represent and therefore cannot be understood unless the individual has some experience with reality about that particular word. Words on their own generally do not carry meanings as meanings are in people depending on their experience with those particular words.
                                </p>
                                <p class="text-justify meme">
                                    Writing  about concrete-abstract continuum, Edgar Dale in 1969 developed the <kk><i>"Cone of Experience", shown in the diagrams below:</i></kk>
                                </p>
                                <p class="text-center meme">
                                    <kk>Dale's Cone of Experience from (Heinich et al.; 1996: p.16)</kk><br />
                                    <img src="../assets/cone1.png" class="img-fluid" alt="Responsive image">
                                </p>
                                <p class="text-center meme">
                                    <kk>Dale's Cone of Experience Organized according to the degree of Abstraction</kk><br />
                                    <img src="../assets/cone2.png" class="img-fluid" alt="Responsive image">
                                </p>
                                <p class="text-justify meme">
                                    In the cone of experience, we start with the learner as participant in the actual experience, then move to the learner as an observer of the actual event, then we proceed to the learner as an observer of a mediated event (an event presented through some medium), and finally to the learner observing symbols that represent an event.
                                </p>
                                <p class="text-justify meme">
                                    The two diagrams above show how Edgar Dale's "Cone of Experience" organized learning experiences according to the degree of concreteness each possesses. At the bottom is hands-on experience but as you ascend the cone, concrete experience begins to drop out with the stimuli becoming more abstract. At this stage, the stimuli require more skill on the part of the learners to interpret the images they carry.  That is why a lecture, even when illustrated, is considered as an abstract presentation.
                                </p>
                                <p class="text-justify meme">
                                    Note that the cone of experience is broad-based at the bottom where direct and purposeful experiences are provided and gets very narrow at the top where verbal symbols are provided. Also note the interdependent nature of learning experiences and instructional materials.   Learning experiences at the bottom of the cone tend to hold students' attention longer and involve active student participation. Media used at the top of the cone are said to be more passive but suitable for transmitting large amounts of information quickly.
                                </p>
                                <div class="note note-primary text-left">
                                    <blockquote class="blockquote bq-primary">
                                        <i class="fas fa-tools"> Activity 2.1</i><br />
                                        Select any media of your choice and discuss how/why you would use it in the classroom based on Dale's Cone of Experience according to the degree of abstraction.
                                    </blockquote>
                                </div>
                                <br /><br />
                                <p class="text-justify meme">
                                    Media serve as extensions of our efforts to communicate with our students. A large percentage of things that we learn are a direct result of our visual and audio-visual experiences. Our senses are the gateway to the acquisition of knowledge. According to Sampath (1981), research shows that we learn:
                                    <ul>
                                        <li>83% through the sense of sight;</li>
                                        <li>11% through the sense of hearing;</li>
                                        <li>3.5% through the sense of smell;</li>
                                        <li>1.5% through the sense of touch;</li>
                                        <li>1% through the sense of taste.</li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    Research also shows that we remember:
                                    <ul>
                                        <li>
                                            10% of what we hear;
                                        </li>
                                        <li>
                                            50% of what we hear and see;
                                        </li>
                                        <li>
                                            90% of what we hear, see and do.
                                        </li>
                                    </ul>

                                    Hence the Chinese saying, <kk><i>"If I hear, I forget, If I see I remember, If I do, I Know".</i></kk>
                                </p>
                                <p class="text-justify meme">
                                    The above information clearly shows that visual senses are very important in the learning process and that retention of information is closely related to active learner involvement in the learning experience. Media can be used to support one or more of the following instructional activities:
                                </p>
                                <p class="text-justify meme">
                                    <ul style="list-style-type:square">
                                        <li>
                                            <kk>Gain attention</kk> - There is an attention-getting factor associated with instructional media that keeps the audience alert. For example, a picture on the screen, a question on the board, or music playing as students enter the classroom. All these serve to get the students' attention and arouse their interest.
                                        </li>
                                        <li>
                                            <kk>Recall of prerequisites</kk> - Media can help students recall what they learned in the last class, so that new materials can be attached to and built upon it.
                                        </li>
                                        <li>
                                            <kk>Enhance retention and transfer</kk> - Instructional media help students visualize a lesson and transfer abstract concepts into concrete, easier to remember objects.
                                        </li>
                                        <li>
                                            <kk>Support learning through examples and visual elaboration</kk> - One of the biggest advantages of media is to bring the world into the classroom when it is not possible to take the students into the world.
                                        </li>
                                        <li>
                                            <kk>Elicit student response</kk> - You can use media to get students to participate during the lesson.
                                        </li>
                                        <li>
                                            <kk>Present new content</kk> - Media helps to make the presentation of new content more memorable and helps to deliver new content. Media can serve as sources of information e.g. use of real objects, maps, diagrams, and photographs to generate content for the lesson.
                                        </li>
                                        <li>
                                            <kk>Assess performance</kk> - Media can be an excellent way to pose assessment questions for the class to answer.

                                        </li>
                                        <li>
                                            <kk>Provide feedback </kk> - Media can be used to provide feedback relating to a test or class work.
                                        </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    Media also have the following advantages during instruction:
                                    <ul>
                                        <li>
                                            <kk>Overcome physical limitations.</kk> Occasionally, instruction faces some physical limitations e.g. when inside details need to be observed. In such cases, models can be used.
                                        </li>
                                        <li>
                                            <kk>Help learners to interpret information</kk> in a way that they experience meanings similar to those intended by the communicator.
                                        </li>
                                        <li>
                                            <kk>Improve the quality of learning.</kk> When there is a careful integration of pictures and words, media can communicate elements of knowledge in a well-organized, specific, and clearly defined manner.
                                        </li>
                                        <li>
                                            <kk>The length of time required for instruction can be reduced.</kk> Media saves on teaching time. Hence the famous saying <i>a good picture is worth a thousand words'</i>.
                                        </li>
                                        <li>
                                            <kk>Instruction can be provided when and where desired or necessary</kk>. When instructional media are designed for individualized use, then a student can study at a time and place that is personally convenient.
                                        </li>
                                        <li><kk>Stimulate problem solving.</kk></li>
                                        <li><kk>Provoke learners to form or change attitude of mind.</kk></li>
                                    </ul>
                                </p>
                            </div>
                        </mdb-row>
                        <br /><br />
                        <mdb-row>
                            <h2 id="item-3" class="h2-responsive text-left">2.3 Instructional Media Available for Teaching and Learning</h2>
                            <div class="ml-5">

                                <p class="text-justify meme">
                                    There are different ways of categorizing instructional media, and for the
                                    purposes of this module we will use the following categories to group the range
                                    of instructional media for teaching and learning which are borrowed from Heinich
                                    et al. (1996):
                                </p>
                                <p class="text-justify meme">
                                    <ol>
                                        <li>Non-projected media;</li>
                                        <li>Projected media;</li>
                                        <li>Audio media;</li>
                                        <li>Motion media;</li>
                                        <li>Computer-based multimedia and hypermedia. </li>
                                        <li>Web-based media </li>
                                        <li>Social Media</li>
                                    </ol>
                                    <br />
                                    Let us now discuss each one of these categories of media. We will start
                                    by looking at the non-projected media.
                                </p>
                            </div>
                            <br />
                            <h3 id="item-3-1" class="h3-responsive text-left">2.3.1 Non-projected media </h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    Non-projected media refers to the range of media resources that do not require
                                    any equipment (hardware) to project them onto a screen for viewing.  Non-projected
                                    media include: real objects, models, non-projected visuals (still pictures, charts,
                                    graphs, drawings, posters, cartoons and comics and book illustrations),
                                    visual display surfaces, and printed materials.
                                </p>
                                <p class="text-justify meme">
                                    Many of the non-projected media that are mentioned and discussed are so common that instructors are inclined to underestimate their instructional value. Most of them are also readily available from textbooks and magazines, as well as from the immediate environment of the school. They are inexpensive, easy to use and some can be obtained at  no cost at all. They can also be produced or developed by teachers. <i>Please note that media do not have to be expensive or exotic to be useful for instruction. What matters is the effectiveness and appropriateness of the media in achieving the instructional goal.</i>    Let us discuss each one of these types of media in some detail.
                                </p>
                                <p class="text-justify meme">
                                    <kk> Real Objects</kk><br />
                                    Everywhere in our environment, real things become sources of information or content for teaching and learning. Such objects can also serve as stimulators for learning when they are studied, handled, tasted, and manipulated (Erickson & Curl, 1972:86).  Real objects include; tools, coins, rocks, artifacts or material remains such as costumes, plants, animals, etc.  Real objects are some of the most accessible and interactive materials for educational use.  Real objects fit almost at the bottom of Dale's Cone of Experience and will be most effective especially for learners who are encountering a subject about which they have had little direct experience in their daily lives.

                                </p>
                                <p class="text-justify meme">
                                    Real objects may be used as they are, or they can be modified to enhance instruction. Examples of modifications include:
                                    <ul>
                                        <li>
                                            <i>Specimen</i> where actual plants and animals or parts are preserved for later use and close inspection.
                                        </li>
                                        <li>
                                            <i>Exhibits</i> where collections of artifacts of either historical or scientific nature are brought together with printed information to illustrate a point.
                                        </li>
                                        <li>
                                            <i>Cutaways</i> where devices such as machines have one side cut away to allow close observation of the inside details or inner workings (Heinich et al.; 1996:102).
                                        </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    Besides using real objects to present information, raise questions, and providing hands-on experiences, real objects also play a variable  role during the evaluation phase of instruction.  They can be displayed in a central place for learners to identify them, describe their function, or  compare and contrast them.
                                </p>
                                <p class="text-justify meme">
                                    <kk>Models</kk><br />
                                    Models refer to three-dimensional representations of a real thing. Things in the real world always have three dimensions. <kk>They have a length, a width and a depth</kk>. Whenever we teach, we need to create as much reality as possible by representing the things, as they would appear in real life.  However, this is not always possible.   For example, you might visit a hydro-electricity power station but still fail to understand how the generator works since you need to look inside the generator to understand how it works. In such a case, a model might be necessary. A model is a scaled representation of the object that it represents. The model might be a true copy of the actual object, might be larger, or even smaller. It might be complete in details or simplified for instructional purpose.  Models can provide learning experiences that real things cannot provide. For example, a model can be dismantled to provide the interior view of the object, which cannot be done with real objects.

                                </p>
                                <p class="text-center meme">

                                    <img src="../assets/cow.png" class="img-fluid" alt="Responsive image"><br />
                                    <kk><i>Model of a cow</i></kk>
                                </p>
                                <p class="text-justify meme">
                                    We use models when:
                                    <ul>
                                        <li>
                                            Inside details must be observed and cannot be better shown using cross-sectional diagrams.
                                        </li>
                                        <li>
                                            Too many details which are all relevant appear in a diagram making it difficult to interpret.
                                        </li>
                                        <li>
                                            When a third dimension (depth) aids understanding of a concept such as volume in Mathematics.
                                        </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    Models can be manipulated by adding colour, enlarging , or reducing them.  There are four types of models that we can use namely:
                                    <ul>
                                        <li>
                                            <kk>solid models</kk> that are used for the recognition of external features e.g. the toys that we buy for the children;
                                        </li>
                                        <li>
                                            <kk>cross-sectional models</kk> or cutaways such as those used in science laboratories e.g. animal and human anatomy, machines, engines, etc.;
                                        </li>
                                        <li>
                                            <kk>construction models</kk> which can be easily put together; and
                                        </li>
                                        <li>
                                            <kk>working models</kk> which are used to demonstrate how the object works.
                                        </li>
                                    </ul>
                                </p>
                                <br />
                                <div class="container meme">
                                    <div class="row">
                                        <div class="col">
                                            <img src="../assets/pic1.png" class="img-fluid" alt="Responsive image"><br />
                                            <kk>Construction Models</kk>
                                        </div>
                                        <div class="col">
                                            <img src="../assets/pic11.png" class="img-fluid" alt="Responsive image"><br />
                                            <kk>working models</kk>
                                        </div>

                                    </div>

                                </div>
                                <br />
                                <p class="text-justify meme">
                                    Both models and real objects should be used whenever realism is necessary for learning to take place. The discussion in the next section will help you look closely at printed materials as another media for communication.
                                </p>
                                <div class="note note-primary shadow-lg p-3 text-left rounded">
                                    <blockquote class="blockquote bq-info">
                                        <i class="fas fa-tools"> Activity 2.2</i><br />
                                        <ol>
                                            <li>
                                                Explain with examples why you should use a real object in the classroom.
                                            </li>
                                            <li>
                                                Give reasons why you should use models as media in the classroom.
                                            </li>
                                        </ol>
                                    </blockquote>
                                </div>
                            </div>
                            <br />
                            <h4 id="item-3-1-1" class="h4-responsive text-left">2.3.1.1 Printed materials</h4>
                            <div class="ml-5">
                                <p class="text-justify  meme">
                                    Printed materials comprise of all textual and other materials that can be run off in large numbers on a photocopier or printing machine to be used by students or trainees.    Printed materials include; textbooks, fiction and non-fiction books, pamphlets, manuals, handouts, word processed documents, assignment sheets, study guides, and resource materials for group exercises such as instruction sheets and data sheets.
                                </p>
                                <p class="text-justify  meme">
                                    As you might well be aware, printed materials, especially textbooks, have long been the foundation of classroom instruction.   Print media continues to be the most single, most common category of teaching and learning support materials. Even as computer-based multimedia and hypermedia invade the classrooms, through electronic communication such as e-mail systems, database networks, World Wide Web, Hypertext mail, and Portable Document Formats, the role of print is far from being over. Instead, the role of print is being enhanced by the information revolution as the amount of reading and printing that a typical person will engage in increases.   The most common application of text is to present information to students who read the content contained in printed media either for class discussion or for study.
                                </p>
                                <p class="text-justify  meme">
                                    Printed materials can easily be abused in their usage especially because of the ease with which the materials can be obtained, reproduced and circulated. Therefore, like all other media materials, use of print should be planned. As a teacher, you should determine the learning objectives to be achieved  and then select the print materials that would facilitate your students to achieve those objectives.    Always direct students' reading of printed materials with objectives and questions and supplement the print with other media. Earlier on we identified different types of printed materials. Let us briefly define them.
                                </p>
                                <p class="text-justify  meme">
                                    <kk>Text books</kk>- these are printed materials, in hard copy or electronic, used either for mass instruction, for individual or for group instruction. They serve as a source of information for a particular course, subject or programme. A textbook might be the chief source, a co-basic source, or a supplementary source of information meant to enrich the other sources. E-materials (e-books) are now very common in schools in developed countries. Book readers and Tablets or even mobile phones are used to read e-materials.
                                </p>
                                <p class="text-justify  meme">
                                    <kk>Handouts</kk>- these comprise of the different types of information-providing materials that are given out to students as single loose pages or a number of pages, usually in connection with a taught lesson or programme. They include; sets of notes (complete or in skeleton form), tables, diagrams, maps, or any other illustrations or support materials. In the technological era, electronic handouts are sent by email, accessed at designated websites, and downloaded from school websites and saved on CD's or other portable storage devices such as memory sticks. They can also be stored in mobile devices and used at any time.
                                </p>
                                <p class="text-justify  meme">
                                    <kk>Assignment sheets</kk>- comprise of materials given to students describing the tasks to be carried out. They include; problem description sheets, reading lists, laboratory recording sheets, briefing sheets for projects and seminars, etc. Again, teachers can also use the current technologies to give assignment instructions to learners electronically.
                                </p>
                                <p class="text-justify  meme">
                                    <kk>Resource materials for group exercises</kk> - comprise of the various printed materials (both hard and electronic) that are used in connection with group learning exercises. For example; background reading material, instruction sheets, etc.
                                </p>
                                <p class="text-justify  meme">
                                    <kk>Worksheet</kk>- A worksheet is a device by which the teacher helps the students to work as far as possible to his/her full capacity. Worksheet encourages students to think for themselves about the results of their work and to draw conclusions. The new technologies have made it possible for worksheets to be downloaded as templates which can be easily used, modified, saved and re-used.
                                </p>
                            </div>
                            <br />
                            <h4 id="item-3-1-2" class="h4-responsive text-left">2.3.1.2 Non-projected visuals</h4>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    Non-projected visuals refer to media materials that appeal to the sense of sight and do not require any equipment for viewing. Among the non-projected visuals include; still pictures, drawings, charts, graphs, posters, cartoons and comics.
                                </p>
                                <p class="text-center meme">

                                    <img src="../assets/senses.png" class="img-fluid" alt="Responsive image"><br />
                                    <kk><i>A drawing showing the 5 senses</i></kk>
                                </p>
                                <p class="text-justify meme">
                                    Many of these materials can be easily obtained yet they can be used in many ways at all levels of instruction as well as in all disciplines. Most of them are very useful in stimulating creative expression.   Many of the non-projected visuals are available in textbooks and other printed materials, from computer software and multimedia programmes.
                                </p>
                                <p class="text-justify meme">
                                    <kk>Still Pictures</kk><br />
                                    Still pictures are photographic representations or images of people, places, activities, and objects. Among the most common still pictures that are used during instruction include; photographs and illustrations from books, calendars, and magazines. Still pictures are mainly two-dimensional but using a series of still pictures taken from different scenes and angles or positions could compensate this shortfall.

                                </p>
                                <p class="text-justify meme">
                                    Photographs are particularly very useful when you want students to observe certain phenomena and describe their observations as a way of training them in analytical and observation skills.    Still pictures are also useful when you want to illustrate a certain concept; that is, how something looks like. We need to train our students to understand that textbook pictures and illustrations are not decorations and should be read and interpreted as they are also meant to increase understanding of the concepts being presented. As the saying goes, One picture paints a thousand words!' So encourage the students to give attention to them.
                                </p>
                                <p class="text-justify meme">
                                    <kk>Drawings</kk><br />
                                    Drawings are graphic materials that employ graphic arrangement of line and symbols to represent the outline inter - relationships or key features of a person, place, things or concept. Drawings show relationships or help to explain processes such as how something works or is constructed. Drawings help to simplify whatever you intend to teach and make the message easier to understand.
                                </p>
                                <p class="text-justify meme">
                                    Drawings can be used in all phases of instruction from introduction to evaluation. Drawings are readily available in textbooks and other classroom materials. As teachers we should learn to use drawings especially freehand ones to provide a conceptual structure of whatever we teach in order to aid understanding.
                                </p>
                                <p class="text-justify meme">
                                    <kk>Charts</kk><br />
                                    A chart is a combination of pictorial, numerical or verbal material designed to present a clear visual summary of an important process or a set of relationships. Charts are visual representations of abstract relationships such as quantities, chronologies of events, and hierarchies. Most charts serve as visual summaries containing a mix of visual and verbal elements. They could summarize data, explain a process, or describe a set of relationships.

                                </p>
                                <p class="text-justify meme">
                                    <kk>Types of charts</kk><br />
                                    Charts are classified depending on their function and for classroom purposes; we could identify the following types of charts:
                                    <ul>
                                        <li>outline and tabular charts;</li>
                                        <li>flow, organization and process charts;</li>
                                        <li>tree and stream charts;</li>
                                        <li>maps</li>
                                        <li>time-line charts.  </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    Outline charts list the key points and sub-points in material while tabular charts present information in columns and are commonly used to present production or sales figures. On the other hand, flow, organization, and process charts are used to show functional relationships such as a manufacturing process or organization of a government department.
                                </p>
                                <p class="text-justify meme">
                                    Tree and stream charts are used to represent developments and relationships  for example, a family tree or when you want to explain the many end products that are obtained from coal.   As well, time-line charts are used when we want to summarize a sequence of events or to make chronological comparisons, for example, when we want to compare wheat production for different countries over a period of time.
                                </p>
                                <p class="text-justify meme">
                                    Whenever you decide to use charts, please ensure that:
                                    <ul>
                                        <li>
                                            you have a clear, well-defined instructional purpose;
                                        </li>
                                        <li>
                                            you represent only one major concept and if you have a lot of information to convey, develop or use a series of charts instead of using a single complex chart to form a flip chart;
                                        </li>
                                        <li>
                                            you have included the minimum of visual and verbal information needed to aid understanding.
                                        </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    <kk>Graphs</kk><br />
                                    Graphs are used to provide a visual representation of numerical data. They also illustrate relationships among units of data and trends in the data, such as when you want to show the relationship between time and amounts or yields. Graphs are more visually interesting to observe than when you have raw data.

                                </p>
                                <p class="text-justify meme">
                                    There are four major types of graphs: namely; <kk>bar, pictorial, circle and line graphs.</kk>
                                </p>
                                <p class="text-justify meme">
                                    <ul>
                                        <li>
                                            <kk>Bar graphs</kk> are mainly used to compare similar items at different times or different items at the same time.
                                        </li>
                                        <li>
                                            <kk>Pictorial graphs</kk> are an alternative form of bar graph where a series of simple drawings or pictures are used to represent values and each drawing or picture is then assigned a specific value that relates to the total amount.
                                        </li>
                                        <li>
                                            <kk>Pie or circle graphs</kk> involve dividing a circle into segments and each segment representing a part or a percentage of the whole. They are used to show fractional relationships
                                        </li>
                                        <li>
                                            <kk>Line graphs</kk> are used to show variations in two-dimensions e.g. changes in quantities or values over time.
                                        </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    The type of graph that you use must depend on the complexity of the information that you wish to present.  In today's world, you can easily create your own graphs using the computer. All that you need is to input data into the computer and give a command for the computer to create the type of graph that you need. Most spreadsheet programmes like <i>Microsoft Excel</i> have graph and chart options and you can use it to create graphs from numerical data.
                                </p>
                                <p class="text-justify meme">
                                    <kk>Posters</kk><br />
                                    A poster incorporates visual combinations of bold design, colour and a brief written message meant to catch the attention of the viewer instantly in order to convey a message. Posters are meant to catch and hold the viewer,s attention long enough to communicate a message.  Usually posters carry persuasive messages or messages that influence the audience to act in certain way. For example, you might be carrying out a campaign in your school against child or drug abuse. Posters can be used to promote good health practices such as not using drugs. Posters are similar to charts but they are smaller, simpler in detail and bolder in content and style.

                                </p>
                                <p class="text-justify meme">
                                    There are two types of posters: namely; <kk>single-glance and stop and study posters. Single glance posters </kk>mainly appeal to emotions and can easily be read and understood without any spoken word.<kk> Stop and study</kk> posters require you to look closely at the poster to interpret it. An effective learning technique is to have your students design posters as part of a class project on a topic you have discussed in class or on a topical issue you are interested in promoting some positive attitudes.
                                </p>
                                <p class="text-justify meme">
                                    <kk>Cartoons and comics</kk><br />
                                    A cartoon is an interpretive picture that makes use of line, symbols and exaggeration to represent ideas, people, events, or situations in pictorial form.  Cartoons are mainly used to influence public opinion.   Cartoons employ the principle of caricature (gross and ludicrous exaggeration or distortion of parts of a whole to emphasize the part i.e. the nose, or the chin). A comic is a form of cartoon in which the characters enact a story in a certain sequence to create a continuous pictorial story.   Both cartoons and comics are humorous and interesting, easy to read and excite the students. Appreciation and interpretation however depends on the experience and ability level of the students.  Therefore, be sure that the cartoons and comics are within the experiential and intellectual range of your students.

                                </p>
                            </div>
                            <div class="note note-primary shadow-lg p-3 text-left ml-5 rounded">
                                <blockquote class="blockquote bq-info">
                                    <i class="fas fa-tools"> Activity 2.3</i><br />

                                    Create a poster or chart explaining a concept in a lesson. Present the media to the course lecturer for assessment.
                                </blockquote>
                            </div>
                            <br />
                            <h4 id="item-3-1-3" class="h4-responsive text-left">2.3.1.3 Non-projected display surfaces</h4>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    For you to use many of the non-projected visuals such as photographs, drawings, charts, graphs, or posters, you need to have a certain way of displaying them. The most commonly used classroom display surfaces include; the chalkboard, multipurpose board, pegboard, bulletin board, cloth board, exhibits, flip charts, and dioramas.
                                </p>
                                <p class="text-justify meme">
                                    <kk>The chalkboard</kk> is the most common display surface in the classroom. Though commonly used to support verbal communication, it can be used to draw visuals to illustrate the content of your lesson. Graphics such as sketch drawings; diagrams, charts and graphs can be drawn on the chalkboard for display in class.
                                </p>
                                <br />
                                <div class="container meme">
                                    <div class="row">
                                        <div class="col">
                                            <img src="../assets/board1.png" class="img-fluid" alt="Responsive image"><br />
                                            <kk>Visual Display  Boards</kk>
                                        </div>
                                        <div class="col">
                                            <img src="../assets/board2.png" class="img-fluid" alt="Responsive image"><br />
                                            <kk>  Chalk Board</kk>
                                        </div>

                                    </div>


                                    <br />
                                    <p class="text-justify meme">
                                        <kk>Multipurpose boards</kk> are also called whiteboards or marker boards. As the name suggests, they can be used for more than one purpose. They can be used to write on, and to project slides and overhead transparencies. These types of boards are preferred for use around computers since chalk dust can harm computers and disks. The smooth, white plastic surface of a multipurpose board requires a special erasable marker to write. You should avoid using permanent felt-tip markers as they damage the surface permanently.
                                    </p>
                                    <p class="text-justify meme">
                                        <kk>A bulletin board</kk> is a surface on which bulletins or <i>brief news and announcements</i> of urgent interest are posted for public notice.  A bulletin board is a surface of variable size and shape made of material that holds pins, thumbtacks, and other materials without damaging the board.   A bulletin board could be used to display students' work and help to reinforce students' efforts to do a good job.
                                    </p>
                                    <p class="text-justify meme">
                                        <kk>Cloth board</kk> is constructed of cloth stretched over a backing material such as plywood, masonite, or heavy cardboard. The cloth used could be made of flannel or felt material with a rough surface or from an old blanket for visuals to stick on. The visuals to be displayed on a cloth board should be able to hold onto the cloth by backing the visuals or other items to be attached with a coarse, hook-like texture.  You could also use coarse sandpaper on the back of visuals for attachment to a cloth board.  Cloth boards are useful when describing a certain process or when narrating a story since the visuals could be displayed in a sequence one after the other.
                                    </p>
                                    <p class="text-justify meme">
                                        <kk>Flip Chart</kk> is a pad of large paper fastened together at the top and mounted to an easel (flip chart stand). Each individual sheet can hold limited verbal/visual message. The message could be written while the presenter is talking or can be prepared in advance.  The most common use of flip charts is for drawing of key illustrations and writing key words during a presentation. It is convenient to use a flip chart since you do not need electric power, it is portable, and only requires marking pen for writing or drawing.
                                    </p>
                                    <p class="text-center meme">
                                        <img src="../assets/chart.png" class="img-fluid" alt="Responsive image"><br />
                                        <i>  Flip Chart on a stand</i>
                                    </p>
                                    <p class="text-justify meme">
                                        <kk>Exhibits</kk> are displays of various objects and visuals designed to form an integrated whole for instructional purposes. Exhibits could include; real objects, models, as well as graphic materials. For example, when teaching a topic on rocks, you might have an exhibition of different types of rocks for students to identify.
                                    </p>
                                    <p class="text-justify meme">
                                        <kk>Dioramas</kk> are static displays consisting of a three-dimensional foreground and a flat or two-dimensional background to create a realistic scene. The term 'diorama' is derived from the Greek language and it means 'to see through'. This refers to a medium that enables a teacher to bring little sections of the real world into a classroom for the students to examine.  Dioramas represent three-dimensional scenes often in miniature form to represent natural settings. Dioramas could be used to illustrate different concepts.  For example, in geography they can be constructed to illustrate how certain landforms like craters, rift valleys, etc. are formed.
                                    </p>
                                    <p class="text-center meme">
                                        <img src="../assets/box.png" class="img-fluid" alt="Responsive image"><br />
                                        <kk> Example of Diorama showing a waterfall and boxes (3 dimensions)</kk>
                                    </p>
                                    <p class="text-justify meme">
                                        Before you continue reading the module, please stop for a while and carry out the following activity.
                                    </p>

                                    <div class="note note-primary shadow-lg p-3 text-left rounded">
                                        <blockquote class="blockquote bq-info">
                                            <i class="fas fa-tools"> Activity 2.4</i><br />

                                            <ol>
                                                <li>
                                                    Using your own words, explain why printed materials dominate most instructional situations in Swaziland schools.
                                                </li>
                                                <li>
                                                    List the various non-projected media that we have discussed. What are the advantages of using each one of these non-projected visual media during instruction?
                                                </li>
                                            </ol>
                                        </blockquote>
                                        <p class="text-justify meme">
                                            <i>
                                                In your answer to question one, you need to explain why printed materials have continued to be used even when the new technologies have invaded the classrooms such as computers. Consider the advantages that we mentioned above.<br />
                                                In your answer to question two, you could mention the fact that non-projected media do not require any hardware equipment, nor do they need electricity. They are readily available from the environment, from textbooks and cost very little money if they have to be bought.
                                            </i>
                                        </p>
                                    </div>
                                </div>
                            </div>





                            <br />
                            <br />
                            <h3 id="item-3-2" class="h3-responsive text-left">2.3.2 Projected media</h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    Projected media refers to media formats in which still images are enlarged and displayed on a screen for viewing. Projection of the image is achieved by passing a strong light through transparent film, magnifying the image through a series of lenses and then casting it onto a reflective surface.   Among the projected media include; overhead projection, multi-image presentations, and computer image projection.
                                </p>
                                <p class="text-justify meme">
                                    <kk>Overhead Projection</kk><br />
                                    Overhead projection was once the most widely used audio-visual device in the classroom and in training. Computer projection (commonly PowerPoint) is widely used as well. Due to the fact that the image is large and you can manipulate or add to it while projecting, the overhead projector is versatile and can be used to communicate in every subject in the curriculum. A typical overhead projector is a simple device. Basically, it is a box with a large stage on top. For it to function, light from a powerful lamp inside the box is condensed by a special type of lens called  <kk><i>'Fresnel lens'</i></kk> and passes through a transparency placed on the stage. A transparency refers to the type of film used for overhead projection.

                                </p>
                                <p class="text-justify meme">
                                    A transparency is made of photographic film that is capable of being imprinted with an image or text by means of chemical or heat process. The individual sheets of transparent film are called <kk><i>"acetates"</i></kk> in reference to the chemical composition of the standard type of film used. Transparencies may be used either individually or might be made into a series of images consisting of a base visual with more transparencies added on top to form <kk><i>overlays</i></kk>. Overlays refer to sheets of transparent film, each containing additional information, that is laid over the base transparency. Overlays could be used to explain complex processes in a step-by-step manner by flipping the overlays one at a time and adding additional details to the base visual.
                                </p>
                                <p class="text-justify meme">
                                    During the projection, a lens-and-mirror system that is mounted on a bracket above the box turns the light beam at an angle of 90 degrees and then projects the image back over the shoulder of the presenter. This type of projection where light passes through the transparency is referred to as <kk><i>'trans-missive'</i></kk> type.   In the other type of projector, the light source is above the projector stage and shines down onto the transparency. The light is then reflected by a mirror-like surface beneath the transparency back up and through the lens system. This type is referred to as <kk><i>'reflective'</i></kk> type. The reflective type of projector does not produce brilliant light and does not perform as well as the trans-missive type. However, it is portable, lighter, and more compact than the trans-missive type.
                                </p>
                                <p class="text-center meme">
                                    <kk> Types of Overhead Projectors (adapted from Heinich et al.; 1996:141)</kk><br />
                                    <br />
                                    <img src="../assets/over1.png" class="img-fluid" alt="Responsive image"><br />

                                </p>
                                <p class="text-center meme">
                                    <br />
                                    <img src="../assets/over2.png" class="img-fluid" alt="Responsive image"><br />

                                </p>
                                <br />
                                <p class="text-justify meme">
                                    <kk>Creating Overhead Transparencies</kk><br />
                                    One of the advantages of the overhead projector is that the teacher and students can easily prepare their own transparencies. Some of the methods to use to prepare transparencies include; <kk>direct drawing method and computer printing</kk>. The direct drawing method involves drawing directly onto a transparency sheet (write-on transparency) using a transparency-marking pen (overhead projector pen). Overheads created by computers have transformed the task of creating overhead transparencies with the use of any word processing software to prepare simple verbal overheads which can then be printed on plain paper to make a master copy for photocopying.

                                </p>
                                <p class="text-justify meme">
                                    <kk>Advantages of the Overhead Projector</kk><br />
                                    The overhead projector has the following advantages:
                                    <ul>
                                        <li>
                                            <i>Brightness</i>- the lamp and the efficient optical system generates so much light on the screen that the overhead can be used with normal room lighting.
                                        </li>
                                        <li>
                                            <i>Eye contact</i>- the projector is operated from the front of the room with the presenter facing the audience allowing direct eye contact to be maintained.
                                        </li>
                                        <li>
                                            <i>Ease of use</i>- overhead projectors are easy to operate and portable.
                                        </li>
                                        <li>
                                            <i>Manipulability</i>- projected materials can be manipulated by the presenter. For example, the presenter can add details, notes, diagrams, highlight with colour, etc. during presentation.
                                        </li>
                                        <li>
                                            <i>Self-prepared materials </i>- the teachers and students can easily prepare their own transparencies.
                                        </li>
                                    </ul>

                                </p>
                                <p class="text-justify meme">
                                    <kk>Limitations of using overhead projectors</kk><br />
                                    Even though there are many advantaged of the overhead projector, there are limitations too. These may include:

                                </p>
                                <p class="text-justify meme">
                                    <ul>
                                        <li>
                                            The effectiveness of overhead projection presentation depends heavily on the presenter.
                                        </li>
                                        <li>
                                            Not self-instructional- overhead projection does not lend itself to independent study. It is mainly designed for large group presentation.
                                        </li>
                                        <li>
                                            Production process required- to use the overhead system, the material has to be made into transparencies by means of some production process.
                                        </li>
                                        <li>
                                            Keystone effect- distortion of images is common with the overhead projector than with other projection systems. This distortion of image is referred to as <kk><i>'keystone effect'</i></kk> (Heinich, et al, 1996:140-144).
                                        </li>

                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    <kk>Computer Image projection</kk><br />
                                    The computer is capable of using presentation graphics software to project computer images onto a screen. <kk><i>PowerPoint</i></kk> is an example of presentation software used on a computer connected to a data projector. PowerPoint allows the user to include text, draw pictures, produce diagrams, import digital photographs, include music, and create animation.

                                </p>
                                <div class="container meme">
                                    <div class="row">
                                        <div class="col">
                                            <img src="../assets/pp1.png" class="img-fluid" alt="Responsive image"><br />

                                        </div>
                                        <div class="col">
                                            <img src="../assets/pp2.png" class="img-fluid" alt="Responsive image"><br />

                                        </div>

                                    </div>

                                </div>
                                <p class="text-justify meme">
                                    Powerpoint presentation
                                </p>
                                <p class="text-justify meme">
                                    With the advent of digital imaging, <kk><i>digital projectors</i></kk> have taken a firm hold in instruction. These computer output devices such as the <kk><i>data projector</i></kk>, project digital images onto a projection screen, large monitor, or whiteboard so that they can be shared with a large group (Lever-Duffy et al; 2005).
                                </p>
                                <p class="text-center meme">
                                    <img src="../assets/projection.png" class="img-fluid" alt="Responsive image"><br />
                                    <kk><i>Latest type of Projection</i></kk>
                                </p>
                                <p class="text-justify meme">
                                    <kk>Steps for connecting a computer projector</kk>
                                    <ul>
                                        <li>
                                            Check the connector cables that came with the projector to see which kind of output it uses, such as DVI, VGA, S-Video, or USB. Check the ports on the back and front of your computer to make sure you have a corresponding port to the output cable. (Buy a conversion cable, such as S-Video to USB, if you do not have the correct type of port on your computer.)
                                        </li>
                                        <li>
                                            Connect the conversion cable to the original cable.
                                        </li>
                                        <li>
                                            Plug the AC power cord from the projector into a wall outlet. Power off your computer and make sure the projector is turned off. Plug the output cable from the projector to the appropriate port on your computer.
                                        </li>
                                        <li>
                                            Turn the power on to the projector and point it towards an empty wall or projector screen.
                                        </li>
                                        <li>
                                            Wait for a prompt to appear on the screen asking for the type of device you are using. Use the remote that came with the projector to choose the option that either says "PC" or the name of the output jack such as "VGA."
                                        </li>
                                    </ul>
                                </p>
                                <div class="note note-primary shadow-lg p-3 text-left rounded">
                                    <blockquote class="blockquote bq-info">
                                        <i class="fas fa-tools"> Activity 2.5</i><br />
                                        Using the Faculty of Education Audio Visual Lab, practice on how to connect a computer projector.
                                    </blockquote>
                                </div>
                            </div>
                            <br />
                            <h3 id="item-3-3" class="h3-responsive text-left">2.3.3 Audio media </h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    Audio media is rarely used during instruction yet students spend most of the time in class listening to the teacher.   Therefore, as teachers we can develop students' listening skills by using the audio media. Audio media refers to the use of human voice and other sounds for instructional purposes (Gathu, 2000:43).  Audio recordings can be prepared for group or individual listening and they can be used in a variety of ways. For example, a speech could be documented, a role-play or drama could be recorded, animal sounds could be recorded, and a meeting could also be verbally recorded.
                                </p>
                                <p class="text-justify meme">
                                    Audio media could be used in different formats which include:
                                    <ul>
                                        <li>Compact discs (CD)</li>
                                        <li>MP3/MP4 players</li>
                                        <li>Mobile phones</li>
                                        <li>Other digital electronic gadgets</li>
                                        <li>Podcasts </li>


                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    <kk>Examples of audio media usage in the classroom</kk>
                                    <ol>
                                        <li>
                                            Recording different sounds and playing them back to the students
                                        </li>
                                        <li>
                                            Learners recording their voices while reading paragraphs then listening for correctness of pronunciations, etc.
                                        </li>
                                        <li>
                                            Students with hearing problems or with learning difficulties can revisit classroom presentations in any of the subjects taught in order to reinforce what was taught in class.
                                        </li>
                                    </ol>
                                </p>
                                <p class="text-justify meme">
                                    <kk>Compact Discs</kk><br />
                                    A CD uses a tiny laser beam to retrieve the information from the disk. The CD allows us to store a lot of information. The instructor or students can selectively retrieve information from a CD since the digital storage format provides for random access of the data stored which means that you can directly go to and play any segment on a CD.  To use the CD, you will need a CD player though most computers have a CD deck as part of the computer accessories.
                                </p>
                                <p class="text-justify meme">
                                    Please note that once digitized, audio media can be delivered through the Internet.  The Internet allows you to find and download very specific audio clips for use in your classroom. The increasing availability of Internet audio has resulted in it becoming an emerging audio technology in today's classroom.
                                </p>
                            </div>
                            <br />
                            <h3 id="item-3-4" class="h3-responsive text-left">2.3.4 Motion media</h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    These refer to those media formats where moving images can be recorded for playback and viewing by the audience. Both sound and visual (picture) are recorded.
                                </p>

                                <p class="text-justify meme">
                                    <kk>Video media</kk><br />
                                    The word <kk>'video'</kk> comes from Latin and it simply means, <i>"I see"</i>. The primary meaning of video is the playing of moving images on a television type screen. Video images are recorded electronically on magnetic tape along with sound for playback.  Any media format that uses a television screen or monitor to present a picture can be referred to as video (e.g. DVD).  Originally, the concept of video was synonymous with broadcast television, but the concept has expanded dramatically in recent years. New technologies connected to television sets have been added such as home computers, video games and specialized cable TV services.   There are different formats of video. Among them are: video files, videodiscs, and compact discs.

                                </p>
                                <p class="text-justify meme">
                                    <kk> Videodisc</kk><br />
                                    A newer type of video medium called <kk><i>'digital video disc'</i></kk> (DVD) has rapidly replaced the video and laser discs.  DVD is a compact disc format for displaying motion video, which offers truly digital, optical recording, storage, and playback of full-motion video. A DVD has the same physical size as an audio CD or CD-ROM but it can hold four times as much data as a CD or CD-ROM.

                                </p>
                                <p class="text-justify meme">
                                    <kk>Digital Video Camera</kk><br />
                                    The most common option for creating digital video recording is using a digital video camera. A digital video camera captures and stores the target image in a digital format that can be downloaded to a personal computer or laptop. Some newer cameras can create a DVD that can be played instantly on any playback device. The resultant video files can then be manipulated, edited, and enhanced using digital video editing software. A digital video camera allows you to record digital images on storage devices and later transfer to a computer or for playback on a television. The user can edit the video on the camera before processing (using the camera) for final play on other devices.

                                </p>
                                <p class="text-justify meme">
                                    <kk>Current capabilities of video</kk><br />
                                    Currently video is used in many ways. Gone are the times of video cassettes! DVD's and video files are used often. While DVD's are common, video files are easily manipulated and stored. For an example, video files can be emailed easily, can be stored on data bases, and can be played online (e.g. YouTube videos),

                                </p>
                                <p class="text-justify meme">
                                    <kk>Advantages of motion media</kk>
                                    <ul style="list-style-type:square">
                                        <li>
                                            <i> Motion: </i> Moving images have an obvious advantage over still visuals when portraying concepts where motion is essential to mastery.
                                        </li>
                                        <li>
                                            <i> Processes:</i> Operations, such as assembly line steps or procedures where sequential movements are critical can be shown more effectively by means of motion media.
                                        </li>
                                        <li>
                                            <i> Risk-free observation:</i> Visual recordings allow learners to observe phenomena that might be dangerous to view directly such as volcanic eruption, warfare, etc.
                                        </li>
                                        <li>
                                            <i> Dramatization: </i>Dramatic creations can bring historical events and personalities to life. It allows us to observe and analyze human interactions.
                                        </li>
                                        <li>
                                            <i> Skill Learning: </i> Mastery of physical skills requires repeated observation and practice. Through recorded media, performance can be viewed over and over again for emulation.
                                        </li>
                                        <li>
                                            <i>Affective Learning:</i> Due to their great potential for emotional impact, video and film can be used to shape personal and social attitudes.
                                        </li>
                                        <li>
                                            <i>Problem solving: </i>Open-ended dramatizations are used to present unresolved confrontations, leaving it to viewers to discuss various ways of dealing with the problem (Heinich, et al., 1996:207).
                                        </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    Before you continue reading this module and in order to confirm that you have understood what we have discussed so far, please stop for a while and carry out the following activity.
                                </p>
                                <div class="note note-danger shadow-lg p-3 text-left rounded">
                                    <blockquote class="blockquote bq-danger">
                                        <i class="fas fa-microphone">Discussion <br />Activity 2.6</i><br />
                                        Online Discussion - There is much discussion today about the role of computers in the classroom.  The main point often brought up is that this technology overshadows all other instructional technologies (many of which we have described above).  Do you think the computer will indeed replace these other technologies? Support your answer.
                                    </blockquote>
                                    <i> In answering the above question, you will need to consider the issue of media integration so that you bring out the idea of all these other media that we have discussed being combined with computer technology. You could then explain how the various technologies could be combined with computer technology so that the computer is not seen as replacing the other forms of media during instruction. </i>
                                </div>
                            </div>
                            <br />
                            <h3 id="item-3-5" class="h3-responsive text-left">2.3.5 Computer based multimedia and hypermedia </h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    Despite technological advances, education has changed very little in some parts of the world.  Teachers still teach the same way they were taught and are comfortable using the tried-and-true strategies from which they learned. However, application of new technological tools makes many enhancements to these strategies possible (Lever-Duffy et al.; 2005).  To overcome any possible resistance to using the computer, it is best to begin by becoming more familiar with computers.
                                </p>
                                <p class="text-center meme">
                                    <img src="../assets/computers.png" class="img-fluid" alt="Responsive image"><br />
                                    <kk><i>Computers in a Classroom</i></kk>
                                </p>
                                <p class="text-justify meme">
                                    The computer has become one of the best instructional tools in today's classroom. The computer has the ability to control and integrate a wide variety of media, such as; still visuals, moving images or printed information. Computers perform tasks such as: complex calculations, data manipulation, word processing, and data presentation as well,.
                                </p>
                            </div>
                            <br />
                            <h4 id="item-3-5-1" class="h4-responsive text-left">2.3.5.1 Role of computers in instruction </h4>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    The computer can perform different functions. A computer can be an object of instruction, an instructional tool, and an instructional device. Let us look at these different functions of a computer in the classroom.
                                </p>
                                <p class="text-justify meme">
                                    <kk><i>As an object of instruction</i></kk><br />
                                    You can offer computer literacy to your student where you teach them the basics of computing, including learning about data processing and analysis, computer hardware and software, creating files and storing information, etc.
                                </p>
                                <p class="text-justify meme">
                                    <kk><i>As an instructional tool  </i></kk><br />
                                    You can also use the computer to serve the role of a typewriter for word processing and desktop publishing, to create other instructional media such as slides, to present information and data, to communicate with other people through e-mails, and as a source for data retrieval.
                                </p>
                                <p class="text-justify meme">
                                    <kk><i>As a writing tool</i></kk><br />
                                    The computer is being used widely for word processing and desktop publishing. As teachers, we need to encourage our students to embrace the new technologies.  Therefore, the more we promote usage of computers by students to write assignments, projects, and homework the more we promote its usage as a learning tool. We should even encourage the students to integrate media such as graphics, sound and motion into the content that they write.
                                </p>
                                <p class="text-justify meme">
                                    <kk><i></i>For calculating </kk><br />
                                    The computer can also serve as a tool during instruction which can aid in solving complex mathematical calculations just as you use a pocket calculator.
                                </p>
                                <p class="text-justify meme">
                                    <kk><i>For toring and retrieving information</i></kk><br />
                                    Today's students need to learn how to manage information, to store, retrieve, sort, and organize information, and also to evaluate their findings (Heinich et al.; 1996:231).  For inquiry and research, students can use <i><kk>databases</kk>, which are collections of related information organized for quick access to specific information </i>(Heinich et al.; 1996:231). Whereas a telephone book for example is a printed database, we can have databases also stored on your computer. A database is a versatile and easy-to-learn computer tool that can be used for research, and for gathering information.
                                </p>
                                <p class="text-justify meme">
                                    <kk><i>As an instructional device</i></kk><br />
                                    Computer assisted instruction helps students to learn specific skills. Students can use different software capable of providing them with complex tasks that can link them with real-world problems.    Such software can provide students with opportunities for drill and practice
                                    <i>practice (drill and practice is a method of teaching that presents a lengthy series of items to be rehearsed and it is used with skills that require repetitive practice for mastery),</i>
                                    tutoring
                                    <i>(the computer plays the role of a teacher),</i>
                                    offer simulation to real-life situations
                                    <i>(in a simulation, the learner confronts an approximation of a real-life situation to allow realistic practice without any risk or expenses otherwise involved)</i>
                                    making discoveries <i>(a general term used to describe activities that are undertaken by students using an inductive approach to learning) </i> and solving problems.
                                </p>

                                <p class="text-justify meme">
                                    Since the focus of this sub-section is to discuss computer-based multimedia and hypermedia, let us now define these two terms and then discuss the range of computer-based media.
                                </p>
                                <p class="text-justify meme">
                                    The term <kk><i>multimedia</i></kk> refers to any combination of two or more media formats that are integrated to form an informational or instructional programme. <kk><i>Computer multimedia</i></kk> systems incorporate the computer as a display device, management tool, and /or source of text, pictures, graphics, and sound (Heinich et al.; 1996:260).   Multimedia today is synonymous with a computer-based format that combines text, graphics, audio and even video into a single, coherent digital presentation.
                                </p>
                                <p class="text-justify meme">
                                    More than presenting information in multiple formats, <kk><i> Computer multimedia</i></kk>integrate the
                                    multiple media into a structured programme in which each element complements the other.
                                    The term multimedia was coined in the 1950s to describe early combinations of various still
                                    and motion media <kk><i>('multiple media' or 'a combination media')</i></kk> to increase educational effect. The term has now been adopted in connection with computers to refer to combinations of sound and images stored in different devices which are combined through computer software to form interactive programmes. Multimedia systems provide
                                    learning experiences to individuals and groups where multi-sensory involvement is emphasized.
                                </p>
                                <p class="text-justify meme">
                                    The term <kk><i>hypermedia</i></kk> refers to <kk><i>'linked media'</i></kk>. Hypermedia
                                    are computer software that use elements of text, graphics, video, and audio that are
                                    connected in such a manner that the user can easily move within the information.
                                    Each user uses a pathway that is unique to his/her style of thinking and processing
                                    information. Hypermedia provides a learning environment that is interactive and
                                    exploratory. Hypermedia is based on cognitive theories of how people structure
                                    knowledge and how they learn. You have been introduced to the various theories of
                                    learning in your EDC 100 course.  We also made reference to the learning theories
                                    in Unit 1 of this particular module. Please refer to the relevant section in Unit 1
                                    and also to your <kk>EDC 100 Teaching Principles and Practice</kk> course module to remind yourself on the cognitive learning theory.
                                </p>

                                <p class="text-justify meme">
                                    Hypermedia is designed to resemble the way people organize information with concepts and their relationships. These relationships or <kk><i>links</i></kk> are associations between ideas. For example, when you think about a bicycle, you create a link between ideas about transportation and recreation. With hypermedia, one can compose and display information that might include text, audio, and visual information. Using the example of the bicycle, the learner can connect the word 'bicycle' with a photograph of a girl riding a bicycle in the field.
                                </p>
                                <p class="text-justify meme">
                                    Computer hypermedia systems can be used for different instructional purposes. Among them are:
                                    <ul>
                                        <li>
                                            <i>Browsing- </i>where users navigate through information by choosing routes that are of interest.
                                        </li>
                                        <li>
                                            <i>Linking-</i>where users create their own special connections within the information.
                                        </li>
                                        <li>
                                            <i>Authoring- </i>The process of creating multimedia or hypermedia is called <kk><i>authoring</i></kk>. This is where users create their own unique collections of information by adding or linking text, graphics, and audio as they wish
                                        </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    The most common application of hypermedia authoring in a classroom is when students develop hypermedia projects that allow students either as individuals or as groups to create reports that summarize major efforts as in the case of a science experiment. Instead of merely compiling a written report, students could include written work with pictures, sound clips, video and links to describe what they did.
                                </p>
                                <div class="note note-primary shadow-lg p-3 text-left rounded">
                                    Let us pause for a little. Please carry out the following activity.
                                    <blockquote class="blockquote bq-info">
                                        <i class="fas fa-tools"> Activity 2.7</i><br />

                                        <ol>
                                            <li>
                                                Interview your colleagues to see how they think computers could affect their teaching. On the basis of the interviews conducted and based on your own views, what is your overall view about the role of computers in instruction?
                                            </li>
                                            <li>
                                                What is your view about the future of educational computing in Swaziland?
                                            </li>
                                        </ol>
                                    </blockquote>
                                </div>
                            </div>
                            <br />
                            <h3 id="item-3-6" class="h3-responsive text-left">2.3.6 Social Media</h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    In Unit 1 you were introduced to social media as an Internet-based form of communication. It is also commonly associated with Web 2.0 technology that focuses on integration, collaboration, and interaction. While you may collaborate or interact through social media platforms (e.g. Facebook and Twitter), Web 2.0 also allows collaboration through teaching and learning. Some of these media may be termed "Participative Delivery Systems." In this case participants are the major authors as they create the content and supporting materials. Some of these technologies include Wikis and Blogs.
                                </p>
                                <p class="text-justify meme">
                                    <i>Collaborative/Participative technologies</i> offer a range of new ways that support learning by enabling learners to share and exchange both ideas and their own digital products. The technologies provide opportunities for building tools not only for authoring interactive multimedia content, but also for enhancing readers' experience beyond multi-media presentation, for example, through sharing comments, in-book search, browsing, skimming, visualisation, summarisation, and non-linear reading. Below are some participative tools we can use.
                                </p>
                                <p class="text-justify meme">
                                    <kk>Google Docs (docs.google.com)</kk><br />
                                    Google Docs is a lightweight Web-based suite of office applications that includes a <i>word processor, a presentation tool</i>, and a spread sheet tool. With this tool, you can create, edit and share documents online. The three Google Docs tools support <i>multiple authors</i> editing the same document, presentation, or spread sheet at the same time, tracking revisions and showing, near real time, what each author is doing. Because the documents are stored online, they are available on any computer connected to the Internet. Import and export options allow one to upload Word docs, Excel, PowerPoint and PDFs and output back in the same format. One can also quickly publish what has been created online with a click of a button.

                                </p>
                                <p class="text-justify meme">
                                    Students can use Google Docs to coordinate group work, including group papers. Instructors can easily monitor individual contributions using Docs's revision tracking tools. Likewise, facilitators can simplify collaborative paper writing with colleagues by sharing the same document with multiple authors without the worry of coordinating various individual versions. Google Docs is free for anyone to use.
                                </p>
                                <p class="text-justify meme">
                                    <kk>Skype (www.skype.com)</kk><br />
                                    Skype is a powerful video and voice application. Wikipedia describes Skype as a software application that allows users to make telephone calls over the Internet. In addition to making telephone calls, users can use Skype to:
                                    <ol>
                                        <li>Make video calls (can actually see each other no matter how far apart you can be, </li>
                                        <li>Engage in video conferencing (e.g. listen to a lecture and be able to ask and answer questions)</li>
                                        <li>Send instant messages, and </li>
                                        <li>Transfer files from one computer to another</li>
                                    </ol>
                                </p>
                                <p class="text-justify meme">
                                    Skype is best known for its ability to let people make free calls from one computer to another-anywhere in the world. While most calls are free (depending on the service options one selects) when they are made to other computers, calls can also be made to mobile devices or landlines for a fee.
                                </p>
                                <p class="text-justify meme">
                                    Skype can be used as a means to connect users from around the world. This free and easy to use application can connect colleagues, students and researchers all within a web browser. So whether it is for office hours or to help students complete group work online, Skype is a great tool for any educator. The best thing about Skype is the ability to make free phone calls (with or without video).
                                </p>
                                <p class="text-justify meme">
                                    Some limitations of Skype however are that:
                                    <ol>
                                        <li>It does not support emergency calls (i.e., 911),  </li>
                                        <li>Calls may be dropped from time to time (depending on your internet speed), and </li>
                                        <li>Some organizations might block the use of Skype on their network. </li>
                                        <li>The cost of Skype varies depending on use. However, basic computer-to-computer phone calls can be made for free.</li>
                                    </ol>
                                </p>
                                <p class="text-justify meme">
                                    There are many reasons for using Skype in education. They  include:
                                    <ol>
                                        <li>
                                            <i>Virtual field trips: </i> trips that are not possible due to financial reasons or distance can still be taken using Skype to transport learners to another country or area.
                                        </li>
                                        <li>
                                            <i>Interviewing: </i>connecting with and speaking to an author or celebrity can bring classroom theory alive and make it real for learners.
                                        </li>
                                        <li>
                                            <i>Homework help or extra lessons: </i> teachers can offer help with homework, long-term projects or give extra lessons to learners who are lagging through Skype.
                                        </li>
                                        <li>
                                            <i>Guest appearances: </i>guest teachers or experts on a subject can teach learners through Skype or give an explanation directly from their work environment.
                                        </li>
                                        <li>
                                            <i>Illness: </i>learners who are hospitalized or who suffer from long-term illnesses and are schooled at home or hospital can also benefit by being included in lessons through the Skype platform.
                                        </li>
                                    </ol>
                                </p>
                                <p class="text-justify meme">
                                    <kk>Skype Requirements</kk><br />
                                    For Skype to work, the software must be installed in your computer, laptop, notebook, tablet or mobile phone. The person you want to communicate with must also have Skype installed in their gadgets. In this course you will have a chance to experience Skype when all the necessary requirements are in-place. However, through instructions on the course website, you should be able to experiment with other learners who have Skype installed on their gadgets.

                                </p>
                                <p class="text-justify meme">
                                    <kk>YouTube (www.youtube.com)</kk><br />
                                    YouTube is a video sharing website that enables users to upload video clips to the Web. Videos uploaded to YouTube can be accessed and viewed by a select group of users or open for anyone to view. Users can also view, comment, rate, embed, and link to their videos as well as the millions of other videos posted to the site. Signing up for YouTube is free and easy. Further, even if you do not plan to upload your own videos, signing up for an account enables you to bookmark your favourites and to create playlists.

                                </p>
                                <p class="text-justify meme">
                                    YouTube has become one of the largest repositories for video on the Internet, making it a great resource for educators. Staff and students can often find dozens, if not hundreds, of videos about the topics of their choice. YouTube has partnered with several universities and launched YouTube EDU focusing on university related videos and lectures. YouTube is also a great tool for creating personalized content allowing faculty to record lectures, introductions, and commentary.
                                </p>
                                <p class="text-justify meme">
                                    The benefits of YouTube is that it is free, easy to use, supports high definition (HD) content and users can set their videos to public or private. The only major drawback of YouTube is that it limits users to uploading videos that are 1 GB or less than 10 minutes in length. One other minor drawback is that a video can be removed from YouTube at any time throughout the semester. YouTube is free and does not cost anything to use.
                                </p>
                            </div>
                            <br />
                            <h4 id="item-3-6-1" class="h4-responsive text-left">2.3.6.1 Other capabilities of Social Media</h4>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    Social media platforms also allow users to have conversations, share information and create web content. There are many forms of social media, including blogs, micro-blogs, wikis, social networking sites, photo-sharing sites, instant messaging, video-sharing sites, podcasts, widgets, virtual worlds, and more.
                                </p>
                                <p class="text-justify meme">
                                    There are many ways in which information is conveyed from one person to the other. In the teaching/leaning process communication through social media is vital and its roles are numerous. Firstly it serves the purpose of the ease of learning. It provides learners with a situation where knowledge is abundantly available. Visuals help in adding meaning to words. As it is widely known in teaching, leaners understand better when they see and touch something. So when you explain abstract ideas then bring in a projector to show them what you mean, it helps to add the element of reality as they are seeing the object in front of them.
                                </p>
                                <p class="text-justify meme">
                                    Social media is used as extensions of our efforts to communicate with students. Research shows that a major percentage (83%) of what people learn is derived through the sense of sight. Social media are also used to support instructional activities like feedback to students' work, visualisation of a lesson, transferring of abstract concepts to concrete objects, and presentation of new content. Media also helps learners to overcome physical limitations, improves the quality of learning and assists to provoke learners to change attitude of mind.
                                </p>
                                <p class="text-center meme">
                                    <img src="../assets/social.png" class="img-fluid" alt="Responsive image"><br />
                                    <kk><i>Graphic showing different types of Social Media</i></kk>
                                </p>
                                <div class="note note-primary shadow-lg p-3 text-left rounded">

                                    <blockquote class="blockquote bq-info">
                                        <i class="fas fa-tools"> Activity 2.8</i><br />
                                        Conduct an Internet search and report the uses of social media in the classroom


                                    </blockquote>
                                </div>
                            </div>
                            <br />
                            <h5 id="item-3-6-1-1" class="h5-responsive text-left">2.3.6.1.1 Wiki</h5>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    A wiki is a type of free online writing space that allows users to add, modify and update its pages.  If something is missing or incorrect in a wiki and permissions allow you to edit the wiki, you can easily add your thoughts or make changes to the wiki. It is essentially a fully editable web site.
                                </p>
                                <p class="text-justify meme">
                                    Wikis can be used effectively by instructors for posting course information or lecture notes and inviting participation from learners. Notes can be distributed in the form of simple text, PowerPoint slides, or audio and video components. Learners can participate by adding their own notes and comments along with relevant links that they may have found. One can also create a discussion environment for a particular topic.
                                </p>
                                <p class="text-justify meme">
                                    Learners or groups of learners can be invited to create their own wiki, either with personal information or project information related to the topics being studied. Wikis can also be used as e-portfolios of learners' work for evaluation by the instructor. Brainstorming activities can be especially powerful using a wiki, and Frequently Asked Questions (FAQ) pages are also possible.
                                </p>
                                <div class="note note-primary shadow-lg p-3 text-left rounded">

                                    <blockquote class="blockquote bq-info">
                                        <i class="fas fa-tools"> Activity 2.9</i><br />
                                        On the course website, participate in the Wiki activity by entering new information and responding to other student's submissions.  The topic will be the uses of ICT's in the classroom.


                                    </blockquote>
                                </div>

                            </div>
                            <br />

                            <h5 id="item-3-6-1-2" class="h5-responsive text-left">2.3.6.1.2 Blogs</h5>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    A blog is a website on which an individual or group of users record opinions, information, etc. on a regular basis. While there are many uses of blogs, the actual art of doing it (blogging) is educationally sound for facilitating to learners because:
                                </p>
                                <p class="text-justify meme">
                                    <ul style="list-style-type:square">
                                        <li>
                                            Blogs provide a space for sharing opinions and learning in order to grow communities of discourse and knowledge; a space where learners and facilitators can learn from each other.
                                        </li>
                                        <li>
                                            Blogs help learners to see knowledge as interconnected as opposed to a set of discrete facts.
                                        </li>
                                        <li>
                                            Blogs can give learners a totally new perspective on the meaning of voice. As they explore their own learning and thinking, their distinctive voices emerge.
                                        </li>
                                        <li>
                                            Blogs foster ownership and choice.
                                        </li>
                                        <li>
                                            They help lead us away from learners trying to find what the facilitator wants in terms of an answer.
                                        </li>
                                    </ul>
                                </p>
                                <p class="text-justify meme">
                                    Below are steps to assist you to create your own personal blog. The link below is currently working. In-case there are problems with the link, a new one will be posted on the course webpage.
                                </p>
                                <p class="text-justify meme">
                                    <kk>Steps to creating your blog</kk>
                                    <ol>
                                        <li>
                                            Go to <a href=" http://www.blogger.com"> http://www.blogger.com</a>
                                        </li>
                                        <li>
                                            Click where it says "Create Your Blog Now"
                                        </li>
                                        <li>
                                            Fill in a <i>user name.</i> This can be anything you want - it is what you will use to sign in to your blog
                                        </li>
                                        <li>
                                            Select a <i>password</i>. This must be at least 6 characters long. Try to use a combination of numbers and letters, and think of something that others will not be able to easily guess.
                                        </li>
                                        <li>
                                            Select a <i>display name</i>. This will be used to sign your blog posts, so choose something that will protect your identity! It is recommended that you refrain from using your first and last name, or, if you can be easily located with your first name, choose a name that is somewhat disguising
                                        </li>
                                        <li>
                                            Enter an <i>e-mail address</i>. You will need this to register, and later on you can change your preferences so this won't appear on your blog in clear sight of visitors. Consider setting up a separate e-mail account for your blog - this helps protect you from online predators.
                                        </li>
                                        <li>
                                            Read the terms of service, and then click the box indicating you have done so.
                                        </li>
                                        <li>
                                            Click continue
                                        </li>
                                        <li>
                                            Give your blog a <i>title</i>. This is what will show at the top of your blog page.
                                        </li>
                                        <li>
                                            Choose a web address for your blog space. This will be displayed in the address bar as <a href=" http://yourblogspacename.blogspot.com">http://yourblogspacename.blogspot.com</a>
                                        </li>
                                        <li>
                                            Choose a template. Select from the templates the way you would like your blog to look. If you don't like any of the templates you see, just select one to get started. You can change or customize it later.
                                        </li>

                                    </ol>
                                </p>
                                <p class="text-justify meme">
                                    Once your blog has been created, you are ready to change your personal profile and begin posting!
                                </p>
                                <p class="text-justify meme">
                                    <kk>Posting on your blog </kk>
                                    <ol>
                                        <li>Click on "<u>Start Posting</u>" once your blog has been created.</li>
                                        <li>Create a <i>title</i> for your first posting and write your first post in the text box.</li>
                                        <li>Click "<u>Publish Post</u>" Publishing your post will make it live on your blog and visible on the Web.</li>
                                        <li>
                                            Each time you add a new post to your blog, you have to publish it before it goes up on the Web
                                            (<a href="https://www.contentbank.org">www.contentbank.org</a>).
                                        </li>
                                    </ol>

                                    Congratulations for having created your blog. More tasks on how to proceed with your blog will be posted on the course
                                    website. We now continue our discussion by looking at Mobile Learning (ML).
                                </p>
                            </div>
                            <br />
                            <h3 id="item-3-7" class="h3-responsive text-left">2.3.7 Mobile learning technologies</h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    Students these days are very comfortable with technology; computer games,
                                    iPhones and iPods. To them it is more of an accessory than a necessity, an
                                    extension of themselves if you like. With the availability of applications,
                                    a mobile becomes a multifunction device-useful tool. Having portable technology
                                    at your fingertips, certainly would transform the way teachers teach and students
                                    learn. Students now are able to carry a whole library of reference material in their
                                    pockets with them anywhere. Applications help organise student's life and become
                                    useful study tools anywhere anytime.<br /><br />

                                    According to Wikipedia, M-Learning or mobile learning has different meanings for different communities.
                                    Mobile learning could be <i>
                                        any sort of learning that happens when the learner is not at a fixed,
                                        predetermined location,
                                    </i>or it can be <i>
                                        learning that happens when the learner takes advantage of
                                        learning opportunities offered by mobile technologies
                                    </i>.
                                    What this means is that mobile learning decreases
                                    limitation of learning location with the mobility
                                    of general portable devices.

                                </p>
                                <div class="text-center">
                                    <img src="../assets/devs.png" class="img-fluid" alt="Responsive image"><br />
                                    <kk><i>Examples of Mobile Technologies</i></kk>
                                </div>
                                <br />
                                <p class="text-justify meme">
                                    Mobile learning or M-learning can also be viewed as any form of
                                    learning that happens when mediated through a mobile device, and a
                                    form of learning that has established the legitimacy of 'nomadic' learners
                                    (Alexander, 2004). Duncan (2010) states that: "In the 21st century,
                                    students must be fully engaged. This requires the use of technology
                                    tools and resources, involvement with interesting and relevant projects,
                                    and learning environments-including online environments-that are supportive
                                    and safe.... In the 21st century, educators must be given and be prepared
                                    to use technology tools; they must be collaborators in learning-constantly
                                    seeking knowledge and acquiring new skills along with their students."<br />
                                    Arne Duncan, U.S. Secretary of Education March 3, 2010

                                </p>
                                <p class="text-justify meme">
                                    <kk>Application of M-Learning</kk><br />
                                    While there are new developments on a daily basis on the use of technology
                                    and in-particular mobile learning, any of the following can be applied using
                                    mobile technology.

                                    <ol>
                                        <li>They can deliver the education or training.</li>
                                        <li>They foster communication and/or collaboration between learners and facilitators</li>
                                        <li>They can be used to assess or perform evaluations.</li>
                                        <li>They allow individuals to access to performance support and/or knowledge support.</li>
                                        <li>They may be used to capture evidence of learning activity.</li>
                                    </ol>

                                </p>
                                <p class="text-justify meme">
                                    With M-Learning, students can access resources online, they can chat and
                                    participate in discussion forums, and based on the capability of the gadget,
                                    can also send and receive assignments and download them to their standalone
                                    computer. This technology has also made it possible for individuals or learners
                                    to access programmes that make it easier to participate as a learner or just
                                    networking with other people, family and friends. This phenomenon is discussed next.
                                </p>
                            </div>
                        </mdb-row>
                        <br /><br />
                        <mdb-row>
                            <h2 id="item-4" class="h2-responsive text-left">2.4  Trends in Media Technologies</h2>
                            <div class="ml-5">
                                <p class=" text-justify meme">
                                    Technology is very crucial and essential in teaching
                                    and learning. New technologies may refer to advanced
                                    and upgraded modes of learning that you as a teacher may
                                    use to encode messages or content to the learner. These new
                                    technologies include Internet connected laptops, computers,
                                    audio visuals, smart phones, tablets, projectors, etc. which can
                                    be used in teaching and learning. This range of implements can aid
                                    in extension of efforts to deliver information and further
                                    facilitate proper, better, and easy learning strategies.<br /><br />

                                    New technologies may also favour learners who are dispersed to
                                    learn wherever they are at affordable costs. Students may not
                                    have to travel from their places of residence to institutions or
                                    learning centres for face to face sessions with lecturers.
                                    They may learn online and submit their assignments there.
                                    The new technologies can therefore be a key mediator between
                                    the teacher and the learner to convey messages and exchange
                                    them. Simulation, enactive and symbolic experiences can be
                                    integral in this relation to teaching and learning when
                                    technologies are used.<br />

                                    The new technology therefore is very important in learning
                                    because these new technologies such as I Pads, electronic
                                    readers, smart boards and handheld dictionaries can present
                                    information in many different ways. It can present information
                                    visually, orally, and in different colours so that every
                                    learner can benefit and learn through these new technologies.<br /><br />


                                    On the other hand, Educational Technology as a field of
                                    study continues to grow and evolve (Newby et al.; 2006).
                                    Today, we see a number of trends that will help educators
                                    project where the field is headed for the future. One of
                                    these developments is the Internet.<br /><br />

                                    <i>The growth of the Internet</i>: Today, we live in an era of global
                                    computer interconnectivity that brings a whole world of information
                                    to the personal computer user through computer networking and
                                    telecommunication. By accessing the Internet, one can instantly
                                    locate up-to-date information, communicate with others and explore
                                    the far corners of cyberspace (Newby et al.; 2006:58). This has
                                    created what is referred to as <kk><i>'information superhighway'</i></kk>.
                                    Information superhighways can deliver vast amounts of information
                                    to individuals at school, work and home.<br /><br />

                                    The <kk><i>Internet</i></kk> is the vast collection of computer networks
                                    that links millions of computers and tens of millions of
                                    people worldwide. Computers on the Internet are linked together
                                    by a maze of interconnections sort of like a spider's web.
                                    This web is composed of many separately administered computer
                                    networks with many different computers linked together.<br /><br />

                                    <kk>Uses of the Internet</kk><br />
                                    <kk>Electronic mail (e-mail)</kk><br />
                                    Communication in the form of <kk>
                                        <i>
                                            electronic
                                            mail (e-mail)
                                        </i>
                                    </kk> is one of the most widespread
                                    applications of communication via Internet.
                                    E-mail for example, allows messages to be
                                    sent from one individual to the other or from
                                    individual to groups.  A major advantage with
                                    the e-mail is that it allows you to send even huge
                                    files and documents as enclosures called
                                    <kk><i>'attachments'</i></kk>
                                    and you can send the same information to
                                    different  people spread in different parts of
                                    the world.<br /><br />

                                    <kk>The World Wide Web</kk><br />
                                    Information retrieval is another use of the
                                    Internet especially for education. The <kk>
                                        <i>
                                            World Wide
                                            Web (WWW)
                                        </i>
                                    </kk> consists of millions of sites with
                                    information displayed in hypermedia format as
                                    it supports formatted text, graphics, animation
                                    and even audio and video.<br /><br />

                                    Countless information resources (including text, graphics,
                                    sound, and video) are stored on computers all over the
                                    world in documents called <i><kk>web pages. A web site</kk></i> is a
                                    collection of web pages that are maintained by an
                                    organization, school, university, government agency,
                                    company or individual. Each web page has a unique
                                    Internet address called a <kk>
                                        <i>
                                            Uniform Resource
                                            Locator (URL)
                                        </i>
                                    </kk><br /><br />.

                                    Through the World Wide Web, a teacher can find
                                    information on any topic and subject.  This is
                                    making it possible for teachers and students to
                                    access the most current information on any subject
                                    and topic without having to rely on textbooks. This
                                    has completely revolutionized the way we access
                                    information. As teachers and students, we can now
                                    create our own website where we can upload information
                                    for students to access without having to print it for
                                    them. To access the web, you need to use a software
                                    programme known as a <kk><i>browser</i></kk>. A browser allows you
                                    to navigate the web and control how web pages are
                                    displayed. Popular web browsers include; <kk>
                                        <i>
                                            Microsoft
                                            Internet Explorer, Netscape Navigator and Mozilla Firefox.
                                        </i>
                                    </kk><br /><br />

                                    <kk>Distance learning</kk><br />
                                    One of the greatest advantages offered by modern
                                    electronic technology is the ability to instruct
                                    and to communicate with people who are not physically
                                    present in the same room/venue and at the same time.
                                    Today, <kk><i>distance learning</i></kk> has become a popular term to
                                    describe learning via Internet. Distance learning is
                                    characterized by physical separation between the teacher
                                    and the learners, an organized instructional programme,
                                    use of technological media, and a two-way communication.
                                    As a result, most distance learning programmes use a wide
                                    variety of media configurations including; radio, telephone,
                                    television, and computers.<br /><br />

                                    <kk>Wireless technologies</kk> are making it possible for
                                    people to use computers and the Internet without being
                                    connected to a wired connection. Below is a discussion on
                                    wireless technology .
                                </p>
                            </div>




                            <h3 id="item-4-1" class="h3-responsive text-left">2.4.1 Wireless technology: What is it? </h3>
                            <div class="ml-5">
                                <p class="text-justify meme">
                                    Wireless data is advancing at a good speed as more companies
                                    introduce more features for consumers and business users alike.
                                    From ring tones to picture phones, from text messaging to hi-speed
                                    wireless Web browsing, wireless data is making waves in both the
                                    consumer and business marketplaces. Wi-Fi or Wireless Fidelity
                                    refers to the <i>
                                        technology surrounding the radio transmission
                                        of internet protocol data from an internet connection wirelessly
                                        to a host computer.
                                    </i>
                                </p>

                                <div class="text-center">
                                    <img src="../assets/pad.png" class="img-fluid" alt="Responsive image"><br />
                                    <kk><i>An I pad</i></kk>

                                </div>
                                <br />
                                <p class="text-justify meme">
                                    Many of the new laptops and other technological gadgets
                                    on the market now come with wireless technology. They include
                                    Tablets, I pads and Smart Phones. This technology can be quite
                                    user friendly to remote areas provided they are facilitated.
                                    Wi-Fi networks use radio technologies called IEEE 802.11b or 802.11a
                                    to transmit data from the internet connection to the host computer
                                    (e.g. your laptop). These technologies provide reliable and fast
                                    wireless connectivity and to some degree a level of security.
                                    A Wi-Fi network can be used to connect computers to each other,
                                    to the Internet, and to wired networks.
                                </p>
                                <p class=" note note-secondary text-justify meme">
                                    Do you recall the discussion in subsection 2.3.10
                                    (Mobile Learning Technologies) in this unit? Wireless
                                    technology enables mobile learning to take place. People
                                    can learn while on the move. Just like how you are able to
                                    access Facebook and Twitter on your mobile phone or other
                                    gadgets, you can also access learning programmes/materials in
                                    the same manner.
                                </p>
                                <p class="text-justify meme">
                                    We have come to the end of the unit. It is anticipated that you
                                    had a good experience on what was presented. Below is a
                                    summary of the unit.
                                </p>
                            </div>

                        </mdb-row>
                        <br /><br />
                        <mdb-row>
                            <div class="note note-success meme">
                                <blockquote class="blockquote bq-success">
                                    <h1 id="item-5" class="text-left"><i class="fas fa-folder-open">Unit summary</i></h1>
                                    <p class="text-justify">
                                        In this unit, we started by defining the
                                        term 'media'.  We then went on to discuss
                                        the role of media in teaching and learning.
                                        We identified different media that we could
                                        use for teaching and learning and discussed
                                        them in detail.   This brought us to the conclusion
                                        of the unit whereby we examined the trend in media and
                                        technology and noted that the current trend is for the
                                        various media to merge together through the computer.
                                        This in essence means that as teachers we need to be
                                        computer literate and we should embrace computer
                                        technology if we are to be effective in our use
                                        of media during instruction.
                                    </p>
                                </blockquote>
                            </div>
                            <br />
                            <hr>
                            <div class="note note-warning meme">
                                <blockquote class="blockquote bq-warning">
                                    <h1 id="item-6" class="text-left"><i class="fas fa-medal"> Assignment</i></h1>
                                    <ol>
                                        <li>
                                            <i>
                                                Do you think enough emphasis is placed on the
                                                use of computers for classroom teaching and
                                                learning in Swaziland? Support your answer.
                                            </i>
                                            [5 marks for arguments; 5 marks evidence/support of response]
                                        </li>
                                        <li>
                                            <i>
                                                Imagine that your school has been given a donation to
                                                improve the use of instructional media in the school.
                                                How would you spend the money to best equip the school
                                                for teaching and learning? Justify the choice of media that
                                                you would purchase.
                                            </i> [10 marks for choice and justification
                                            of media; 5 marks for budget].
                                        </li>
                                    </ol>
                                </blockquote>
                            </div>
                            <hr>
                            <br />
                            <div class="note note-secondary meme">
                                <blockquote class="blockquote bq-secondary">
                                    <h1 id="item-7" class="text-left"><i class="fas fa-"> References</i></h1>
                                    <p class="text-justify">
                                        Bruner, J.S. (1966). <i><kk>Towards a Theory of Instruction</kk></i>.
                                        Cambridge, MA: Harvard University Press.<br /><br />

                                        Dale, E. (1969). <kk>Audio-Visual Methods in Teaching</kk>, 3<sup>rd</sup> Edition,
                                        New York: Holt, Rinehart and Winston.<br /><br />

                                        Erickson, C.W.H; & Curl, D.H. (1972).<kk>
                                            Fundamentals
                                            of Teaching with Audiovisual Technology
                                        </kk>. New York:
                                        Macmillan Publishing Co.; Inc.<br /><br />

                                        Gathu, K. (2000). <kk>Materials Development Module</kk>.
                                        Kwaluseni: Institute of Distance Education,
                                        University of Swaziland.<br /><br />

                                        Heinich, R.; Molenda, M.; Rusell, J.D.;
                                        & Smaldino, S.E (1996).  <kk>
                                            Instructional
                                            Media and Technologies for Learning
                                        </kk>.
                                        5<sup>th</sup> Edition. New Jersey: Prentice Hall, Inc.<br /><br />

                                        Lever-Duffy, J.; McDonald, J.B.; Mizell, A.P. (2005).
                                        <kk>Teaching and Learning with Technology</kk>. 2<sup>nd</sup> Edition.
                                        New York: Allyn and Bacon.<br /><br />

                                        Newby, T.J.; Stepich, D.A.; Lehman, J.D.;
                                        & Russell, J.D. (2006). <kk>
                                            Educational Technology
                                            for Teaching and Learning.
                                        </kk> Upper Saddle River,
                                        New Jersey: Pearson Education, Inc.,<br /><br />

                                        Sampath, K (1981). <kk>
                                            Introduction to Educational
                                            technology
                                        </kk>. New Delhi: Sterling Publisher<br /><br />

                                    </p>
                                </blockquote>
                            </div>
                        </mdb-row>
                    </mdb-container>

                </div>
            </div>
        </div>
    </div>
</div>
"},null]}