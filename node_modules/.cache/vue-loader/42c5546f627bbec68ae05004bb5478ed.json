{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Overview.vue?vue&type=template&id=4bc3c99a&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Overview.vue","mtime":1594191850945},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiT3ZlcnZpZXciIH0sIFsKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYm9yZGVyIGJvcmRlci1saWdodCBwLTMgbWItNSByb3VuZGVkIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgX3ZtLl9tKDApLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTggY29sLWxnLTkiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgInNjcm9sbHNweS1leGFtcGxlIHotZGVwdGgtMSBtdC00IHNoYWRvdy1sZyBwLTMgbWItNSByb3VuZGVkIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgImRhdGEtc3B5IjogInNjcm9sbCIsCiAgICAgICAgICAgICAgICAiZGF0YS10YXJnZXQiOiAiI25hdmJhci1leGFtcGxlMyIsCiAgICAgICAgICAgICAgICAiZGF0YS1vZmZzZXQiOiAiMCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJtZGItY29udGFpbmVyIiwKICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgZmx1aWQ6ICIiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIm1kYi1yb3ciLCB7IHN0YXRpY0NsYXNzOiAiYmctcHJpbWFyeSB0ZXh0LWxlZnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaDEiLCB7IHN0YXRpY0NsYXNzOiAiaDEtcmVzcG9uc2l2ZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDb3Vyc2UgT3ZlcnZpZXciKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaDItcmVzcG9uc2l2ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJpdGVtLTEiIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJXZWxjb21lIHRvIEVkdWNhdGlvbmFsIFRlY2hub2xvZ3kgYW5kIFNraWxscyAtIElERS1FREMgMTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUgbWwtNSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgVGhpcyBpcyBhIGNvbXB1bHNvcnkgZm91bmRhdGlvbiBjb3Vyc2UgZm9yIHRob3NlIHN0dWRlbnRzIHdobyBhcmUgcHVyc3VpbmcgYSBCYWNoZWxvciBvZiBFZHVjYXRpb24gRGVncmVlIG9yIHdobyBhcmUgcmVnaXN0ZXJlZCBmb3IgdGhlIFBvc3QtR3JhZHVhdGUgQ2VydGlmaWNhdGUgaW4gRWR1Y2F0aW9uIG9uIGEgcGFydC10aW1lIGJhc2lzLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaDItcmVzcG9uc2l2ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJpdGVtLTIiIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgRWR1Y2F0aW9uYWwgVGVjaG5vbG9neSBhbmQgU2tpbGxzIC0gSURFLUVEQyAxMjA6IGlzIHRoaXMgY291cnNlIGZvciB5b3U/ICIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSBtbC01IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBUaGlzIGNvdXJzZSBpcyBpbnRlbmRlZCBmb3IgcHJvc3BlY3RpdmUgb3IgcHJhY3RpY2luZyB0ZWFjaGVycy4gVGhpcyBjb3Vyc2UgaXMgZGVzaWduZWQgdG8gZmFtaWxpYXJpemUgeW91IHdpdGggdGhlIGNvbmNlcHQgb2YgRWR1Y2F0aW9uYWwgVGVjaG5vbG9neSBhbmQgYXNzaXN0IHlvdSB0byBwcm9kdWNlIGluc3RydWN0aW9uYWwgbWF0ZXJpYWxzIHRvIGVucmljaCB5b3VyIHRlYWNoaW5nLiBBcyBhIHByYWN0aWNpbmcgdGVhY2hlciBvciBhcyBhIHBvdGVudGlhbCBjbGFzc3Jvb20gdGVhY2hlciwgb25lIG9mIHlvdXIgcm9sZXMgaW4gYSBjbGFzc3Jvb20gaW52b2x2ZXMvd2lsbCBpbnZvbHZlIGEgZ3JlYXQgYW1vdW50IG9mIGNvbW11bmljYXRpb24uIEluIHRvZGF5J3Mgd29ybGQgd2hpY2ggaXMgZG9taW5hdGVkIGJ5IHRlY2hub2xvZ3kgaXQgaXMgaW1wb3J0YW50IHRoYXQgeW91IHVuZGVyc3RhbmQgaXQgaW4gb3JkZXIgdG8gYmUgZWZmZWN0aXZlIGluIHlvdXIgY29tbXVuaWNhdGlvbiBhcyBhIGNsYXNzcm9vbSB0ZWFjaGVyIGFuZCBiZSBhYmxlIHRvIGFwcGx5IGVkdWNhdGlvbmFsIHRlY2hub2xvZ3kgaW50byB0aGUgdGVhY2hpbmcgYW5kIGxlYXJuaW5nIHdoZW5ldmVyIHBvc3NpYmxlLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSBtbC01ICIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgUmVzdCBhc3N1cmVkLCB0aGlzIGNvdXJzZSB3aWxsIHByb3ZpZGUgeW91IHdpdGggYW4gdW5kZXJzdGFuZGluZyBvZiB0aGUgY29uY2VwdCBvZiBFZHVjYXRpb25hbCBUZWNobm9sb2d5IGFuZCBhbHNvIHRoZSByYXRpb25hbGUgZm9yIHV0aWxpemluZyBpbnN0cnVjdGlvbmFsIG1lZGlhIGluIGEgY2xhc3Nyb29tIHNldHRpbmcuIFRoZSBjb3Vyc2Ugd2lsbCBhbHNvIGV4cG9zZSB5b3UgdG8gdGhlIHZhcmlvdXMgd2F5cyBhbmQgbWVhbnMgb2YgZGVzaWduaW5nLCBwcm9kdWNpbmcsIHNlbGVjdGluZyBhbmQgZXZhbHVhdGluZyBtZWRpYSBmb3IgaW5zdHJ1Y3Rpb25hbCBwdXJwb3Nlcy4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoMi1yZXNwb25zaXZlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIml0ZW0tMyIgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJNb2R1bGUgU3RydWN0dXJlIildCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUgbWwtNSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgVGhlIGNvdXJzZSBtb2R1bGUgaGFzIGJlZW4gZGl2aWRlZCBpbnRvIHNpeCAoNikgdW5pdHMgd2hpY2ggY292ZXIgYWxsIHRoZSBtYWpvciBhc3BlY3RzIHRoYXQgd2lsbCBwcm92aWRlIHlvdSB3aXRoIHRoZSBrbm93bGVkZ2UsIGRldmVsb3Agc2tpbGxzIGFuZCB0aGUgcHJvZmVzc2lvbmFsIGJhc2UgbmVlZGVkIHRvIGFzc2lzdCB5b3UgdG8gYmVjb21lIGVmZmVjdGl2ZSBhcyBhIGNsYXNzcm9vbSB0ZWFjaGVyIGFuZCBpbiB1c2luZyBlZHVjYXRpb25hbCB0ZWNobm9sb2d5IGluIGEgY2xhc3Nyb29tIHNldHRpbmcuICIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSBtbC01IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBUaGlzIG1vZHVsZSB3aWxsIGhlbHAgeW91IGFzIGEgdHJhaW5lZS10ZWFjaGVyIHRvIGRldmVsb3AgdGhlIHNraWxscyByZXF1aXJlZCB0byBtYWtlIHlvdSBhIHJlZmxlY3RpdmUgcHJhY3RpdGlvbmVyIGFuZCBhIGxpZmVsb25nIGxlYXJuZXIgd2hvIGNhbiBtYWtlIGluZm9ybWVkIGFuZCB0aG91Z2h0ZnVsIGRlY2lzaW9ucyBhYm91dCB0ZWFjaGluZy4gVGhlIG1vZHVsZSB3aWxsIGFsc28gYXNzaXN0IHlvdSB0byBpbnRlZ3JhdGUgZWR1Y2F0aW9uYWwgdGVjaG5vbG9neSBpbnRvIHlvdXIgdGVhY2hpbmcgc28gdGhhdCB5b3UgY2FuIGhlbHAgdGhlIHN0dWRlbnRzIHRvIGxlYXJuLiBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBFZHVjYXRpb25hbCBUZWNobm9sb2d5IGNvbXBvbmVudCBvZiB0aGlzIGNvdXJzZSB3aWxsIGFsc28gYmUgZGl2aWRlZCBpbnRvIHR3byBwYXJ0cy4gUGFydCBvbmUgZGVhbHMgd2l0aCB0aGUgRWR1Y2F0aW9uYWwgVGVjaG5vbG9neSBsZWN0dXJlcyB3aGVyZSB0aGUgdGhlb3J5IGJlaGluZCBFZHVjYXRpb25hbCBUZWNobm9sb2d5IHdpbGwgYmUgZGlzY3Vzc2VkIHNvIHRoYXQgeW91IGFjcXVpcmUgYSBjbGVhciB1bmRlcnN0YW5kaW5nIG9mIHRoZSBrZXkgY29uY2VwdHMgYXBwbGljYWJsZSB0byBFZHVjYXRpb25hbCBUZWNobm9sb2d5LiBQYXJ0IHR3byBvZiB0aGUgRWR1Y2F0aW9uYWwgVGVjaG5vbG9neSBjb21wb25lbnQgd2lsbCBmb2N1cyBvbiBtZWRpYSBwcmFjdGljYWxzIHNvIHRoYXQgeW91IGFyZSBlcXVpcHBlZCB3aXRoIHRoZSBza2lsbHMgbmVlZGVkIHRvIGRlc2lnbiwgZGV2ZWxvcCwgYW5kIHByb2R1Y2UgeW91ciBvd24gaW5zdHJ1Y3Rpb25hbCBtYXRlcmlhbHMuICIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSBtbC01IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBZb3Ugd2lsbCBiZSByZXF1aXJlZCB0byBwYXJ0aWNpcGF0ZSBpbiBhIHNlcmllcyBvZiBtZWRpYSBwcmFjdGljYWwgYXNzaWdubWVudHMgYXBwbGljYWJsZSBpbiB5b3VyIGZpZWxkIG9mIHNwZWNpYWxpemF0aW9uIGFuZCBpbnRlcmVzdC4gQXMgcGFydCBvZiBwcmVwYXJhdGlvbiBmb3IgdGhlIG1lZGlhIHByYWN0aWNhbHMsIHlvdSB3aWxsIGJlIHJlcXVpcmVkIHRvIHByZXNlbnQgeW91cnNlbGYgZm9yIHNvbWUgZGVtb25zdHJhdGlvbnMgb24gaG93IHRvIHVzZSBkaWZmZXJlbnQgaW5zdHJ1Y3Rpb25hbCBtZWRpYSBmb3IgdGVhY2hpbmcgYW5kIGxlYXJuaW5nLiBUaGVzZSBkZW1vbnN0cmF0aW9ucyB3aWxsIGJlIGNvbmR1Y3RlZCBpbiBSb29tIEMxOjEgaW4gdGhlIEZhY3VsdHkgb2YgRWR1Y2F0aW9uIHdpdGggdGhlIGFzc2lzdGFuY2Ugb2YgdGhlIHRlY2huaWNpYW4gcmVzcG9uc2libGUgZm9yIHRoZSBjb3Vyc2UuIFlvdSB3aWxsIGJlIGV4cGVjdGVkIHRvIHBhcnRpY2lwYXRlIGluIGFsbCB0aGUgZGVtb25zdHJhdGlvbnMgYW5kIHRvIG1ha2UgYSBwcmVzZW50YXRpb24gb2YgbWVkaWEgbWF0ZXJpYWxzIHRoYXQgeW91IHdpbGwgaGF2ZSBkZXNpZ25lZCwgZGV2ZWxvcGVkIGFuZCBwcm9kdWNlZCBlaXRoZXIgaW5kaXZpZHVhbGx5IG9yIGluIGdyb3VwcyBkZXBlbmRpbmcgb24gdGhlIG5hdHVyZSBvZiB0aGUgdGFza3MgYXNzaWduZWQgdG8geW91ICIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSBtbC01IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBUbyBmYWNpbGl0YXRlIHRoZSBkZW1vbnN0cmF0aW9ucywgeW91IHdpbGwgYmUgZGl2aWRlZCBpbnRvIGdyb3VwcyBhY2NvcmRpbmcgdG8geW91ciBzdWJqZWN0IGNvbWJpbmF0aW9ucyBhbmQgYWxsb2NhdGVkIGEgdGltZSBzbG90IHdoZW4gdG8gYXR0ZW5kIHRoZSBkZW1vbnN0cmF0aW9ucy4gUGFydGljaXBhdGlvbiBpbiB0aGVzZSBkZW1vbnN0cmF0aW9ucyB3aWxsIGJlIG1hbmRhdG9yeS4gQWZ0ZXIgdGhlIGRlbW9uc3RyYXRpb25zLCB5b3Ugd2lsbCBlbWJhcmsgb24gdGhlIG1lZGlhIHByYWN0aWNhbHMgd2hlcmUgeW91IHdpbGwgYmUgcmVxdWlyZWQgdG8gcHJvZHVjZSBpbnN0cnVjdGlvbmFsIG1hdGVyaWFscyB1c2luZyBkaWZmZXJlbnQgbWVkaWEuICIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSBtbC01IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBUaGlzIGV4ZXJjaXNlIHdpbGwgYmUgY2FycmllZCBvdXQgaW4gZ3JvdXBzIHRvIGJlIGRldGVybWluZWQgYnkgdGhlIGNvdXJzZSBsZWN0dXJlci4gQWZ0ZXIgeW91IGhhdmUgcHJvZHVjZWQgdGhlIGluc3RydWN0aW9uYWwgbWF0ZXJpYWxzLCB5b3Ugd2lsbCBiZSBpbnZpdGVkIHRvIG1ha2UgYSBwcmVzZW50YXRpb24gdGhhdCB3aWxsIGJlIGFzc2Vzc2VkIGFuZCBtYXJrcyB3aWxsIGJlIGF3YXJkZWQgZm9yIGVhY2ggaW5kaXZpZHVhbCBwcmVzZW50ZXIgYW5kIGZvciB0aGUgZ3JvdXAuIFRoZXJlZm9yZSwgYm90aCBpbmRpdmlkdWFsIGFuZCBncm91cCBlZmZvcnQgd2lsbCBiZSBjcml0aWNhbCBpbiBldmFsdWF0aW5nIHlvdXIgcHJlc2VudGF0aW9uLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5vdGUgbm90ZS1pbmZvIHRleHQtanVzdGlmeSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImJsb2NrcXVvdGUiLCB7IHN0YXRpY0NsYXNzOiAiYmxvY2txdW90ZSBicS1pbmZvIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJpdGVtLTQiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS1wYXBlci1wbGFuZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQ291cnNlIE91dGNvbWVzIikKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBVcG9uIGNvbXBsZXRpb24gb2YgRWR1Y2F0aW9uYWwgVGVjaG5vbG9neSBhbmQgU2tpbGxzIC0gSURFLUVEQyAxMjAgeW91IHdpbGwgYmUgYWJsZSB0bzoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlbW9uc3RyYXRlIGFuIHVuZGVyc3RhbmRpbmcgb2YgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIGNvbW11bmljYXRpb24gYW5kIGxlYXJuaW5nLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgZGVtb25zdHJhdGUgYW4gYXdhcmVuZXNzIG9mIHRoZSByYW5nZSBvZiBtZWRpYSBhdmFpbGFibGUgZm9yIHRlYWNoaW5nIGFuZCBsZWFybmluZyBzbyB0aGF0IHlvdSBjYW4gbWFrZSBpbmZvcm1lZCBzZWxlY3Rpb24gb2YgaW5zdHJ1Y3Rpb25hbCBtZWRpYSB0byBzdWl0IHlvdXIgb3duIGluc3RydWN0aW9uYWwgc2l0dWF0aW9uLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZ2l2ZSBhIHJhdGlvbmFsZSBmb3IgdXRpbGl6aW5nIGluc3RydWN0aW9uYWwgbWVkaWEgaW4gdGhlIGNsYXNzcm9vbS4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIGRldmVsb3AgdGhlIHNraWxscyBuZWNlc3NhcnkgdG8gZGVzaWduLCBkZXZlbG9wLCBwcm9kdWNlLCBzZWxlY3QsIGFuZCB1c2UgaW5zdHJ1Y3Rpb25hbCBtZWRpYSB0byBzdWl0IHlvdXIgb3duIGluc3RydWN0aW9uYWwgc2l0dWF0aW9uLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGV2ZWxvcCB0aGUgc2tpbGxzIG5lZWRlZCB0byBzeXN0ZW1hdGljYWxseSBpbnRlZ3JhdGUgaW5zdHJ1Y3Rpb25hbCBtZWRpYSBpbnRvIHRlYWNoaW5nIGFuZCBsZWFybmluZy4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlbW9uc3RyYXRlIGFuIHVuZGVyc3RhbmRpbmcgb24gaG93IHRvIGNhcmUgZm9yIGFuZCBtYWludGFpbiB0ZWFjaGluZyBhbmQgbGVhcm5pbmcgbWVkaWEgYW5kIHRlY2hub2xvZ3kuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibm90ZSBub3RlLXByaW1hcnkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYmxvY2txdW90ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJibG9ja3F1b3RlIGJxLXByaW1hcnkiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAiaXRlbS01IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS1jbG9jayIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBUaW1lZnJhbWUiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBUaGUgY291cnNlIG9uIEVkdWNhdGlvbmFsIFRlY2hub2xvZ3kgYW5kIFNraWxscyBpcyBkaXZpZGVkIGludG8gdHdvIHBhcnRzLiBQYXJ0IG9uZSwgd2hpY2ggaXMgY29tcHVsc29yeSB0byBhbGwgc3R1ZGVudHMsIHdpbGwgYmUgY292ZXJlZCBkdXJpbmcgdGhlIGZpcnN0IHNlbWVzdGVyIGFuZCB3aWxsIGZvY3VzIG9uIEVkdWNhdGlvbmFsIFRlY2hub2xvZ3kuIFRoaXMgbW9kdWxlIHRoYXQgeW91IGFyZSByZWFkaW5nIG5vdyBjb3ZlcnMgdGhlIEVkdWNhdGlvbmFsIFRlY2hub2xvZ3kgY29tcG9uZW50IG9mIHRoZSBjb3Vyc2UuIFBhcnQgdHdvIG9mIHRoZSBjb3Vyc2UgZm9jdXNlcyBvbiB0aGUgZGV2ZWxvcG1lbnQgb2YgZXNzZW50aWFsIHNraWxscyB0aGF0IGFyZSBuZWNlc3NhcnkgZm9yIGEgY2xhc3Nyb29tIHRlYWNoZXIgaWYgaGUvc2hlIHdpbGwgc3VjY2VlZCBpbiB1c2luZyBhbmQgaW50ZWdyYXRpbmcgZWR1Y2F0aW9uYWwgdGVjaG5vbG9neSBpbnRvIHRoZWlyIHRlYWNoaW5nLiBUaGUgRWR1Y2F0aW9uYWwgVGVjaG5vbG9neSBhbmQgU2tpbGxzIHBhcnQgb2YgdGhlIGNvdXJzZSBpcyBkaXZpZGVkIGludG8gTGlicmFyeSBTa2lsbHMgZm9yIHN0dWRlbnRzIHJlZ2lzdGVyZWQgZm9yIHRoZSBIdW1hbml0aWVzIHJlbGF0ZWQgc3ViamVjdHMgYW5kIExhYm9yYXRvcnkgU2tpbGxzIGZvciB0aG9zZSBzdHVkZW50cyByZWdpc3RlcmVkIGZvciB0aGUgU2NpZW5jZSBFZHVjYXRpb24gcmVsYXRlZCBzdWJqZWN0cy4gVGhlIHNraWxscyBjb21wb25lbnQgb2YgdGhlIGNvdXJzZSB3aWxsIGJlIHRha2VuIGR1cmluZyB0aGUgc2Vjb25kIHNlbWVzdGVyLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibm90ZSBub3RlLXN1Y2Nlc3MiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYmxvY2txdW90ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJibG9ja3F1b3RlIGJxLXN1Y2Nlc3MiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAiaXRlbS02IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS1mbGFnIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFN0dWR5IHNraWxscyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgQXMgYW4gYWR1bHQgbGVhcm5lciB5b3VyIGFwcHJvYWNoIHRvIGxlYXJuaW5nIHdpbGwgYmUgZGlmZmVyZW50IHRvIHRoYXQgb2YgeW91ciBzY2hvb2wgZGF5czogeW91IHdpbGwgY2hvb3NlIHdoYXQgeW91IHdhbnQgdG8gc3R1ZHksIHlvdSB3aWxsIGhhdmUgcHJvZmVzc2lvbmFsIGFuZC9vciBwZXJzb25hbCBtb3RpdmF0aW9uIGZvciBkb2luZyBzbyBhbmQgeW91IHdpbGwgbW9zdCBsaWtlbHkgYmUgZml0dGluZyB5b3VyIHN0dWR5IGFjdGl2aXRpZXMgYXJvdW5kIG90aGVyIHByb2Zlc3Npb25hbCBvciBkb21lc3RpYyByZXNwb25zaWJpbGl0aWVzLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgRXNzZW50aWFsbHksIHlvdSB3aWxsIGJlIHRha2luZyBjb250cm9sIG9mIHlvdXIgb3duIGxlYXJuaW5nIGVudmlyb25tZW50LiBBcyBhIGNvbnNlcXVlbmNlLCB5b3Ugd2lsbCBuZWVkIHRvIGNvbnNpZGVyIHBlcmZvcm1hbmNlIGlzc3VlcyByZWxhdGVkIHRvIHRpbWUgbWFuYWdlbWVudCwgZ29hbCBzZXR0aW5nLCBzdHJlc3MgbWFuYWdlbWVudCwgZXRjLiBQZXJoYXBzIHlvdSB3aWxsIGFsc28gbmVlZCB0byByZWFjcXVhaW50IHlvdXJzZWxmIGluIGFyZWFzIHN1Y2ggYXMgZXNzYXkgcGxhbm5pbmcsIGNvcGluZyB3aXRoIGV4YW1zIGFuZCB1c2luZyB0aGUgd2ViIGFzIGEgbGVhcm5pbmcgcmVzb3VyY2UuICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBZb3VyIG1vc3Qgc2lnbmlmaWNhbnQgY29uc2lkZXJhdGlvbnMgd2lsbCBiZSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJ0aW1lIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigic3BhY2UiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIGkuZS4gdGhlIHRpbWUgeW91IGRlZGljYXRlIHRvIHlvdXIgbGVhcm5pbmcgYW5kIHRoZSBlbnZpcm9ubWVudCBpbiB3aGljaCB5b3UgZW5nYWdlIGluIHRoYXQgbGVhcm5pbmcuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIFdlIHJlY29tbWVuZCB0aGF0IHlvdSB0YWtlIHRpbWUgbm93IC0gYmVmb3JlIHN0YXJ0aW5nIHlvdXIgc2VsZi1zdHVkeSAtIHRvIGZhbWlsaWFyaXplIHlvdXJzZWxmIHdpdGggdGhlc2UgaXNzdWVzLiBUaGVyZSBhcmUgYSBudW1iZXIgb2YgZXhjZWxsZW50IHJlc291cmNlcyBvbiB0aGUgd2ViLiBBIGZldyBzdWdnZXN0ZWQgbGlua3MgYXJlOiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cDovL3d3dy5ob3ctdG8tc3R1ZHkuY29tLyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBob3cgdG8gc3R1ZHkiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgVGhlICJIb3cgdG8gc3R1ZHkiIHdlYiBzaXRlIGlzIGRlZGljYXRlZCB0byBzdHVkeSBza2lsbHMgcmVzb3VyY2VzLiBZb3Ugd2lsbCBmaW5kIGxpbmtzIHRvIHN0dWR5IHByZXBhcmF0aW9uIChhIGxpc3Qgb2YgbmluZSBlc3NlbnRpYWxzIGZvciBhIGdvb2Qgc3R1ZHkgcGxhY2UpLCB0YWtpbmcgbm90ZXMsIHN0cmF0ZWdpZXMgZm9yIHJlYWRpbmcgdGV4dCBib29rcywgdXNpbmcgcmVmZXJlbmNlIHNvdXJjZXMgYW5kIHRlc3QgYW54aWV0eS4gJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHA6Ly93d3cudWNjLnZ0LmVkdS9zdGR5c2svc3RkeWhscC5odG1sIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiIFZpcmdpbmlhIFRlY2giKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgVGhpcyBpcyB0aGUgd2ViIHNpdGUgb2YgdGhlIFZpcmdpbmlhIFRlY2gsIERpdmlzaW9uIG9mIFN0dWRlbnQgQWZmYWlycy4gWW91IHdpbGwgZmluZCBsaW5rcyB0byB0aW1lIHNjaGVkdWxpbmcgKGluY2x1ZGluZyBhICJ3aGVyZSBkb2VzIHRpbWUgZ28/IiBsaW5rKSwgYSBzdHVkeSBza2lsbCBjaGVja2xpc3QsIGJhc2ljIGNvbmNlbnRyYXRpb24gdGVjaG5pcXVlcywgY29udHJvbCBvZiB0aGUgc3R1ZHkgZW52aXJvbm1lbnQsIG5vdGUgdGFraW5nLCBob3cgdG8gcmVhZCBlc3NheXMgZm9yIGFuYWx5c2lzLCBtZW1vcnkgc2tpbGxzICgicmVtZW1iZXJpbmciKS4gJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHA6Ly93d3cuaG93dG9zdHVkeS5vcmcvcmVzb3VyY2VzLnBocCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBBbm90aGVyIEhvdyB0byBTdHVkeSIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBBbm90aGVyICJIb3cgdG8gc3R1ZHkiIHdlYiBzaXRlIHdpdGggdXNlZnVsIGxpbmtzIHRvIHRpbWUgbWFuYWdlbWVudCwgZWZmaWNpZW50IHJlYWRpbmcsIHF1ZXN0aW9uaW5nL2xpc3RlbmluZy9vYnNlcnZpbmcgc2tpbGxzLCBnZXR0aW5nIHRoZSBtb3N0IG91dCBvZiBkb2luZyAoImhhbmRzLW9uIiBsZWFybmluZyksIG1lbW9yeSBidWlsZGluZywgdGlwcyBmb3Igc3RheWluZyBtb3RpdmF0ZWQsIGRldmVsb3BpbmcgYSBsZWFybmluZyBwbGFuLicKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIFRoZSBhYm92ZSBsaW5rcyBhcmUgb3VyIHN1Z2dlc3Rpb25zIHRvIHN0YXJ0IHlvdSBvZmYuIEF0IHRoZSB0aW1lIG9mIHdyaXRpbmcsIHRoZXNlIHdlYiBsaW5rcyB3ZXJlIHN0aWxsIGFjdGl2ZS4gSWYgeW91IHdhbnQgdG8gbG9vayBmb3IgbW9yZSwgZ28gdG8gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAid3d3Lmdvb2dsZS5jb20iIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkdvb2dsZSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBhbmQgdHlwZSAic2VsZi1zdHVkeSBiYXNpY3MiLCAic2VsZi1zdHVkeSB0aXBzIiwgInNlbGYtc3R1ZHkgc2tpbGxzIiBvciBzaW1pbGFyLiAnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibm90ZSBub3RlLWRhbmdlciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJibG9ja3F1b3RlIiwKICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImJsb2NrcXVvdGUgYnEtZGFuZ2VyIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogIml0ZW0tNyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtYnVsbGhvcm4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgTmVlZCBoZWxwPyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgVGhpcyBjb3Vyc2UgaXMgbG9jYXRlZCBvbiB0aGUgRS1MZWFybmluZyB3ZWJzaXRlIGF0OiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiaHR0cDovL2VsZWFybmluZy51bmlzd2Euc3oiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlVORVNXQSBFLWxlYXJuaW5nIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBUaGUgY291cnNlIGluc3RydWN0b3I6IE1yLiBQLkwuIEJpc3dhbG8gKCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogInRlbDorMjY4MjUxNy0wMzEyIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiMjUxNy0wMzEyIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiKSAocGJpc3dhbG9AdW5pc3dhLnN6KSIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgSVQgVGVjaG5pY2lhbnMgZm9yIGFzc2lzdGFuY2U6IENhbGwgIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICJ0ZWw6KzI2ODI1MTctMDAwMCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjI1MTctMDAwMCIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBhbmQgYXNrIGZvciB0aGUgZm9sbG93aW5nIGV4dGVuc2lvbiBudW1iZXJzICgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICJ0ZWw6KzI2ODI1MTctNzAxODEiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCI3MDE4MSIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIi8iKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogInRlbDorMjY4MjUxNy03MDQyOCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjcwNDI4IildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiLyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAidGVsOisyNjgyNTE3LTcwMTU0IiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiNzAxNTQiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIpICIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5vdGUgbm90ZS13YXJuaW5nIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImJsb2NrcXVvdGUiLAogICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYmxvY2txdW90ZSBicS13YXJuaW5nIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogIml0ZW0tOCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtbWVkYWwiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQXNzaWdubWVudHMiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIFRoaXMgY291cnNlIHdpbGwgYmUgYXNzZXNzZWQgYnkgY291cnNlIHdvcmsgb25seSBhbmQgdGhlcmUgd2lsbCBiZSBubyBmaW5hbCBleGFtaW5hdGlvbiB0byBiZSB3cml0dGVuIGF0IHRoZSBlbmQgb2YgZWFjaCBzZW1lc3Rlci4gVGhlcmVmb3JlLCB0aGlzIGNvdXJzZSB3aWxsIGJlIGFzc2Vzc2VkIHRocm91Z2ggd3JpdHRlbiBhc3NpZ25tZW50cywgbWVkaWEgcHJhY3RpY2FsIGFzc2lnbm1lbnRzIGFuZCBhIHRlc3QgdGhhdCB3aWxsIGJlIHRha2VuIGR1cmluZyB0aGUgZmlyc3Qgc2VtZXN0ZXIuIFRoZSBsaXN0IG9mIG1lZGlhIHByYWN0aWNhbCBhc3NpZ25tZW50cyB3aWxsIGJlIG1hZGUgYXZhaWxhYmxlIHRvIHlvdSBzZXBhcmF0ZWx5IGR1cmluZyB0aGUgZmlyc3Qgc2VtZXN0ZXIgYW5kIHRoZSBkYXRlcyB3aGVuIHRvIHByZXNlbnQgdGhlIHByYWN0aWNhbCB3b3JrIHdpbGwgYWxzbyBiZSBhbm5vdW5jZWQuICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgUGxlYXNlIG1ha2Ugc3VyZSB0aGF0IHlvdSBzdWJtaXQgYWxsIHlvdXIgd3JpdHRlbiBhc3NpZ25tZW50cywgYW5kIHByYWN0aWNhbCBhc3NpZ25tZW50cyBvbiB0aGUgZGF0ZXMgd2hlbiB0aGV5IGFyZSBkdWUgdG8gYXZvaWQgYW55IHByb2JsZW1zIGxhdGVyLiBBbHNvIG5vdGUgdGhhdCBhbGwgY291cnNlcyBmcm9tIHRoZSBGYWN1bHR5IG9mIEVkdWNhdGlvbiBtdXN0IGJlIHBhc3NlZCBhdCA1MCUuIElmIHlvdSBmYWlsIHRvIHBhc3MgdGhpcyBwYXJ0aWN1bGFyIGNvdXJzZSBhdCA1MCUsIHlvdSB3aWxsIGJlIHJlcXVpcmVkIHRvIHJlcGVhdCB0aGUgd2hvbGUgYWNhZGVtaWMgeWVhci4gVGhlcmVmb3JlLCB0YWtlIGFsbCB5b3VyIHdvcmsgdmVyeSBzZXJpb3VzbHkgYW5kIGVuc3VyZSB0aGF0IHlvdSBzdWJtaXQgYWxsIHRoZSBhc3NpZ25tZW50cyBhbmQgcHJhY3RpY2FsIHdvcmsgd2hlbiByZXF1aXJlZCBhbmQgYWxzbyBwcmVzZW50IHlvdXJzZWxmIGZvciB0aGUgdGVzdC4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBTaW5jZSB0aGUgY291cnNlIG9uIEVkdWNhdGlvbmFsIFRlY2hub2xvZ3kgYW5kIFNraWxscyBoYXMgdHdvIGNvbXBvbmVudHMsIHlvdSB3aWxsIHJlY2VpdmUgZnVydGhlciBpbnN0cnVjdGlvbnMgZnJvbSB0aGUgbGVjdHVyZXJzIGNvbmNlcm5lZCBvbiBob3cgYXNzZXNzbWVudCB3aWxsIGJlIGNhcnJpZWQgb3V0IGluIGJvdGggTGlicmFyeSBhbmQgdGhlIExhYm9yYXRvcnkgc2tpbGxzLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibm90ZSBub3RlLXNlY29uZGFyeSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJibG9ja3F1b3RlIiwKICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImJsb2NrcXVvdGUgYnEtc2Vjb25kYXJ5IiB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogIml0ZW0tOSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtZXllIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFNlbGYtIEFzc2Vzc21lbnRzIGFuZCBmZWVkYmFjayIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgVG8gYXNzaXN0IHlvdSB0byBtb25pdG9yIHlvdXIgb3duIHByb2dyZXNzIGFzIHlvdSBzdHVkeSBpbiB0aGlzIGNvdXJzZSwgeW91IGFyZSBwcm92aWRlZCB3aXRoIHNlbGYtYXNzZXNzbWVudCBxdWVzdGlvbnMvIGFjdGl2aXRpZXMuIFBsZWFzZSBzcGVuZCB0aW1lIHRvIGNhcnJ5IG91dCB0aGUgdGFza3Mgb24geW91ciBvd24gYmVmb3JlIHlvdSBzZWVrIGFzc2lzdGFuY2UgZWl0aGVyIGZyb20geW91ciBjb3Vyc2UgdHV0b3IvbGVjdHVyZXIgb3IgY29sbGVhZ3VlIG9yIGJlZm9yZSB5b3UgY29udGludWUgcmVhZGluZyB0aGUgc3R1ZHkgbWF0ZXJpYWxzLiBUaGlzIHdpbGwgYXNzaXN0IHlvdSB0byBtb25pdG9yIHlvdXIgb3duIHByb2dyZXNzIGluIHRoZSBzdHVkeSBtYXRlcmlhbHMgYW5kIGlkZW50aWZ5IGFyZWFzIHdoZXJlIHlvdSBtaWdodCBoYXZlIGRpZmZpY3VsdGllcy4gU2ltaWxhcmx5LCBkbyBub3QgcnVzaCB0byByZWZlciB0byB0aGUgZmVlZGJhY2sgcHJvdmlkZWQgZm9yIHlvdSBpbiB0aGUgbW9kdWxlIGFzIHRoaXMgd2lsbCBub3QgaGVscCB5b3UgaW4ga25vd2luZyB3aGV0aGVyIHlvdSBoYXZlIG1hc3RlcmVkIHRoZSBjb250ZW50IG9yIG5vdC4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS00IGNvbC1sZy0zIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJuYXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2YmFyIG5hdmJhci1saWdodCBzdGlja3ktdG9wIGZsZXgtY29sdW1uIG10LTQiLAogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJuYXZiYXItZXhhbXBsZTMiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdmJhci1icmFuZCIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJDb3Vyc2UgT3ZlcnZpZXciKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibmF2IiwgeyBzdGF0aWNDbGFzczogIm5hdiBuYXYtcGlsbHMgZmxleC1jb2x1bW4iIH0sIFsKICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWxpbmsiLCBhdHRyczogeyBocmVmOiAiI2l0ZW0tMSIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIldlbGNvbWUgdG8gRWR1Y2F0aW9uYWwgVGVjaG5vbG9neSBhbmQgU2tpbGxzIC0gSURFLUVEQyAxMiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS0yIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiRWR1Y2F0aW9uYWwgVGVjaG5vbG9neSBhbmQgU2tpbGxzIC0gSURFLUVEQyAxMjA6IGlzIHRoaXMgY291cnNlIGZvciB5b3U/IgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIiwgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTMiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiTW9kdWxlIFN0cnVjdHVyZSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS00IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNvdXJzZSBPdXRjb21lcyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS01IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlRpbWVmcmFtZSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS02IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlN0dWR5IFNraWxscyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS03IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIk5lZWQgaGVscD8iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWxpbmsiLCBhdHRyczogeyBocmVmOiAiI2l0ZW0tOCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBc3NpZ25tZW50cyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS05IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlNlbGYtQXNzZXNzbWVudHMgYW5kIGZlZWRiYWNrIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}