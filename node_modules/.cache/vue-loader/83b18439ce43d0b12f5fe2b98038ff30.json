{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit3.vue?vue&type=template&id=34d4ede5&scoped=true&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit3.vue","mtime":1594192379171},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "border border-light p-3 mb-5 rounded" }, [
    _c("div", { staticClass: "row" }, [
      _vm._m(0),
      _c("div", { staticClass: "col-sm-8 col-lg-9" }, [
        _c(
          "div",
          {
            staticClass:
              "scrollspy-example z-depth-1 mt-4 shadow-lg p-3 mb-5 rounded",
            attrs: {
              "data-spy": "scroll",
              "data-target": "#navbar-example3",
              "data-offset": "0"
            }
          },
          [
            _c(
              "mdb-container",
              { attrs: { fluid: "" } },
              [
                _c("mdb-row", [
                  _c("h1", { staticClass: "h1-responsive text-left" }, [
                    _vm._v("Unit 3")
                  ]),
                  _c("h1", { staticClass: "h1-responsive text-left" }, [
                    _vm._v("Selection of Media for Teaching and Learning")
                  ]),
                  _c(
                    "h2",
                    {
                      staticClass: "h2-responsive text-left",
                      attrs: { id: "item-1" }
                    },
                    [_vm._v("3.0 Introduction ")]
                  ),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " So far we have discussed the range of media available to us as teachers that we could use during instruction. However, it is not every media that we choose to use that would help the students to learn. We need to remember that our main aim during the lesson is to help students learn. You must be aware by now, that in order for learning to take place, instruction may be necessary. "
                      ),
                      _c("i", [
                        _vm._v(
                          " Instruction refers to the arrangement of information and environment to facilitate learning "
                        )
                      ]),
                      _vm._v(
                        ". By environment, this does not just mean where instruction takes place but also the methods, media and equipment that are used or are needed to guide the learner's study. "
                      )
                    ]),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " However, information and environment will change depending on the instructional goal. Therefore, as the expected learning outcomes also change, so must the teacher change the way he/she arranges the instructional environment. For instruction to take place, instructional media are used since they form part of the instructional environment. "
                      )
                    ]),
                    _c("p", { staticClass: "text-justify" }),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " The instructional/learning process involves the selection, arrangement, and delivery of information in an appropriate environment and the way the learner interacts with that information. Usually the arrangement of information and the environment is normally the responsibility of the instructor and the designers of media. As a teacher, you need to select, arrange, and deliver the information in an appropriate environment so that learners can interact with it and convert it into knowledge."
                      ),
                      _c("br"),
                      _vm._v(
                        " As a teacher, you will have to decide which instructional medium or media to use. To make an informed choice of medium/media from the range of media that we have discussed, you need to know the advantages and limitations of each medium and you need to have a selection criterion that will inform your choice of media."
                      ),
                      _c("br"),
                      _vm._v(
                        " This unit is therefore meant to assist you in making informed decisions on your choice of media during instruction. To assist you in that regard, we will discuss the criteria for media selection as well as the media selection process. We will also look at some models that are used in making decisions about media choices. "
                      )
                    ]),
                    _c("br"),
                    _c("div", { staticClass: "note note-info text-justify" }, [
                      _c("blockquote", { staticClass: "blockquote bq-info" }, [
                        _c("h5", { attrs: { id: "item-1-1" } }, [
                          _c("i", { staticClass: "fas fa-paper-plane" }, [
                            _vm._v(" Unit Outcomes")
                          ])
                        ]),
                        _c("p", { staticClass: "text-justify" }, [
                          _vm._v(
                            " Upon completion of this unit you will be able to: "
                          ),
                          _c(
                            "ul",
                            { staticStyle: { "list-style-type": "square" } },
                            [
                              _c("li", [
                                _vm._v(
                                  "identify the criteria that should be used to select media during instruction"
                                )
                              ]),
                              _c("li", [
                                _vm._v(
                                  "describe the overview of media selection process"
                                )
                              ]),
                              _c("li", [
                                _vm._v(
                                  "present graphically the media selection model."
                                )
                              ])
                            ]
                          )
                        ])
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "div",
                      { staticClass: "note note-success text-justify" },
                      [
                        _c(
                          "blockquote",
                          { staticClass: "blockquote bq-success" },
                          [
                            _c("h5", { attrs: { id: "item-1-2" } }, [
                              _c("i", { staticClass: "fas fa-check-square" }, [
                                _vm._v(" Terminology")
                              ])
                            ]),
                            _c(
                              "p",
                              { staticClass: "text-justify" },
                              [
                                _c("kk", [_vm._v("Selection of Media:")]),
                                _vm._v(
                                  " The process of identifying and selecting the appropriate media to be used in achieving the learning objectives."
                                ),
                                _c("br"),
                                _c("br"),
                                _vm._v(" "),
                                _c("kk", [_vm._v("Media Characteristics:")]),
                                _vm._v(
                                  " Qualities of media that we need to exploit when selecting media."
                                ),
                                _c("br"),
                                _c("br"),
                                _c("kk", [_vm._v("Media Selection Models:")]),
                                _vm._v(
                                  " Selection models consist of basic elements that need to be taken into consideration when choosing media."
                                ),
                                _c("br"),
                                _c("br"),
                                _c("kk", [_vm._v("Systems Approach:")]),
                                _vm._v(
                                  " A way or system of doing things systematically (following a logical and flexible approach)."
                                ),
                                _c("br"),
                                _c("br"),
                                _c("kk", [_vm._v("ASSURE Model:")]),
                                _vm._v(
                                  " A procedural guide for planning and conducting instruction that incorporates media"
                                ),
                                _c("br")
                              ],
                              1
                            )
                          ]
                        )
                      ]
                    )
                  ])
                ]),
                _c("br"),
                _c("br"),
                _c("mdb-row", { staticClass: "text-justify" }, [
                  _c("h2", { attrs: { id: "item-2" } }, [
                    _vm._v(
                      "3.1 Criteria for Selecting Media during instruction "
                    )
                  ]),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " For teachers to adapt their instruction to changing times and environments, they need to have a thorough working knowledge of the many kinds of educational technologies available that might assist in teaching and enhance learning. Educational technologies are the tools that a teacher might need to use in order to create an effective instructional event. "
                      )
                    ]),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " You need to note that it is not any media that you use that can perform the required instructional role. Research indicates that most media can perform most instructional functions to a certain extent (Aronson, 1977; Briggs, 1968; Briggs & wager, 1981; Clark & Salomon, 1986). According to Gagne, Briggs & Wager (1988), most writers on media selection models agree that there is no one medium that is universally superior to all types of desired outcomes and for all learners. However, some media are better at doing certain things than others and no single medium can be best for all instructional situations. We therefore need to use a variety of media during instruction. So, the million dollar question to ask then is, "
                      ),
                      _c("i", [
                        _vm._v(
                          "'what medium or media shall I use in my lesson?'"
                        )
                      ])
                    ]),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " As you begin your instruction, it is important to select a medium that will enhance your lesson by ensuring optimal use of the media. To select the most appropriate medium/media for your lesson, you will need to ask yourself several questions. The following questions can guide you in selecting the most appropriate media during instruction: "
                      )
                    ]),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _c("ul", [
                        _c("li", [
                          _vm._v("When do I use media during the lesson?")
                        ]),
                        _c("li", [
                          _vm._v("What will the media do for my students?")
                        ]),
                        _c("li", [
                          _vm._v("How will I select the right media?")
                        ]),
                        _c("li", [
                          _vm._v("How will I prepare for the use of media?")
                        ])
                      ]),
                      _vm._v(
                        " Below we will try to answer each one of the questions above. "
                      )
                    ]),
                    _c(
                      "p",
                      { staticClass: "text-justify meme" },
                      [
                        _c("kk", [
                          _c("i", [
                            _vm._v("When do I use media during the lesson?")
                          ])
                        ]),
                        _c("br"),
                        _vm._v(
                          " You will need to use media if it will assist you to achieve your lesson objective(s). Remember that media can be used at the introduction to a lesson, during the lesson, or when concluding the lesson. "
                        )
                      ],
                      1
                    ),
                    _c(
                      "p",
                      { staticClass: "text-justify meme" },
                      [
                        _c("kk", [
                          _c("i", [
                            _vm._v("What will the media do for my students?")
                          ])
                        ]),
                        _c("br"),
                        _vm._v(
                          " Whenever you select to use media during the lesson, remember that the media has a specific role to play in that lesson. Your role is to help students learn by utilizing the media that you will have selected. Active learner participation enhances learning and the most effective learning situations are those that require learners to perform some activities building towards the lesson objectives. According to Romiszowski (1988:62), media selection is based on two classes of media characteristics. These are the essential media characteristics that control the clarity of the message, and optional media characteristics that improve the quality of presentation. Each type of media has a set of advantages "
                        ),
                        _c("c", [_vm._v("(e.g. motion, realism, sound)")]),
                        _vm._v(" "),
                        _c("i", [
                          _vm._v("and a set of educational limitations")
                        ]),
                        _c("c", [_vm._v("(e.g. room size, group size).")])
                      ],
                      1
                    ),
                    _c(
                      "p",
                      { staticClass: "text-justify meme" },
                      [
                        _c("kk", [
                          _c("i", [
                            _vm._v("How will I select the right media?")
                          ])
                        ]),
                        _c("br"),
                        _vm._v(
                          " In selecting the right media, two main steps have to be followed. The first step is to determine your instructional goal(s) and secondly, you must select the most appropriate media to meet the instructional goal(s). "
                        )
                      ],
                      1
                    ),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " To determine the instructional goal(s), you need to consider: "
                      ),
                      _c("ul", [
                        _c("li", [
                          _vm._v(" The nature of the subject being taught; ")
                        ]),
                        _c("li", [
                          _vm._v(
                            " The general and specific instructional objectives to be achieved. For example, what information, skills, attitudes, or behaviour should the students have acquired at the end of the lesson as a result of instruction on that particular topic? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " The nature of subject matter/content to be learned "
                          )
                        ])
                      ])
                    ]),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " To select the media that meets your instructional goal(s), you will need to answer the following questions: "
                      ),
                      _c("ul", [
                        _c("li", [
                          _vm._v(
                            " What are the characteristics of my learners? (E.g. the number of students, their preferred learning styles, learner variable such as reader or non-reader, entry competencies, etc.). "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Will the media be used for large group, small group or individual instruction/study? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Will the media be visual, oral/audio, audio-visual, a combination, projected, or non-projected? (What media matches your instructional goal and objectives?). "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " What specific purpose should the media achieve? (Arouse motivation or maintain interest in the lesson). "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " What media options are available to choose from? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Which medium or combination of media will be most economical yet effective? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Will the media selected provide for learner participation? "
                          )
                        ])
                      ])
                    ]),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " Davis (1981:207) added his voice to the media selection criteria by arguing that selection of audio-visual aids depend largely on: "
                      ),
                      _c("ul", [
                        _c("li", [_vm._v(" Objectives to be achieved; ")]),
                        _c("li", [_vm._v(" Knowledge to be imparted; ")]),
                        _c("li", [_vm._v(" Level of the learner; ")]),
                        _c("li", [_vm._v(" Size of class or group. ")])
                      ])
                    ]),
                    _c("br"),
                    _c("div", { staticClass: "note note-primary meme" }, [
                      _c(
                        "blockquote",
                        { staticClass: "blockquote bq-primary" },
                        [
                          _c("h3", { attrs: { id: "item-2-1" } }, [
                            _c("i", { staticClass: "fas fa-tools" }, [
                              _vm._v(" Activity 3.1")
                            ])
                          ]),
                          _c("p", { staticClass: "text-justify" }, [
                            _vm._v(
                              " Based on the lesson plan you created in the course EDC 100, outline and discuss the criteria you used to select media. "
                            )
                          ])
                        ]
                      )
                    ]),
                    _c("br"),
                    _c(
                      "p",
                      { staticClass: "text-justify meme" },
                      [
                        _c("kk", [
                          _vm._v("How do I prepare for the use of media?")
                        ]),
                        _c("br"),
                        _vm._v(
                          " Once you have selected the most appropriate media, preparations are needed to ensure optimum and effective use of the media. You achieve this by preparing the students, preparing the presentation and preparing the follow-up and evaluation activities. We will give more details on this part when we are talking about systematic planning for the use of media. Let us now discuss the media selection criteria. "
                        )
                      ],
                      1
                    )
                  ]),
                  _c("br"),
                  _c("h3", { attrs: { id: "item-2-2" } }, [
                    _vm._v("3.1.1 Criteria for media selection ")
                  ]),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " Whenever you select media, it is important to consider how the different media present the required stimuli for learning. For example, do your students need to observe in detail the phenomena being studied? Is sound necessary for understanding? Are there certain inside details that the learners need to observe in order to understand how something functions or operates? "
                      )
                    ]),
                    _c(
                      "p",
                      { staticClass: "text-justify meme" },
                      [
                        _vm._v(
                          " Below are the major factors that you will need to consider whenever you select media for instruction:"
                        ),
                        _c("br"),
                        _c("br"),
                        _c("kk", [_vm._v("Instructional Objectives")]),
                        _c("br"),
                        _vm._v(
                          " Your awareness of the expected learning outcomes influences the choice of media. Before selecting any instructional media, always ask your-self this question; "
                        ),
                        _c("i", [
                          _vm._v(
                            " 'What type(s) of media can help me to produce the behaviour required from the learner at the end of the instructional process?' "
                          )
                        ])
                      ],
                      1
                    ),
                    _c(
                      "p",
                      { staticClass: "text-justify meme" },
                      [
                        _c("kk", [_vm._v("Nature of Content")]),
                        _c("br"),
                        _vm._v(
                          " The media that you select to use should suit the content to be delivered. If for example you are teaching a lesson in Geography that focuses on World Climates, you will need to use a world map to help the learners locate the different regions of the world that are influenced by the different climates. If you are teaching a lesson in Biology on blood circulation, you might need to use a model so that students can observe the interior of the model to understand how blood flows to and from the heart. "
                        )
                      ],
                      1
                    ),
                    _c(
                      "p",
                      { staticClass: "text-justify meme" },
                      [
                        _c("kk", [
                          _vm._v("Instructional Strategies being used")
                        ]),
                        _c("br"),
                        _vm._v(
                          " If in your lesson you would like the students to work together and share experiences, then you cannot use a one directional medium such as audio media. Alternatively, if students have to learn a certain skill and demonstration is necessary, then you will need to use real media or simulations. "
                        )
                      ],
                      1
                    ),
                    _c(
                      "p",
                      { staticClass: "text-justify meme" },
                      [
                        _c("kk", [
                          _vm._v("Types of learning tasks facing the learners")
                        ]),
                        _c("br"),
                        _vm._v(
                          " The learning tasks facing the learners influence the choice of media. For example, what type of skill do you want the learners to acquire? Is it observational skills? In such a case, you will need to use descriptive visuals that answer the question; "
                        ),
                        _c("i", [_vm._v("'What do you see?'")])
                      ],
                      1
                    ),
                    _c(
                      "p",
                      { staticClass: "text-justify meme" },
                      [
                        _c("kk", [_vm._v("Learner Characteristics")]),
                        _c("br"),
                        _vm._v(
                          " As you select media, you need to have a good knowledge of the target audience or students. You need to know your students in terms of: "
                        ),
                        _c("ul", [
                          _c("li", [
                            _c("i", [_vm._v("How many are they?")]),
                            _vm._v(
                              " You cannot hold a single photograph in front of a class with forty students and expect all of them to view it clearly from their seats. "
                            )
                          ]),
                          _c("li", [
                            _vm._v(" What "),
                            _c("i", [
                              _vm._v(
                                "are their entry competencies/prior knowledge/assumed knowledge?"
                              )
                            ])
                          ]),
                          _c("li", [
                            _c("i", [
                              _vm._v(
                                " What are the students' preferred learning styles?"
                              )
                            ]),
                            _vm._v(
                              " Some learners depend more on language or spoken word to learn, others depend on visualization, others on hands-on experiences, while others depend on logical reasoning and experimentation. "
                            )
                          ]),
                          _c("li", [
                            _c("i", [
                              _vm._v("What is their background experience?")
                            ]),
                            _vm._v(
                              " If learners are entering a new conceptual area for the first time or they are meeting the content for the very first time, they will require direct and concrete experiences. "
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              " Learner's social-cultural background- It is important to consider the learner's cultural background when selecting media because some media are interpreted based on the audience cultural experiences. "
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              " Unique learner characteristics- Learners in class might have some very unique characteristics. For example, learning disability. It would be unrealistic to use printed materials with a group of slow learners since this would create more problems for them. "
                            )
                          ]),
                          _c("li", [
                            _c("i", [_vm._v("How old are the learners?")]),
                            _vm._v(
                              " Age influences choice of media since it is related to their experience. "
                            )
                          ])
                        ])
                      ],
                      1
                    )
                  ]),
                  _c("br"),
                  _c("h3", { attrs: { id: "item-2-3" } }, [
                    _vm._v("3.1.2 Essential media characteristics")
                  ]),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " Media have different properties. Some media allow us to transport events through time such as photographs, some media create motion, and some allow interior details to be observed, while other media can be transported through space and reproduced anywhere, such as radio and Television broadcasts allowing information from a central place to be heard. These are the qualities of media that we need to exploit when selecting media. Each type of media has certain unique advantages, which makes it more suitable in meeting certain instructional goals compared to others. "
                      )
                    ]),
                    _c(
                      "p",
                      { staticClass: "text-justify meme" },
                      [
                        _c("kk", [_vm._v("Practical Constraints")]),
                        _c("br"),
                        _vm._v(
                          " You can only use media if it is available when needed. There are certain media that you might want to use but you might not, either because they are not available when you need them, or it is too expensive to purchase. It could also be because you lack the technical capability to use the media. "
                        )
                      ],
                      1
                    ),
                    _c(
                      "p",
                      { staticClass: "text-justify meme" },
                      [
                        _c("kk", [_vm._v("Teachers' attitudes towards media")]),
                        _c("br"),
                        _vm._v(
                          " If the teacher has phobia of a certain media, he/she is unlikely to use it even when it would be the best alternative for the given instructional situation. Usually, attitude is linked to teachers' lack of skills needed to use that particular media. It is common to find that teachers will occasionally choose media when it fits their teaching habits, skills and preferences. For instance, teachers born before the computer age might not want to even learn how to use a computer because they associate it with generations that came after them. They will stick to using print media even where the computer would do a sterling job. "
                        )
                      ],
                      1
                    ),
                    _c(
                      "p",
                      { staticClass: "text-justify meme" },
                      [
                        _c("kk", [_vm._v("Appropriateness of the Media")]),
                        _c("br"),
                        _vm._v(
                          " As you select the media, also ask yourself the following question: "
                        ),
                        _c("ul", [
                          _c("li", [
                            _vm._v(
                              " Will the media selected accomplish the defined task? "
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              " Is the media of the correct level of understanding for the class? "
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              " Will the media help you to achieve the expected learning outcomes? "
                            )
                          ])
                        ]),
                        _vm._v(
                          " The above criteria should guide you as you select your instructional media for any instructional situation. "
                        )
                      ],
                      1
                    )
                  ])
                ]),
                _c("br"),
                _c("br"),
                _c("mdb-row", { staticClass: "text-justify" }, [
                  _c(
                    "h2",
                    { staticClass: "h2-responsive", attrs: { id: "item-3" } },
                    [
                      _vm._v(
                        "3.2 Application of the Systems Approach to Media Selection and Use"
                      )
                    ]
                  ),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(" The concept of a "),
                      _c("i", [_vm._v("'system'")]),
                      _vm._v(
                        ' refers to a dynamic and complex whole that interacts as a structured functional unit. A system can also be defined as "a regularly interacting or interdependent group of items forming a unified whole". This can further be defined as "organized or established procedure". '
                      )
                    ]),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " As an example, a system could be a community situated within an environment. Therefore, energy, material and information flow among different elements that compose the system via semi-permeable membranes or boundaries. Systems are often composed of entities or independent complete wholes which can exist on their own but at the same time form part of the complete whole. Hence the phrase, "
                      ),
                      _c("i", [
                        _vm._v(
                          " the whole is greater than the sum total of all its parts put together. "
                        )
                      ])
                    ])
                  ]),
                  _c("br"),
                  _c(
                    "h3",
                    { staticClass: "h3-responsive", attrs: { id: "item-3-1" } },
                    [
                      _vm._v(
                        "3.2.1 Application of the systems approach to teaching and learning"
                      )
                    ]
                  ),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " The systems approach is used to tackle a wide variety of subjects in fields such as education, management, information science, health, computing, engineering, and manufacturing. In this respect, we apply the systems approach whenever we are dealing with problems relating to education."
                      ),
                      _c("br"),
                      _vm._v(
                        " The systems approach has four key components namely: "
                      ),
                      _c("ul", [
                        _c("li", [
                          _vm._v(
                            " Analysis - analysis of needs (i.e. of students' needs, of system resources like space, time, materials and students' abilities). These analyses leads to a statement of the problem in terms of the overall objectives. "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Design - involves identification of the required solution and strategies for addressing the problem including the formulation of objectives. "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Development - involves the planning of available resources, preparation of materials and selection of presentation media. "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Implementation/Evaluation- involves trying out the solution either in a small or large scale and evaluating the effectiveness of the solution for improvement. "
                          )
                        ])
                      ])
                    ]),
                    _c(
                      "div",
                      { staticClass: "note note-warning text-justify meme" },
                      [
                        _vm._v(
                          " Please note that the systems approach is not necessarily a step-by-step process. Analysis, synthesis, and evaluation are recurring stages throughout the process and not necessarily in the traditional format of beginning, middle, and end. "
                        )
                      ]
                    ),
                    _c("br"),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " We are sure you have noted that in a teaching-learning situation we have elements like learners, teachers, teaching-learning materials, classrooms which we can describe as sub-systems. We also have the whole school which is a system but made up of several sub-systems like classes, teachers, students, materials, educational objectives, etc. "
                      )
                    ]),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " You might have looked at a lesson as a system and noted that when you plan for teaching, you have an instructional goal to achieve and the way you organize your instruction depends on the final outcomes that you intend to achieve from your lesson which we refer to as "
                      ),
                      _c("i", [_vm._v("'objectives'")]),
                      _vm._v(
                        ". In that lesson, you have elements like yourself (a teacher), the students, the teaching-learning materials, etc. Before you present the lesson, you begin by planning the lesson since the elements are arranged in a hierarchy. Then you identify the teaching and learning activities and how the interactions will take place. "
                      )
                    ]),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " As you plan your instruction, you make use of inputs from the environment such as text books and other teaching-learning resources. As you present the lesson, you receive feedback from the students or from the other wider school environment and you use that feedback to adjust your teaching since you need to respond to changes happening around you. "
                      )
                    ]),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " As you deliver the lesson, you notice that there are alternative ways of attaining the lesson objectives without following the methods that you followed on this particular lesson."
                      ),
                      _c("br"),
                      _c("br"),
                      _vm._v(
                        " Once you conclude that using instructional media will help you achieve your explicit and/or implicit goals, it is useful to apply the basic steps in the instructional development process to choose and apply the appropriate media. These basic steps include: "
                      ),
                      _c("ul", [
                        _c("li", [
                          _vm._v(
                            " Reviewing instructional goals, objectives, audience and instructional strategy "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Determining the best medium for your lesson components "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Searching for and review existing media/materials "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Adapting existing media/materials if necessary "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " If new media/materials need to be developed: "
                          ),
                          _c(
                            "ul",
                            { staticStyle: { "list-style-type": "circle" } },
                            [
                              _c("li", [
                                _vm._v(
                                  " Determining format, script, visuals, etc. "
                                )
                              ]),
                              _c("li", [
                                _vm._v(" Drafting materials and media ")
                              ]),
                              _c("li", [
                                _vm._v(
                                  " Checking for clarity and flow of ideas "
                                )
                              ])
                            ]
                          )
                        ]),
                        _c("li", [_vm._v(" Conducting formative evaluation ")]),
                        _c("li", [_vm._v(" Implementing/applying ")]),
                        _c("li", [
                          _vm._v(
                            " Evaluating/revising (St. Cloud State University, 1997). "
                          )
                        ])
                      ]),
                      _vm._v(" Critically analyse the steps presented above. "),
                      _c("i", [_vm._v("What do you notice?")])
                    ]),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " Did you note that the steps are procedural? They are arranged in a step-by-step manner. In the same way, whenever you are planning a lesson that incorporates the use of instructional media, you have to be systematic and procedural. Follow the steps listed above. "
                      )
                    ]),
                    _c(
                      "p",
                      { staticClass: "text-justify meme" },
                      [
                        _c("kk", [_vm._v("Practicality:")]),
                        _vm._v(
                          " Gagne, Briggs, and Wager (1992) suggest that instructors address the following series of practical questions before presenting any instructional media: "
                        )
                      ],
                      1
                    ),
                    _c("p", { staticClass: "text-justify font-italic meme" }, [
                      _c("ul", [
                        _c("li", [
                          _vm._v(
                            " What size of group must be accommodated in one room or on a single occasion? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " What is the range of viewing and hearing distance for the use of media? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " How easily can the media be 'interrupted' for pupils responding or other activity and for providing feedback to the learners? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            ' Is the presentation "adaptive" to the learners\' responses '
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Does the desired instructional stimulus require motion, colour, still pictures, spoken or written words? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Is the sequence fixed or flexible in the medium? Is the instruction repeatable in every detail? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Which media can provide best for incorporation of learning appropriate for the objective? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Which media provide more of the desired instructional events? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Do the media under consideration vary in 'effective impact' for the learners? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Are the necessary hardware and software items obtainable, accessible, and storable? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Does using the media cause any disruption? If so, how much? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Is a backup easily available in case of equipment failure, power failure, etc.? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Will the instructor require additional training "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Is a budget provided for spare parts, repairs, and replacement of items that become damaged? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " How does cost compare with probable effectiveness? "
                          )
                        ])
                      ])
                    ]),
                    _c(
                      "p",
                      { staticClass: "text-justify meme" },
                      [
                        _c("kk", [_vm._v("Appropriateness:")]),
                        _vm._v(
                          " Gagne, Briggs, and Wager (1992) recommend that instructors apply the following exclusion and inclusion criteria in selecting media for the various common learning outcomes. "
                        )
                      ],
                      1
                    ),
                    _c("div", { staticClass: "table-responsive meme" }, [
                      _c("table", { staticStyle: { width: "80%" } }, [
                        _c("thead", [
                          _c("tr", [
                            _c(
                              "th",
                              { attrs: { scope: "col" } },
                              [_c("kk", [_vm._v("Learning Outcomes")])],
                              1
                            ),
                            _c(
                              "th",
                              { attrs: { scope: "col" } },
                              [_c("kk", [_vm._v("Exclusion")])],
                              1
                            ),
                            _c(
                              "th",
                              { attrs: { scope: "col" } },
                              [_c("kk", [_vm._v("Selections")])],
                              1
                            )
                          ])
                        ]),
                        _c("tbody", [
                          _c("tr", [
                            _c(
                              "td",
                              [_c("kk", [_vm._v("Intellectual Skills")])],
                              1
                            ),
                            _c("td", [
                              _vm._v(
                                " Exclude media having no interactive features "
                              )
                            ]),
                            _c("td", [
                              _vm._v(
                                " Select media providing feedback to learner responses "
                              )
                            ])
                          ]),
                          _c("tr", [
                            _c(
                              "td",
                              [_c("kk", [_vm._v("Cognitive Strategies ")])],
                              1
                            ),
                            _c("td", [
                              _vm._v(
                                " Exclude media having no interactive features "
                              )
                            ]),
                            _c("td", [
                              _vm._v(
                                " Select media providing feedback to learner responses "
                              )
                            ])
                          ]),
                          _c("tr", [
                            _c(
                              "td",
                              [_c("kk", [_vm._v("Verbal Information")])],
                              1
                            ),
                            _c("td", [
                              _vm._v(
                                " Exclude only real equipment or simulator with no verbal accompaniments "
                              )
                            ]),
                            _c("td", [
                              _vm._v(
                                " Select media able to present verbal messages and elaboration "
                              )
                            ])
                          ]),
                          _c("tr", [
                            _c("td", [_c("kk", [_vm._v("Attitudes")])], 1),
                            _c("td", [
                              _vm._v(
                                " Exclude only real equipment or simulator with no verbal accompaniments "
                              )
                            ]),
                            _c("td", [
                              _vm._v(
                                " Select media able to present realistic picture of human model and the model's message "
                              )
                            ])
                          ]),
                          _c("tr", [
                            _c("td", [_c("kk", [_vm._v("Motor Skills ")])], 1),
                            _c("td", [
                              _vm._v(
                                " Exclude media having no provision for learner responses and feedback "
                              )
                            ]),
                            _c("td", [
                              _vm._v(
                                " Select media making possible direct practice of skill, with informative feedback "
                              )
                            ])
                          ])
                        ])
                      ])
                    ]),
                    _c("br"),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " Regarding media richness and instructional appropriateness, the following table specifies the various characteristics of common media that should be considered in the selection process (Newby, Stepich, Lehman, & Russell, 2000). "
                      )
                    ])
                  ])
                ]),
                _c("br"),
                _c("br"),
                _c("mdb-row", { staticClass: "text-justify" }, [
                  _c(
                    "h2",
                    { staticClass: "h2-responsive", attrs: { id: "item-4" } },
                    [_vm._v("3.3 The Media Selection Process")]
                  ),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: "textjustify meme" }, [
                      _c("ul", [
                        _c("li", [
                          _vm._v(
                            " Since media selection should be systematic, to select the most appropriate media for any lesson you need to follow a certain process, namely: Choosing a media format; "
                          )
                        ]),
                        _c("li", [
                          _vm._v(" Obtaining specific media and materials; ")
                        ])
                      ])
                    ]),
                    _c(
                      "p",
                      { staticClass: "textjustify meme" },
                      [
                        _c("kk", [_vm._v("A media format")]),
                        _vm._v(
                          " refers to the physical form in which a given message is incorporated and displayed. Media formats include for example, flip charts, audio, video, or computer multimedia. Each media format has different strengths and limitations in terms of types of messages that can be recorded and displayed. To choose the media format, consider the criteria that we have discussed above. This will guide you in deciding on the best media format to use. "
                        )
                      ],
                      1
                    ),
                    _c(
                      "p",
                      { staticClass: "textjustify meme" },
                      [
                        _c("kk", [_vm._v("Obtaining specific materials")]),
                        _vm._v(
                          " for the identified media format will involve one of three alternatives: "
                        ),
                        _c("ol", [
                          _c("li", [_vm._v(" selecting available materials ")]),
                          _c("li", [_vm._v(" modifying existing materials ")]),
                          _c("li", [_vm._v(" designing new materials. ")])
                        ]),
                        _vm._v(
                          " If materials that will allow your students to meet your instructional objectives are available, they should be used to save time and money. The simplest, most cost-effective way to incorporate instructional materials into a lesson is to use existing materials. "
                        )
                      ],
                      1
                    ),
                    _c("p", { staticClass: "textjustify meme" }, [
                      _vm._v(
                        " Locating and selecting instructional materials involve the following steps: "
                      ),
                      _c("ul", [
                        _c("li", [
                          _vm._v(" Determinig needs. "),
                          _c("em", [
                            _vm._v(
                              "What are you trying to accomplish? What needs might specific instructional materials address?"
                            )
                          ])
                        ]),
                        _c("li", [
                          _vm._v(
                            " Check a variety of sources. There are a number of sources for instructional materials. You need to know the potential sources of media by surveying the possible sources. "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Obtaining and previewing the materials. Always preview all the materials before using them to be certain that they meet your needs and your students' needs. "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Trying out the materials with your students. "
                          ),
                          _c("em", [
                            _vm._v(
                              " How well do they like the materials? How effectively do the materials help the students learn? "
                            )
                          ])
                        ]),
                        _c("li", [
                          _vm._v(
                            " Comparing with any other competing materials. If you have located more than one set of materials, repeat the preview to compare their effectiveness and appeal to students. "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Making your selection. Use the information you have gathered to select the instructional materials that you think will work best in your situation. "
                          )
                        ])
                      ])
                    ]),
                    _c("p", { staticClass: "textjustify meme" }, [
                      _vm._v(
                        " Whenever you decide to use readily available media materials, the following questions will guide your selection decision: "
                      ),
                      _c("ul", [
                        _c("li", [
                          _vm._v(" Does the medium match the curriculum? ")
                        ]),
                        _c("li", [
                          _vm._v(" Is the media accurate and current? ")
                        ]),
                        _c("li", [
                          _vm._v(
                            " Does the medium contain clear and concise language? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Will the media arouse motivation and maintain interest? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Does the media provide for learner participation? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(" Is the media of good technical quality? ")
                        ])
                      ])
                    ]),
                    _c("p", { staticClass: "textjustify meme" }, [
                      _vm._v(
                        " Besides the above criteria, other selection criteria will vary with different media formats. For example, video raises the issue of the pace of presentation. "
                      )
                    ]),
                    _c("p", { staticClass: "textjustify meme" }, [
                      _vm._v(
                        " If you cannot locate entirely suitable materials and media off the shelf, you might be able to modify what is available. For example, you might have a video clip that shows a needed visual sequence but the audio portion of the video is inappropriate because it is too advanced for the students. In such a case, you might show the video with the sound turned off and then provide a narration yourself. Similarly, you could use a simulation game format but then change the rules of play either to increase or decrease the level of sophistication. "
                      )
                    ]),
                    _c("p", { staticClass: "textjustify font-italic meme" }, [
                      _vm._v(
                        " A word of caution when modifying commercially produced materials; be sure your handling and use of such materials does not violate copyright laws and restrictions. With some commercially produced audio or video materials you may need to seek the permission of the copyright holder before you use them. "
                      )
                    ]),
                    _c("p", { staticClass: "textjustify meme" }, [
                      _vm._v(
                        " In case you fail to find any readily available media or media that could be modified to meet your instructional needs, you might have to design new media. In the event that you have to design new media, you need to consider certain basic elements when designing new materials. These include: "
                      )
                    ]),
                    _c("p", { staticClass: "textjustify meme" }, [
                      _c("ul", [
                        _c("li", [
                          _vm._v(" Instructional objectives-"),
                          _c("em", [
                            _vm._v(" what do you want the students to learn?")
                          ])
                        ]),
                        _c("li", [
                          _vm._v(" Audience- "),
                          _c("em", [
                            _vm._v(
                              " What are the characteristics of your learners? Do they have the prerequisite knowledge and skills to use or learn from the materials? "
                            )
                          ])
                        ]),
                        _c("li", [
                          _vm._v(" Cost- "),
                          _c("em", [
                            _vm._v(
                              "Do you have sufficient funds to meet the costs of the materials?"
                            )
                          ])
                        ]),
                        _c("li", [
                          _vm._v(" Technical expertise- "),
                          _c("em", [
                            _vm._v(
                              " do you have the necessary technical expertise to design and produce the kind of materials you wish to use? "
                            )
                          ])
                        ]),
                        _c("li", [
                          _vm._v(" Equipment- "),
                          _c("em", [
                            _vm._v(
                              " do you have the necessary equipment to produce or use the materials that you intend to design? "
                            )
                          ])
                        ]),
                        _c("li", [
                          _vm._v(" Facilities- "),
                          _c("em", [
                            _vm._v(
                              " if your design calls for use of special facilities for preparation or use of the materials, are such facilities available? "
                            )
                          ])
                        ]),
                        _c("li", [
                          _vm._v(" Time- "),
                          _c("em", [
                            _vm._v(
                              " can you afford to spend whatever time necessary to design and produce the kind of materials you have in mind? "
                            )
                          ])
                        ])
                      ])
                    ])
                  ])
                ]),
                _c("br"),
                _c("br"),
                _c("mdb-row", { staticClass: "text-justify" }, [
                  _c(
                    "h2",
                    { staticClass: "h2-responsive", attrs: { id: "item-5" } },
                    [_vm._v("3.4 Media Selection Models")]
                  ),
                  _c(
                    "p",
                    { staticClass: " text-justify meme ml-5" },
                    [
                      _vm._v(
                        " To assist in media selection decisions, media selection models are used. Models consist of basic elements that need to be taken into consideration when choosing media. Several media selection models have been used. Among them include what is called "
                      ),
                      _c("kk", [_vm._v("the basic model")]),
                      _vm._v(". ")
                    ],
                    1
                  ),
                  _c("br"),
                  _c(
                    "h3",
                    { staticClass: "h3-responsive", attrs: { id: "item-5-1" } },
                    [_vm._v("3.4.1 The basic model ")]
                  ),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " This model is based on the application of a systems approach. A systems approach is a procedural way of thinking about problems in education. A systems approach can be defined as; "
                      ),
                      _c("em", [
                        _vm._v(
                          " 'an overall approach that involves tackling problems in a disciplined manner keeping priorities in mind. The sub-system making up the overall system can be designed, fitted, checked, and operated so as to achieve the overall objective efficiently (Rowntree, 1974). "
                        )
                      ])
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " A system can also be described as the sum total of interrelated parts working together to form a complete whole. For example, a car or the human body is a system. Even an institution like the University of Swaziland (UNISWA) is a system. A system contains certain elements; i.e. inputs, outputs, environment, sub-systems, etc. Any system receives inputs from the environment and gives out outputs after they have been processed. However, within a system, there are sub-systems which function independently of each other. When the sub-systems combine together, they form a complete whole. It is therefore argued, according to the systems thinking, that the whole is greater than the sum total of its parts put together. Inputs, outputs and processes are defined in relation to each other, as a change in one will affect all other parts."
                      ),
                      _c("br"),
                      _c("br"),
                      _vm._v(
                        " In a systems approach, each decision is justified in terms of pre-planned objectives. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " The systems approach is a problem-solving method that helps to: "
                      ),
                      _c("ul", [
                        _c("li", [
                          _vm._v(" Define the problem as clearly as possible; ")
                        ]),
                        _c("li", [
                          _vm._v(
                            " Analyze the problem and identify alternative solutions; "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Select from the alternatives and develop the most viable solution mix; "
                          )
                        ]),
                        _c("li", [
                          _vm._v(" Implement and test the solution; ")
                        ]),
                        _c("li", [
                          _vm._v(
                            " Evaluate the effectiveness and worth of the solution. "
                          )
                        ])
                      ])
                    ])
                  ]),
                  _c("br"),
                  _c(
                    "h4",
                    {
                      staticClass: "h4-responsive",
                      attrs: { id: "item-5-1-1" }
                    },
                    [_vm._v("3.4.1.1 Selection of media")]
                  ),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " For you to select the appropriate media therefore, the above steps in the systems approach will assist you. Below are four basic steps for you to follow: "
                      ),
                      _c("ol", [
                        _c("li", [
                          _c("em", [_vm._v("Needs assessment")]),
                          _vm._v(
                            " - identify the need (what needs to be taught) "
                          )
                        ]),
                        _c("li", [
                          _c("em", [_vm._v("Formulate goal/objectives")]),
                          _vm._v(
                            " - (design stage). Based on what you want your learners to achieve at the end of the instruction, write your goal and objectives. When writing objectives take into consideration the knowledge, skills and attitudes you expect learners to achieve. During this stage you also begin designing your lesson plan. "
                          )
                        ]),
                        _c("li", [
                          _c("em", [_vm._v("Develop/Select media")]),
                          _vm._v(
                            ' - Based on the formulated objectives, develop or select the media that suites the learning outcome. E.g., if learners are going to be able to define "Volcano", the media you choose to use should make it clear to the learners so that they are able to define volcano. You could use a chart, a poster, a picture, a video, etc. '
                          )
                        ]),
                        _c("li", [
                          _c("em", [_vm._v("Implement the instruction")]),
                          _vm._v(
                            " - you can now put your materials into use by showing what you have developed or selected on your lesson plan. However, before actual implementation you should pre-test your materials to see if they will address the learning outcomes. For proper implementation, refer also to the ASSURE Model (see Section 3.5 ). "
                          )
                        ])
                      ])
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " Evaluate learning - you should evaluate whether learning is or has taken place. This is done formatively (during instruction) and summatively (at the end of the instruction). The end could be a lesson, a unit, or a section. "
                      )
                    ]),
                    _c("br"),
                    _c("div", { staticClass: "note note-primary meme" }, [
                      _c(
                        "blockquote",
                        { staticClass: "blockquote bq-primary" },
                        [
                          _c("h3", { attrs: { id: "item-5-0" } }, [
                            _c("i", { staticClass: "fas fa-tools" }, [
                              _vm._v(" Activity 3.2")
                            ])
                          ]),
                          _c("p", { staticClass: "text-justify" }, [
                            _c("ol", [
                              _c("li", [
                                _vm._v(
                                  " Based on your teaching subject, create a lesson plan based on the guidelines in the course IDE-EDC 100 and other guidelines posted on the course website. [5 marks for goal and objectives; 5 marks for following plan format] "
                                )
                              ]),
                              _c("li", [
                                _vm._v(
                                  " The plan should indicate the media to be used in the lesson [5 marks] "
                                )
                              ]),
                              _c("li", [
                                _vm._v(
                                  " Justify the use of the media selected [5 marks]. "
                                )
                              ])
                            ])
                          ])
                        ]
                      )
                    ])
                  ]),
                  _c("br"),
                  _c(
                    "h3",
                    { staticClass: "h3-responsive", attrs: { id: "item-5-2" } },
                    [
                      _vm._v(
                        " 3.4.2 Steps to follow in systematic planning for the use of media (ASSURE Model) "
                      )
                    ]
                  ),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " To use instructional media effectively requires that you apply the systems approach that we have discussed above. As we noted from the systems approach, instructional planning needs to be systematic and procedural. For example, to use instructional media effectively, there must be a match between the characteristics of the learners and the methods, media and materials. This can best be achieved by applying the ASSURE Model which is a procedural guide for planning and conducting instruction that incorporates media. The ASSURE model involves a series of steps that include: "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("ul", [
                        _c("li", [_vm._v(" Analyzing the learners ")]),
                        _c("li", [_vm._v(" Stating objectives ")]),
                        _c("li", [
                          _vm._v(" Selecting methods, media and materials ")
                        ]),
                        _c("li", [_vm._v(" Utilizing media and materials ")]),
                        _c("li", [_vm._v(" Requiring learner participation ")]),
                        _c("li", [_vm._v(" Evaluating and revising. ")])
                      ])
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " Did you notice where the acronym ASSURE comes from? Look at the first letter of each of the six steps that are followed when planning a lesson that involves the use of instructional media. Let us now discuss each of these steps in more details. "
                      )
                    ]),
                    _c(
                      "h4",
                      {
                        staticClass: "h4-responsive",
                        attrs: { id: "item-1-2-1" }
                      },
                      [_vm._v("3.4.2.1 Analyse the learners ")]
                    ),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " Analysing the learners before selecting and using instructional media is one way to help ensure effective use of media by making decisions that relate to media selection. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " Before selecting any media, you need to analyse the learners in terms of: "
                      ),
                      _c("ul", [
                        _c("li", [
                          _vm._v(" General learner characteristics; ")
                        ]),
                        _c("li", [_vm._v(" Specific entry competencies; ")]),
                        _c("li", [_vm._v(" Learning styles. ")])
                      ])
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " Let us unpack what the above bullet points mean. General learner characteristics include the broad audience identification descriptors such as age, gender composition, grade level, learning ability, homogeneous or heterogeneous group, socio-cultural background, size of the audience, and any special learning needs. Specific entry competencies refer to knowledge and skills that learners either possess or lack such as pre-requisite skills, and attitudes. Learning styles refer to the spectrum of psychological traits that affect how we perceive and respond to different stimuli such as anxiety, aptitude, visual or auditory preferences, etc. Below, we are going to look closely at each analysis. "
                      )
                    ]),
                    _c(
                      "p",
                      { staticClass: " text-justify meme" },
                      [
                        _c("kk", [_vm._v("General learner characteristics")]),
                        _c("br"),
                        _vm._v(
                          " Analysis of the learner characteristics is helpful in selecting instructional methods and media. For example, students with substandard reading skills may be reached more effectively with non-print media than with print. When teaching students in Swaziland, use of materials that represent familiar cultural identity will be more effective than when you use materials that are completely foreign to them. When you are teaching students that are entering a new conceptual area for the first time, direct and concrete experiences such as field trips will be more effective. Heterogeneous groups which include learners varying widely in their conceptual sophistication or in amount of first-hand experience on a certain topic will benefit more from an audio-visual experience such as a videotape. "
                        )
                      ],
                      1
                    ),
                    _c(
                      "p",
                      { staticClass: " text-justify meme" },
                      [
                        _c("kk", [_vm._v("Specific entry competencies")]),
                        _c("br"),
                        _vm._v(
                          " Students' prior knowledge of a particular subject influences how and what they learn. This means that before you plan a lesson, you need to verify the entry competencies of the learners, either through informal means such as in-class questioning, or formally through tests. Prerequisites refer to competencies that the learner must possess in order to benefit from the instruction, competencies that you or media are not going to teach. By analysing what the audience already knows helps you to select appropriate methods and media. "
                        )
                      ],
                      1
                    ),
                    _c(
                      "p",
                      { staticClass: " text-justify meme" },
                      [
                        _c("kk", [_vm._v("Learning styles")]),
                        _c("br"),
                        _vm._v(
                          " Learning style refers to students' approaches to learning, problem-solving and processing information (Snow, Corno, & Jackson, 1996). Learning style can also be defined as a cluster of psychological traits that determine how an individual perceives, interacts with, and responds emotionally to learning environments (Heinich et al., 1996:37). "
                        )
                      ],
                      1
                    ),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " Certain traits affect our ability to learn effectively from different methods and media. However, it is not clear which traits are most important. Gardner (1993) who was dissatisfied with the concept of IQ and its unitary view of intelligence identified seven aspects of intelligence namely: "
                      ),
                      _c("ol", [
                        _c("li", [_vm._v(" verbal/linguistic (language) ")]),
                        _c("li", [
                          _vm._v(" logical/mathematical (scientific) ")
                        ]),
                        _c("li", [_vm._v(" visual/spatial ")]),
                        _c("li", [_vm._v(" musical/rhythmic, ")]),
                        _c("li", [
                          _vm._v(" bodily/kinesthetic (dancing/athletics) ")
                        ]),
                        _c("li", [
                          _vm._v(
                            " interpersonal (ability to understand other people) and "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " intrapersonal (ability to understand oneself). "
                          )
                        ])
                      ])
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " Gardner's view implies that teachers, curriculum planners and media specialists should work together to design a curriculum in which students have a chance to develop these different aspects of intelligence. It also implies that students vary widely in terms of their strengths and weaknesses in each of these areas. The teacher should ensure that students are engaged in a wider variety of methods and media. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " One simple way of thinking about learning styles is to consider the sensory channels that a student prefers for taking in new information- visual, auditory, or kinesthetic. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " We need to note that students are not alike as they differ from each other in terms of their sensory preferences. Therefore, we should vary our instruction to accommodate those differences. "
                      )
                    ]),
                    _c(
                      "p",
                      { staticClass: " text-justify meme" },
                      [
                        _vm._v(
                          " Learning style variables can then be categorized into the following; "
                        ),
                        _c("kk", [
                          _vm._v(
                            " perceptual preferences and strengths, information processing habits, motivational factors, and physiological factors. "
                          )
                        ])
                      ],
                      1
                    ),
                    _c(
                      "p",
                      { staticClass: " text-justify meme" },
                      [
                        _c("kk", [
                          _c("em", [
                            _vm._v("Perceptual preferences and strengths")
                          ])
                        ]),
                        _c("br"),
                        _vm._v(
                          " Learners vary as to which sensory gateways they prefer using and which they are especially adept at using. The main gateways include; "
                        ),
                        _c("kk", [
                          _c("em", [
                            _vm._v(
                              " auditory, visual, tactile, and kinesthetic. "
                            )
                          ])
                        ]),
                        _vm._v(
                          " Based on the information we presented in Unit 2, we noted that most of the information that we receive is obtained through our sense of sight. This view was confirmed by Dale's Cone of experience. "
                        )
                      ],
                      1
                    ),
                    _c(
                      "p",
                      { staticClass: " text-justify meme" },
                      [
                        _c("kk", [
                          _c("em", [_vm._v("Information processing habits")])
                        ]),
                        _c("br"),
                        _vm._v(
                          ' This relates to how individuals approach the cognitive processing of information. Gregorc\'s model "mind styles", elaborated by Butler (1986), classify learners according to concrete versus abstract and random versus sequential styles. The model yielded four categories namely:'
                        ),
                        _c("kk", [
                          _c("em", [
                            _vm._v(
                              " concrete sequential, concrete random, abstract sequential, and abstract random. "
                            )
                          ])
                        ])
                      ],
                      1
                    ),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " Concrete sequential learners prefer direct, hands-on experiences presented in a logical order. They are best with workbooks, demonstration, and structured laboratory exercises. Concrete random learners lean towards a trial-and-error approach and reaching conclusions from exploratory experiences. They prefer methods such as games, simulations, independent study projects and discovery learning. For abstract sequential learners decoding verbal and symbolic messages and readings as well as listening to presentations are preferred methods. Abstract random learners have the ability to draw meaning from human-mediated presentations as they respond to tone and style of the speaker as well as the message. They do well in group discussion and lectures with question-and-answer periods. "
                      )
                    ]),
                    _c(
                      "p",
                      { staticClass: " text-justify meme" },
                      [
                        _c("kk", [_vm._v("Motivational factors")]),
                        _c("br"),
                        _vm._v(
                          " Motivation refers to a process whereby a goal-oriented activity is instigated and maintained. Motivation is a common influence on human activities. Motivation makes direct contribution to learning by focusing students on certain desired learning goals and increasing the effort they expend in reaching those goals (Newby et al., 2006). Various emotional factors do influence what we pay attention to, how long we pay attention, how much effort we invest in learning, and how feelings may interfere with learning. Anxieties, locus of control, achievement motivation and competitiveness, are critical variables to the learning process."
                        ),
                        _c("br"),
                        _vm._v(
                          " Knowing something about your students' motivation will help with instructional planning as it will help you to add to the extrinsic or intrinsic appeal of instruction especially with regard to choice of instructional media. For example, you might use curiosity by presenting students with a variety of situations that are unique, surprising, or inconsistent with their existing ideas. "
                        )
                      ],
                      1
                    ),
                    _c(
                      "p",
                      { staticClass: " text-justify meme" },
                      [
                        _c("kk", [_vm._v("Physiological factors")]),
                        _c("br"),
                        _vm._v(
                          " These are factors related to gender differences, health, and environmental conditions. Boys and girls respond differently to school experiences. For example, boys tend to be more competitive and aggressive than girls and consequently respond better to competitive games. "
                        )
                      ],
                      1
                    ),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " Therefore, analysing the learners will help you as a teacher in making decisions about the types of instructional media to use. You are able to select media that are within the ability level of the students, that fits the size of the class, or media that will appeal to the information processing habits of the students. "
                      )
                    ]),
                    _c(
                      "p",
                      { staticClass: " text-justify meme" },
                      [
                        _c("kk", [_vm._v("Special needs")]),
                        _c("br"),
                        _vm._v(
                          " We need to remember that students are individuals and differ from one another in a variety of ways. We need to assess and address the special needs of all learners in our class. "
                        )
                      ],
                      1
                    )
                  ]),
                  _c("br"),
                  _c(
                    "h4",
                    {
                      staticClass: "h4-responsive",
                      attrs: { id: "item-5-2-2" }
                    },
                    [_vm._v("3.4.2.2 State objectives")]
                  ),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " The second step in the ASSURE model is to state objectives of instruction. You need to decide on the learning outcomes that each learner will be expected to achieve. An objective is a statement of what each learner ought to get out of the lesson. The statement of objective should be as specific as possible. Statement of objectives influences the choice of instructional methods, media and materials as well as the sequence of learning activities. Statement of instructional objectives also helps to ensure proper lesson evaluation. "
                      )
                    ]),
                    _c(
                      "p",
                      { staticClass: " text-justify meme" },
                      [
                        _vm._v(
                          " When stating the instructional objectives, always consider the characteristics of a well stated objective. A well stated objective starts by naming the "
                        ),
                        _c("kk", [_c("em", [_vm._v("Audience")])]),
                        _vm._v(
                          " of the learners for whom the objective is intended, then specifies the "
                        ),
                        _c("kk", [_c("em", [_vm._v("Behaviour")])]),
                        _vm._v(" or capability to be demonstrated, the "),
                        _c("kk", [_c("em", [_vm._v("Conditions ")])]),
                        _vm._v(
                          " under which the behaviour or the capability will be observed, and finally it specifies the "
                        ),
                        _c("kk", [_c("em", [_vm._v("Degree")])]),
                        _vm._v(" to which the new skill must be mastered. "),
                        _c("em", [
                          _vm._v(
                            "This criterion is referred to as the ABCD of well-stated objective."
                          )
                        ])
                      ],
                      1
                    ),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " Since you have discussed the statement of instructional objectives under the Teaching Principles and Practice course module (EDC 100), this module will not discuss objectives in detail. The behaviours to be demonstrated should always be stated in observable behavioural terms and use appropriate performance terms like name, list, describe, classify, compare, identify, select, etc. as you may have noticed, the word 'know' is not among the terms stated above. What could be the reason for this omission? "
                      )
                    ]),
                    _c(
                      "p",
                      { staticClass: " text-justify meme" },
                      [
                        _vm._v(" The "),
                        _c("kk", [_vm._v("condition")]),
                        _vm._v(
                          " refers to the circumstances under which the students will be expected to perform. For example, what will they be given to work with? The "
                        ),
                        _c("kk", [_vm._v("degree")]),
                        _vm._v(
                          " describes the standard that defines desired performance. It answers the question - 'How well must students perform'. For example, "
                        ),
                        _c("em", [
                          _vm._v(
                            ' "given a topic, students will be able to compose a one page letter that contains no more than two grammatical errors". '
                          )
                        ]),
                        _c("br"),
                        _vm._v(
                          " We should emphasize here that an instructional objective is classified according to the primary type of learning outcome at which it is aimed. All learning outcomes are classified according to the four basic learning domains namely; "
                        ),
                        _c("kk", [
                          _vm._v(
                            " cognitive, affective, psychomotor and interpersonal or social skills. "
                          )
                        ]),
                        _vm._v(
                          " Under cognitive domain, learning focuses on intellectual capabilities, affective domain focuses on feelings and values, psychomotor learning involves physical skills, while interpersonal domain involve interactions among people. "
                        )
                      ],
                      1
                    ),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " As you formulate instructional objectives depending on the nature of the subject matter that you want to present, always ensure that your learning outcomes address as many of the learning domains as possible. "
                      )
                    ])
                  ]),
                  _c("br"),
                  _c(
                    "h4",
                    {
                      staticClass: "h4-responsive",
                      attrs: { id: "item-5-2-3" }
                    },
                    [_vm._v("3.4.2.3 Select methods, media, and materials")]
                  ),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " A systematic plan for using media demands that the methods, media and materials be selected systematically. The selection process has three steps: "
                      ),
                      _c("ol", [
                        _c("li", [
                          _vm._v(
                            " Decide on the appropriate method for the given learning tasks "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            "Choose a media format that is suitable for carrying out the method, and"
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            "Select, modify, or design specific materials within that media format."
                          )
                        ])
                      ])
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("em", [_vm._v("Decide on a method")]),
                      _c("br"),
                      _vm._v(
                        " Since no one single method can be appropriate for all instructional situations, you will need to use more than one instructional method during the lesson. For example, during the lesson introduction, you might want to use a simulation activity to capture the attention and arouse interest of the learners, but you might use a demonstration to present the new information. Finally you might arrange for drill-and-practice activities to provide practice in the new skills. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " Choice of instructional method(s) should be determined by: "
                      ),
                      _c("ul", [
                        _c("li", [_vm._v("The nature of the subject matter,")]),
                        _c("li", [
                          _vm._v("The learning outcomes to be achieved,")
                        ]),
                        _c("li", [_vm._v("The learner characteristics, and ")]),
                        _c("li", [
                          _vm._v(
                            "The learning experiences to be organized for the learners."
                          )
                        ])
                      ])
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("em", [_vm._v("Choosing a media format")]),
                      _c("br"),
                      _vm._v(
                        " A media format is the physical form in which a message is incorporated and displayed. Media formats could include; audio, video, computer multimedia, still visuals (graphics, flip chart, etc.), text, etc. In Unit 2 of this module we discussed the various types of media. Please refer to the relevant unit to remind yourself about the different types of media that we identified. Note that each media format has its unique strengths and limitations which make it suitable for use in different instructional situations. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " One thing to note is that whenever you select media for teaching and learning, you will need to consider certain factors. Among those factors include: "
                      ),
                      _c("ul", [
                        _c("li", [
                          _vm._v(
                            "The learning goal and the instructional objectives to be achieved;"
                          )
                        ]),
                        _c("li", [_vm._v("The learner characteristics;")]),
                        _c("li", [_vm._v("The nature of the subject matter;")]),
                        _c("li", [_vm._v("The unique media characteristics;")]),
                        _c("li", [
                          _vm._v(
                            "Practical constraints such as availability of media;"
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            "Technical ability /expertise of the instructor."
                          )
                        ])
                      ])
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("em", [_vm._v("Obtaining specific materials")]),
                      _c("br"),
                      _vm._v(
                        " Obtaining specific materials will generally involve one of three alternatives: "
                      ),
                      _c("ol", [
                        _c("li", [_vm._v("selecting available materials ")]),
                        _c("li", [_vm._v("modifying existing materials ")]),
                        _c("li", [_vm._v("designing new materials. ")])
                      ])
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " When there are existing instructional materials that could allow the students to meet their instructional objectives, such materials should be used to save time and money. However, when the existing materials do not completely meet your objectives or are not entirely suitable for your audience, an alternative approach is to modify the materials. For example, you might select a video whose content might not be suitable for your class but the visuals could be useful in illustrating certain concepts that you would like the students to understand. In such a case, you will remove the sound, and only select the relevant visuals to use. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " When modification of existing materials is not possible, then your final alternative is to design and produce your own materials. This is an expensive and time consuming process but it allows you to prepare materials that serve your students well and meet your objectives. Unit 4 discusses how to design and produce the various types of instructional materials. You might need to refer to this unit in case you decide to produce your own materials. "
                      )
                    ]),
                    _c(
                      "p",
                      { staticClass: " text-justify meme" },
                      [
                        _c("kk", [_vm._v("Selecting available materials")]),
                        _c("br"),
                        _vm._v(
                          ' The majority of instructional materials used by teachers are "off the shelf" as they are ready-made and available either in school or can be obtained from organizations, institutions, libraries, resource centres, video shops and publishers. As a teacher, you need to be resourceful enough to survey possible sources of media. For example, you could request for media catalogues from the local publishers to identify what types of materials are available in the various subjects offered in your school. '
                        )
                      ],
                      1
                    ),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " If you are a science teacher, you could visit The Science Education Centre located at the Kwaluseni campus of the University of Swaziland (UNISWA) which is managed by the Department of In-service within the Faculty of Education. They have a collection of videotapes that could be very useful in your teaching subjects. Other places that you might visit include the National Curriculum Centre, the Foreign Embassies accredited to Swaziland, Government Ministries, United Nations Agencies, etc. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " As a resourceful teacher, you need to build a collection of media materials by creating a media centre where all relevant instructional materials that you come across are filed and collected. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("em", [_vm._v("Media selection criteria")]),
                      _c("br"),
                      _vm._v(
                        " The decision on whether to use a certain instructional material or not depends on several factors some of which we have already discussed. Before you select a particular type of media material, you need to ask yourself the following questions: "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("ul", [
                        _c("li", [
                          _vm._v("Does it match the curriculum content?")
                        ]),
                        _c("li", [_vm._v("Is it accurate and current?")]),
                        _c("li", [
                          _vm._v("Does it contain clear and concise language?")
                        ]),
                        _c("li", [
                          _vm._v(
                            "Will it arouse motivation and maintain interest?"
                          )
                        ]),
                        _c("li", [
                          _vm._v("Does it provide for learner participation?")
                        ]),
                        _c("li", [_vm._v("Is it of good technical quality?")]),
                        _c("li", [
                          _vm._v(
                            "Is a user guide or other documentation included?"
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            "Is the pace of presentation appropriate for the media? (Heinich et al.; 1996:47)."
                          )
                        ])
                      ])
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("em", [_vm._v("Modifying available materials")]),
                      _c("br"),
                      _vm._v(
                        " When you cannot locate entirely suitable materials and media off the shelf, you might be able to modify what is available. Say for example you have a videotape that shows a needed visual sequence but the audio portion is inappropriate. In such a case you could show the video with the sound turned off and provide a narration yourself. You can also use instructional games to teach certain concepts by merely changing the rules of play to increase or decrease the level of sophistication. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("em", [_vm._v(" Designing new materials")]),
                      _c("br"),
                      _vm._v(
                        " There are times when you have no choice but to design new materials that would suit your instructional objectives. Whenever you decide to design new materials, consider the following design elements: "
                      ),
                      _c("ul", [
                        _c("li", [
                          _c("em", [_vm._v("Objectives")]),
                          _vm._v("- what do you want your students to learn? ")
                        ]),
                        _c("li", [
                          _c("em", [_vm._v("Audience")]),
                          _vm._v(
                            "- what are the characteristics of your learners? Do they have the prerequisite knowledge and skills to use or learn from the materials? "
                          )
                        ]),
                        _c("li", [
                          _c("em", [_vm._v("Cost")]),
                          _vm._v(
                            "- is sufficient money available in your budget to meet the cost of supplies that you will need to prepare the materials? "
                          )
                        ]),
                        _c("li", [
                          _c("em", [_vm._v("Technical expertise")]),
                          _vm._v(
                            "- do you have the necessary expertise to design and produce the kind of materials you wish to use? "
                          )
                        ]),
                        _c("li", [
                          _c("em", [_vm._v("Equipment")]),
                          _vm._v(
                            "- do you have the necessary equipment to produce or use the materials you intend to design "
                          )
                        ]),
                        _c("li", [
                          _c("em", [_vm._v("Facilities")]),
                          _vm._v(
                            "- if your design calls for use of special facilities for preparation or use of your materials, are such facilities available? "
                          )
                        ]),
                        _c("li", [
                          _c("i", [_vm._v("Time")]),
                          _vm._v(
                            "- can you afford to spend whatever time necessary to design and produce the kind of materials you have in mind? "
                          )
                        ])
                      ])
                    ])
                  ]),
                  _c("br"),
                  _c(
                    "h4",
                    {
                      staticClass: "h4-responsive",
                      attrs: { id: "item-5-2-4" }
                    },
                    [_vm._v("3.4.2.4 Utilize media and materials")]
                  ),
                  _c("div", { staticClass: "ml-5" }, [
                    _c(
                      "p",
                      { staticClass: " text-justify meme" },
                      [
                        _vm._v(
                          " This step involves the actual use of media and materials by the students and the teacher. Since the focus of any lesson is to help the students learn, learner involvement in the use of media and materials is critical. At this stage, the "
                        ),
                        _c("kk", [_c("i", [_vm._v('"5Ps"')])]),
                        _vm._v(
                          " apply either for teacher-based or learner-based instruction.The five Ps include: "
                        )
                      ],
                      1
                    ),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("ul", [
                        _c("li", [_vm._v("Preview the Materials;")]),
                        _c("li", [_vm._v("Prepare the materials;")]),
                        _c("li", [_vm._v("Prepare the environment;")]),
                        _c("li", [_vm._v("Prepare the learners; and ")]),
                        _c("li", [_vm._v("Provide the learning experience. ")])
                      ])
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("i", [_vm._v("Preview the Materials")]),
                      _c("br"),
                      _vm._v(
                        " No instructional materials should be used without prior screening. During the selection process, you should ensure that the materials are appropriate for your audience and objectives. Preview the materials to confirm that it meets the learning needs of your students and your intended learning outcomes. It is also important to preview the materials before using them to ensure that it is culturally appropriate for your audience. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("em", [_vm._v("Prepare the materials")]),
                      _c("br"),
                      _vm._v(
                        " You need to prepare the media and the materials to support the instructional activities that you plan to use. This is necessary whether you are presenting the materials or your students are using them. First, gather the materials and equipment that you and your students will need. Then determine the sequence in which the media and materials will be used. Decide what you will do as you present the materials and what the students will do. It might be necessary to practice using the materials before actually using them in class. For a student-centred lesson, ensure that the students have access to all the materials, media and equipment that they will need. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("i", [_vm._v("Prepare the environment")]),
                      _c("br"),
                      _vm._v(
                        " Wherever learning will take place, whether in a classroom, in the laboratory, in the field, etc., the facilities have to be arranged for proper students' use of media and materials. For example, the seating arrangement, the lighting, and ventilation, should be considered depending on the type of media being used. In case you are using a videotape, all the students should be able to view the presentation without being obstructed. Some of the media require a darkened room, convenient power source and access to light switches. "
                      ),
                      _c("br"),
                      _c("br"),
                      _vm._v(
                        " Before using any equipment, check to confirm that it is working. In the case of the film or the overhead transparencies, ensure that the light bulb is not blown-off. In case you want the students to discuss the media after using it, arrange the seats so that students can see each other as they discuss the topic. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("i", [_vm._v("Prepare the learners")]),
                      _c("br"),
                      _vm._v(
                        " What students learn depends on the how well they are prepared for the lesson. Therefore, before using any media, prepare the learners. What you could do to prepare the learners for the use of media may be to: "
                      ),
                      _c("ul", [
                        _c("li", [
                          _vm._v(
                            "Provide an introduction and give a broad overview of the lesson content;"
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            "Provide a rationale indicating how the lesson relates to the overall topic being studied;"
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            "Tell students what to pay attention to as they use the media;"
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            "Direct the learners' attention to specific aspects of the lesson. "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " If students do not have the prerequisite knowledge to understand the media being used, provide some information to assist their understanding of the materials presented "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " In case there are certain vocabularies that will be mentioned and need to be explained, discuss them before presenting the media. "
                          )
                        ])
                      ])
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("i", [_vm._v("Provide the learning experience")]),
                      _c("br"),
                      _vm._v(
                        " Whenever you use media and materials in a lesson, the purpose is to help students learn. Therefore, provide opportunities for the students to engage in some learning experiences. You should play the role of a guide to facilitate learning by helping students to explore the topic, discuss the content, etc. The students should be actively involved in the use of media and materials and not just be silent observers. Provide activities for the students to engage in as you use the media and materials in class. "
                      )
                    ])
                  ]),
                  _c("br"),
                  _c(
                    "h4",
                    {
                      staticClass: "h4-responsive",
                      attrs: { id: "item-5-2-5" }
                    },
                    [_vm._v("3.4.2.5 Require learner participation")]
                  ),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " Active participation in the learning process enhances learning. Cognitive theories of learning, which focus on internal mental processes, have also supported the principle that effective learning demands active manipulation of information by learners. Gagne (1985), concluded that there are several necessary conditions for effective learning of each type of objective, but one condition that pertains to all objectives is "
                      ),
                      _c("i", [_vm._v("'practice of the desired skill'")]),
                      _vm._v(
                        ". Therefore, the most effective learning situations are those that require learners to perform activities that build toward the objective. The form of participation could include; practising new spelling of words, solving some mathematical problems, creating a product, observing some visuals and interpreting them, etc. Discussions, short quizzes, and application exercises can provide opportunities for practice and feedback during instruction. Follow-up activities can provide further opportunities for practice. "
                      )
                    ])
                  ]),
                  _c("br"),
                  _c(
                    "h4",
                    {
                      staticClass: "h4-responsive",
                      attrs: { id: "item-5-2-6" }
                    },
                    [_vm._v("3.4.2.6 Evaluate and revise")]
                  ),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " The final component of the ASSURE model for effective learning is evaluation and revision. Evaluation as we know , is an on-going process and it can be done before, during and after instruction. For example, before instruction, you might want to find out whether learners have the necessary prerequisite knowledge to enter a new learning experience especially with regard to the use of the planned media and materials. You might also evaluate the media and materials before presenting it in class to confirm that it will meet the learners' intended learning outcomes. During instruction, evaluation is used in form of student practice of a desired skill, short quiz or self- evaluation. Evaluation at this stage is mainly diagnostic to help detect any teaching/learning problems and difficulties in the instructional process that might interfere with the attainment of objectives. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("i", [_vm._v("Evaluation of learner achievement")]),
                      _c("br"),
                      _vm._v(
                        " The ultimate question in the instructional process is whether the students have learned what they were supposed to learn (Heinich et al.; 1996:56). Can they display the capabilities specified in the original statement of objectives? At this stage, you want to assess whether the skills acquired by the learners meet this criterion."
                      ),
                      _c("br"),
                      _vm._v(
                        " Evaluation of achievement depends on the nature of objectives. For example, some objectives can be evaluated through written tests while others require practical activities. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("i", [_vm._v("Evaluation of media and materials")]),
                      _c("br"),
                      _vm._v(
                        " Evaluation should also include the assessment of instructional media and materials. After using the media and materials, you need to reflect back and ask yourself the following questions: "
                      ),
                      _c("ul", [
                        _c("li", [
                          _vm._v(
                            " Were the instructional materials effective? "
                          )
                        ]),
                        _c("li", [_vm._v(" Could they be improved? ")]),
                        _c("li", [
                          _vm._v(
                            " Were the materials cost-effective in terms of student achievement? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Did your presentations take more time than it was worth? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Were the materials interesting enough to motivate students? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Did the media and materials help students meet the objectives? "
                          )
                        ]),
                        _c("li", [
                          _vm._v(
                            " Did the media and materials provide meaningful student participation? "
                          )
                        ])
                      ])
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " Alternative ways of evaluating media and materials include; use of class discussions, individual interviews, and observation of student behaviour. These methods of evaluation might provide you with information that you might not be able to capture from an evaluation checklist. "
                      )
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _c("i", [_vm._v("Revision")]),
                      _c("br"),
                      _vm._v(
                        " The final step of the instructional cycle is to sit back and look at the results of your evaluation data gathering. You need to find out whether there were any discrepancies between what you intended to happen and what happened. "
                      ),
                      _c("i", [
                        _vm._v(
                          " Did students' achievement fall short on any of the objectives? How did the students react to the use of media and materials? Are you satisfied with the media you used and the way you used it? "
                        )
                      ])
                    ]),
                    _c("p", { staticClass: " text-justify meme" }, [
                      _vm._v(
                        " If your evaluation data indicates any shortcoming on any of the above questions, then go back to your plan and revise. Change what needs to be changed for future lessons. "
                      )
                    ])
                  ])
                ]),
                _c("br"),
                _c("br"),
                _c("mdb-row", { staticClass: "text-justify" }, [
                  _c(
                    "h2",
                    { staticClass: "h2-responsive", attrs: { id: "item-6" } },
                    [_vm._v("3.5 Locating Relevant Instructional Materials ")]
                  ),
                  _c("div", { staticClass: "ml-5" }, [
                    _c("p", { staticClass: "text-justify meme" }, [
                      _vm._v(
                        " Thousands of instructional materials are available for use in various learning situations if you can locate them. Gaining access to the materials is not difficult if you could have an idea where they could be found. Possible locations include: "
                      )
                    ]),
                    _c("p", { staticClass: "text-justify meme" }, [
                      _c("ul", [
                        _c(
                          "li",
                          [
                            _c("kk", [_vm._v("At school.")]),
                            _vm._v(
                              " You need to develop a culture of collecting instructional materials and building a collection of such resources in your school. So check what types of resources your school might have accumulated over time. "
                            )
                          ],
                          1
                        ),
                        _c(
                          "li",
                          [
                            _c("kk", [_vm._v("In the neighbourhood.")]),
                            _vm._v(
                              " Identify potential sources of instructional materials in the local area. These could be the University library, national libraries, foreign embassies accredited to the country, international organizations, National Curriculum Center, the Teacher Inservice Department, Government Ministries and departments, etc. Your local daily newspapers are also a potential source of instructional materials as they contain pictures, photographs, and textual materials (articles) that could be of interest in your subject. "
                            )
                          ],
                          1
                        ),
                        _c(
                          "li",
                          [
                            _c("kk", [_vm._v("The Internet.")]),
                            _vm._v(
                              " The World Wide Web is a valuable source of instructional materials. You could use search engines to search for the materials and to access the various databases. Huge amounts of already prepared materials could be located and you are no longer limited to textbooks and resources in the library as the Internet makes available information resources from around the world. "
                            )
                          ],
                          1
                        ),
                        _c(
                          "li",
                          [
                            _c("kk", [_vm._v("Professional organizations.")]),
                            _vm._v(
                              " Use the opportunity when you are holding subject meetings to find out from colleagues what types of instructional materials might be available for teaching in your subject. Also enrol and become a member of organizations locally and internationally that deal with the teaching of your subject. "
                            )
                          ],
                          1
                        ),
                        _c(
                          "li",
                          [
                            _c("kk", [_vm._v("Commercial Vendors.")]),
                            _vm._v(
                              " Most suppliers of textbooks and stationery also supply some instructional materials like charts, laboratory manuals, workbooks, software, which provide a wealth of information for classroom use. "
                            )
                          ],
                          1
                        ),
                        _c(
                          "li",
                          [
                            _c("kk", [_vm._v("Publishers.")]),
                            _vm._v(
                              " Commercial publishers and distributors publish a catalogue listing the various types of instructional materials available for the different subjects. Please consult your local publishers such as Macmillan for advice. "
                            )
                          ],
                          1
                        )
                      ])
                    ])
                  ])
                ]),
                _c("br"),
                _c("br"),
                _c("mdb-row", { staticClass: "text-justify" }, [
                  _c("div", { staticClass: "note note-success meme" }, [
                    _c("blockquote", { staticClass: "blockquote bq-success" }, [
                      _c("h1", { attrs: { id: "item-7" } }, [
                        _c("i", { staticClass: "fas fa-folder-open" }, [
                          _vm._v("Unit summary")
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify" }, [
                        _vm._v(
                          " Before we end our discussion, let us remind ourselves of some of the things we have discussed. In this unit we have noted that media to be used for instructional purposes should not be selected just because it is available or because the teacher prefers to use such media. Instructional media should be selected based on a given criteria. That criterion should include: "
                        ),
                        _c("ul", [
                          _c("li", [
                            _vm._v(
                              "The instructional goal and instructional objectives;"
                            )
                          ]),
                          _c("li", [_vm._v("The audience characteristics;")]),
                          _c("li", [_vm._v("Nature of the subject matter;")]),
                          _c("li", [
                            _vm._v("Essential media characteristics;")
                          ]),
                          _c("li", [_vm._v("Practical constraints;")]),
                          _c("li", [
                            _vm._v("Teachers attitude towards media; and")
                          ]),
                          _c("li", [_vm._v("Appropriateness of the media.")])
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " We went further and discussed the process for media selection and ended the unit by discussing some of the models that are used to inform us when selecting instructional media. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " We also discussed the concept of the systems approach. We defined the systems approach as an overall approach that involves tackling problems in a disciplined manner, yet keeping priorities in mind. The sub-systems making up the overall system are designed, fitted, checked and operated so as to achieve the overall objective efficiently. We noted that the systems approach is a problem-solving method that helps to: "
                        ),
                        _c("ul", [
                          _c("li", [
                            _vm._v("Define the problem as clearly as possible;")
                          ]),
                          _c("li", [
                            _vm._v(
                              "Analyze the problem and identify alternative solutions."
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              "Select the alternatives and develop the most viable solution mix."
                            )
                          ]),
                          _c("li", [
                            _vm._v("Implement and test the solution.")
                          ]),
                          _c("li", [
                            _vm._v(
                              "Evaluate the effectiveness and worth of the solution. "
                            )
                          ])
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " We went on to discuss the application of the systems approach to media selection and use. Here we noted that we have to be systematic as we select media and materials. We have to be guided by some instructional goal/objectives and the focus should be the learner. We concluded the unit by discussing the ASSURE model which is a procedural guide for planning instruction that incorporates the use of media. We noted that use of media has to be carried out in a systematic manner and the six procedural steps have to be followed. These steps include; "
                        ),
                        _c("ul", [
                          _c("li", [_vm._v("Analyzing the learners")]),
                          _c("li", [_vm._v("Stating objectives")]),
                          _c("li", [
                            _vm._v("Selecting methods, media and materials;")
                          ]),
                          _c("li", [
                            _vm._v("Utilizing the media and materials;")
                          ]),
                          _c("li", [
                            _vm._v("Requiring learner participation;")
                          ]),
                          _c("li", [
                            _vm._v(
                              "Evaluating and revising the media and materials. "
                            )
                          ])
                        ])
                      ])
                    ])
                  ]),
                  _c("br"),
                  _c("hr"),
                  _c("div", { staticClass: "note note-warning meme" }, [
                    _c("blockquote", { staticClass: "blockquote bq-warning" }, [
                      _c("h1", { attrs: { id: "item-8" } }, [
                        _c("i", { staticClass: "fas fa-medal" }, [
                          _vm._v(" Assignment")
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify font-italic" }, [
                        _vm._v(
                          " Select a topic from one of your teaching subjects where instructional media could be used. Then, following the ASSURE Model, systematically plan the presentation of the lesson to incorporate the use of media. Please provide all the necessary details of what will happen at each stage of the model. Present your work to your course lecturer for marking. "
                        )
                      ])
                    ])
                  ]),
                  _c("hr"),
                  _c("br"),
                  _c("div", { staticClass: "note note-secondary meme" }, [
                    _c(
                      "blockquote",
                      { staticClass: "blockquote bq-secondary" },
                      [
                        _c("h1", { attrs: { id: "item-9" } }, [
                          _c("i", { staticClass: "fas fa-" }, [
                            _vm._v(" References")
                          ])
                        ]),
                        _c(
                          "p",
                          { staticClass: "text-justify" },
                          [
                            _vm._v(" Aronson, D. (1977)."),
                            _c("kk", [
                              _c("i", [
                                _vm._v(
                                  " Formulation and trial use of guidelines for designing and developing instructional motion pictures "
                                )
                              ])
                            ]),
                            _vm._v(
                              ". Unpublished doctoral dissertation. Tallahassee, FL: Florida State University."
                            ),
                            _c("br"),
                            _c("br"),
                            _vm._v(" Briggs, L. J. (1968)."),
                            _c("kk", [
                              _vm._v(
                                " Learner variables and educational media."
                              )
                            ]),
                            _c("i", [_vm._v("Review of Educational Research")]),
                            _vm._v(", 38,160-176."),
                            _c("br"),
                            _c("br"),
                            _vm._v(" Briggs, L. J.; Wager, W. W. (1981). "),
                            _c("kk", [
                              _c("i", [
                                _vm._v(
                                  " Handbook of procedures for the design of instruction "
                                )
                              ])
                            ]),
                            _vm._v("(2"),
                            _c("sup", [_vm._v("nd")]),
                            _vm._v(
                              " ed.). Englewood Cliffs, NJ: Educational Technology Publications."
                            ),
                            _c("br"),
                            _c("br"),
                            _vm._v(" Clark, R. E.; & Salomon, G. (1986). "),
                            _c("kk", [_vm._v("Media in teaching")]),
                            _vm._v(". In M. C. Wittrock (Ed.)."),
                            _c("i", [
                              _vm._v(" Handbook of research on teaching")
                            ]),
                            _vm._v(" (3"),
                            _c("sup", [_vm._v("rd")]),
                            _vm._v(
                              " ed.). A Project of the American Educational Research Association. New York: Macmillan Publishing Company."
                            ),
                            _c("br"),
                            _c("br"),
                            _vm._v(" Davies, I.K. (1981). "),
                            _c(
                              "i",
                              [_c("kk", [_vm._v("Instructional Techniques")])],
                              1
                            ),
                            _vm._v(". McGraw Hill book Company."),
                            _c("br"),
                            _c("br"),
                            _vm._v(" Gagne, R. (1985). "),
                            _c(
                              "i",
                              [
                                _c("kk", [_vm._v("The Conditions of Learning")])
                              ],
                              1
                            ),
                            _vm._v(". (4 "),
                            _c("sup", [_vm._v("th")]),
                            _vm._v(
                              " ed.). New York: Holt, Rinehart and Winston. "
                            ),
                            _c("br"),
                            _c("br"),
                            _vm._v(
                              " Gagne, R. M.; Briggs, L. J.; & Wager, W. W. (1988). "
                            ),
                            _c("kk", [
                              _vm._v("Principles of Instructional Design")
                            ]),
                            _vm._v(" 3"),
                            _c("sup", [_vm._v("rd")]),
                            _vm._v(
                              ". ed., Orlando, Florida: Holt, Rinehart and Winston, Inc."
                            ),
                            _c("br"),
                            _c("br"),
                            _vm._v(
                              " Gagne, R.M.; Briggs, L.J.; & Wager, W.W. (1992). "
                            ),
                            _c("kk", [
                              _vm._v("Principles of Instructional Design")
                            ]),
                            _vm._v(" (4"),
                            _c("sup", [_vm._v("th")]),
                            _vm._v(
                              " ed.). Fort Worth, TX: Harcourt Brace Jevanovich College Publishers."
                            ),
                            _c("br"),
                            _c("br"),
                            _vm._v(" Gardner, H. (1993). "),
                            _c(
                              "i",
                              [
                                _c("kk", [
                                  _vm._v(
                                    "Multiple Intelligences: The Theory in Practice"
                                  )
                                ])
                              ],
                              1
                            ),
                            _vm._v(". New York: Basic Books."),
                            _c("br"),
                            _c("br"),
                            _vm._v(
                              " Heinich, R.; Molenda, M.; Rusell, J.D.; & Smaldino, S.E (1996). "
                            ),
                            _c("kk", [
                              _vm._v(
                                " Instructional Media and Technologies for Learning. "
                              )
                            ]),
                            _vm._v(" 5"),
                            _c("sup", [_vm._v("th")]),
                            _vm._v(" Edition. New Jersey: Prentice Hall, Inc."),
                            _c("br"),
                            _c("br"),
                            _vm._v(
                              " Newby, T.J.; Stepich, D.A.; Lehman, J.D.; Russell, J.D. (2000). "
                            ),
                            _c("kk", [
                              _vm._v(
                                " Instructional Technology for teaching and learning: Designing instruction, integrating computers, and using media. "
                              )
                            ]),
                            _vm._v(" 2"),
                            _c("sup", [_vm._v("nd")]),
                            _vm._v(
                              " ed. Upper Saddle River: New Jersey, Merrill."
                            ),
                            _c("br"),
                            _c("br"),
                            _vm._v(
                              " Newby, T.J.; Stepich, D.A.; Lehman, J.D.; & Russell, J.D. (2006)."
                            ),
                            _c("kk", [
                              _vm._v(
                                " Educational Technology for Teaching and Learning "
                              )
                            ]),
                            _vm._v(
                              ". Upper Saddle River, New Jersey: Pearson Education, Inc.,"
                            ),
                            _c("br"),
                            _c("br"),
                            _vm._v(" Romiszowski, A.J. (1988). "),
                            _c(
                              "i",
                              [
                                _c("kk", [
                                  _vm._v(
                                    " The Selection and Use of Instructional Media. For improved classroom teaching and for interactive, individualized instruction "
                                  )
                                ])
                              ],
                              1
                            ),
                            _vm._v(". 2"),
                            _c("sup", [_vm._v("nd")]),
                            _vm._v(" Edition. New York: Nichols Publishing. "),
                            _c("br"),
                            _c("br"),
                            _vm._v(" Rowntree, D. (1974). "),
                            _c(
                              "i",
                              [
                                _c("kk", [
                                  _vm._v(
                                    "Educational Technology in Curriculum Development"
                                  )
                                ])
                              ],
                              1
                            ),
                            _vm._v(". London: Harper and Row"),
                            _c("br"),
                            _c("br"),
                            _vm._v(
                              " Snow, R., Corno, L., & Jackson, D. III (1996). "
                            ),
                            _c("kk", [
                              _vm._v(
                                "Individual Differences in affective and cognitive functions."
                              )
                            ]),
                            _vm._v(" In D. Berliner & R. Callee (Eds.), "),
                            _c("i", [
                              _vm._v("Handbook of Educational Psychology")
                            ]),
                            _vm._v(
                              " (pp.243-310). New York: Simon & Schuster Macmillan."
                            ),
                            _c("br"),
                            _c("br"),
                            _vm._v(
                              " St. Cloud State University. Developing Support Materials [Web Page] (1997). Available at: "
                            ),
                            _c(
                              "a",
                              {
                                attrs: {
                                  href:
                                    "http://lrs.stcloudstate.edu/cim/courses/pine/develop.html"
                                }
                              },
                              [
                                _vm._v(
                                  " http://lrs.stcloudstate.edu/cim/courses/pine/develop.html "
                                )
                              ]
                            ),
                            _vm._v(" Accessed in March, 2003. ")
                          ],
                          1
                        )
                      ]
                    )
                  ])
                ])
              ],
              1
            )
          ],
          1
        )
      ])
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "col-sm-4 col-lg-3", attrs: { "data-spy": "scroll" } },
      [
        _c(
          "nav",
          {
            staticClass: "navbar navbar-light sticky-top flex-column mt-4",
            attrs: { id: "navbar-example3" }
          },
          [
            _c("a", { staticClass: "navbar-brand", attrs: { href: "#" } }, [
              _vm._v("Unit 3")
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c("a", { staticClass: "nav-link", attrs: { href: "#item-1" } }, [
                _vm._v("3.0 Introduction ")
              ]),
              _c("nav", { staticClass: "nav nav-pills flex-column" }, [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-3 my-1",
                    attrs: { href: "#item-1-1" }
                  },
                  [_vm._v("Outcomes")]
                ),
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-3 my-1",
                    attrs: { href: "#item-1-2" }
                  },
                  [_vm._v("Terminology")]
                )
              ]),
              _c("a", { staticClass: "nav-link", attrs: { href: "#item-2" } }, [
                _vm._v("3.1 Criteria for Selecting Media during instruction ")
              ]),
              _c("nav", { staticClass: "nav nav-pills flex-column" }, [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-3 my-1",
                    attrs: { href: "#item-2-1" }
                  },
                  [_vm._v("Activity 3.1")]
                ),
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-3 my-1",
                    attrs: { href: "#item-2-2" }
                  },
                  [_vm._v("3.1.1 Criteria for media selection")]
                ),
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-3 my-1",
                    attrs: { href: "#item-2-3" }
                  },
                  [_vm._v("3.1.2 Essential media characteristics")]
                )
              ]),
              _c("a", { staticClass: "nav-link", attrs: { href: "#item-3" } }, [
                _vm._v(
                  "3.2 Application of the Systems Approach to Media Selection and Use"
                )
              ]),
              _c("nav", { staticClass: "nav nav-pills flex-column" }, [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-3 my-1",
                    attrs: { href: "#item-3-1" }
                  },
                  [
                    _vm._v(
                      " 3.2.1 Application of the systems approach to teaching and learning "
                    )
                  ]
                )
              ]),
              _c("a", { staticClass: "nav-link", attrs: { href: "#item-4" } }, [
                _vm._v("3.3 The Media Selection Process")
              ]),
              _c("a", { staticClass: "nav-link", attrs: { href: "#item-5" } }, [
                _vm._v("3.4 Media Selection Models")
              ]),
              _c("nav", { staticClass: "nav nav-pills flex-column" }, [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-3 my-1",
                    attrs: { href: "#item-5-1" }
                  },
                  [_vm._v("3.4.1 The basic model")]
                ),
                _c("nav", { staticClass: "nav nav-pills flex-column" }, [
                  _c(
                    "a",
                    {
                      staticClass: "nav-link ml-5 my-1",
                      attrs: { href: "#item-5-1-1" }
                    },
                    [_vm._v("3.4.1.1 Selection of media")]
                  ),
                  _c(
                    "a",
                    {
                      staticClass: "nav-link ml-5 my-1",
                      attrs: { href: "#item-5-0" }
                    },
                    [_vm._v("Activity 3.2")]
                  )
                ]),
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-3 my-1",
                    attrs: { href: "#item-5-2" }
                  },
                  [
                    _vm._v(
                      " 3.4.2 Steps to follow in systematic planning for the use of media (ASSURE Model) "
                    )
                  ]
                ),
                _c("nav", { staticClass: "nav nav-pills flex-column" }, [
                  _c(
                    "a",
                    {
                      staticClass: "nav-link ml-5 my-1",
                      attrs: { href: "#item-5-2-1" }
                    },
                    [_vm._v("3.4.2.1 Analyse the learners")]
                  ),
                  _c(
                    "a",
                    {
                      staticClass: "nav-link ml-5 my-1",
                      attrs: { href: "#item-5-2-2" }
                    },
                    [_vm._v("3.4.2.2 State objectives")]
                  ),
                  _c(
                    "a",
                    {
                      staticClass: "nav-link ml-5 my-1",
                      attrs: { href: "#item-5-2-3" }
                    },
                    [_vm._v("3.4.2.3 Select methods, media, and materials")]
                  ),
                  _c(
                    "a",
                    {
                      staticClass: "nav-link ml-5 my-1",
                      attrs: { href: "#item-5-2-4" }
                    },
                    [_vm._v("3.4.2.4 Utilize media and materials")]
                  ),
                  _c(
                    "a",
                    {
                      staticClass: "nav-link ml-5 my-1",
                      attrs: { href: "#item-5-2-5" }
                    },
                    [_vm._v("3.4.2.5 Require learner participation")]
                  ),
                  _c(
                    "a",
                    {
                      staticClass: "nav-link ml-5 my-1",
                      attrs: { href: "#item-5-2-6" }
                    },
                    [_vm._v("3.4.2.6 Evaluate and revise")]
                  )
                ])
              ]),
              _c("a", { staticClass: "nav-link", attrs: { href: "#item-6" } }, [
                _vm._v("3.5 Locating Relevant Instructional Materials")
              ]),
              _c("a", { staticClass: "nav-link", attrs: { href: "#item-7" } }, [
                _vm._v("Unit summary")
              ]),
              _c("a", { staticClass: "nav-link", attrs: { href: "#item-8" } }, [
                _vm._v("Assignment")
              ]),
              _c("a", { staticClass: "nav-link", attrs: { href: "#item-9" } }, [
                _vm._v("References")
              ])
            ])
          ]
        )
      ]
    )
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}