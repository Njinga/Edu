{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit1.vue?vue&type=template&id=34b8bee3&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit1.vue","mtime":1593895035799},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "about" }, [
    _c("div", { staticClass: "border border-light p-3 mb-5 rounded " }, [
      _c("div", { staticClass: "row" }, [
        _vm._m(0),
        _c("div", { staticClass: "col-sm-8 col-lg-9" }, [
          _c(
            "div",
            {
              staticClass:
                "scrollspy-example z-depth-1 mt-4 shadow-lg p-3 mb-5 rounded",
              attrs: {
                "data-spy": "scroll",
                "data-target": "#navbar-example3",
                "data-offset": "0"
              }
            },
            [
              _c(
                "mdb-container",
                { attrs: { fluid: "" } },
                [
                  _c("mdb-row", { staticClass: "text-left" }, [
                    _c("div", [
                      _c("h1", { staticClass: "h1-responsive" }, [
                        _vm._v("Unit 1")
                      ]),
                      _c("h1", { staticClass: "h1-responsive" }, [
                        _vm._v(
                          "Introduction to Educational Technology and Skills"
                        )
                      ]),
                      _c("br"),
                      _c(
                        "h2",
                        {
                          staticClass: "h2-responsive",
                          attrs: { id: "item-1" }
                        },
                        [_vm._v(" 1.1 Introduction")]
                      ),
                      _c("div", { staticClass: "ml-5" }, [
                        _c("p", { staticClass: "text-justify meme ml-5" }, [
                          _vm._v(
                            " This unit introduces you to the concept of Educational Technology as well as to the other key concepts that are applicable to the field of Educational Technology. Some of the questions that you need to ask yourself include the following: "
                          ),
                          _c("i", [
                            _vm._v(
                              " What is Educational Technology? What other concepts relate to educational Technology? Is Educational Technology relevant to teaching and learning? "
                            )
                          ]),
                          _vm._v(
                            " The unit also introduces you to Information and Communication Technology (ICT) which is closely related to educational/instructional technologies as they too (ICTs) are used as equipment and tools when teaching learners in a classroom. "
                          )
                        ]),
                        _c("div", { staticClass: "note note-info ml-5" }, [
                          _c(
                            "blockquote",
                            { staticClass: "blockquote bq-info" },
                            [
                              _c("h4", { attrs: { id: "item-1-1" } }, [
                                _c("i", { staticClass: "fas fa-paper-plane" }, [
                                  _vm._v(" Unit Outcomes")
                                ])
                              ]),
                              _c("p", { staticClass: "text-justify" }, [
                                _vm._v(
                                  " Upon completion of this unit you will be able to: "
                                ),
                                _c("ul", [
                                  _c("li", [
                                    _vm._v(
                                      "explain the key concepts and terms applicable to Educational Technology."
                                    )
                                  ]),
                                  _c("li", [
                                    _vm._v(
                                      "distinguish between Educational Technology and Information and Communication Technology "
                                    )
                                  ]),
                                  _c("li", [
                                    _vm._v(
                                      "relate Educational Technology to classroom communication and learning."
                                    )
                                  ]),
                                  _c("li", [
                                    _vm._v(
                                      "discuss the changing role of the teacher in using educational media in the classroom."
                                    )
                                  ])
                                ])
                              ])
                            ]
                          )
                        ]),
                        _c("br"),
                        _c("div", { staticClass: "note note-success ml-5" }, [
                          _c(
                            "blockquote",
                            { staticClass: "blockquote bq-success" },
                            [
                              _c("h4", { attrs: { id: "item-1-2" } }, [
                                _c(
                                  "i",
                                  { staticClass: "fas fa-check-square" },
                                  [_vm._v(" Terminolgy")]
                                )
                              ]),
                              _c(
                                "p",
                                { staticClass: "text-justify" },
                                [
                                  _c("kk", [
                                    _vm._v(
                                      " Educational Technology Information:"
                                    )
                                  ]),
                                  _vm._v(
                                    " All components of informational technology that are used to deliver educational materials."
                                  ),
                                  _c("br"),
                                  _c("br"),
                                  _c("kk", [
                                    _vm._v(
                                      " Information Communication Technology:"
                                    )
                                  ]),
                                  _vm._v(
                                    " The combination of hardware, software and the means of production that enable the exchange, processing and management of information and knowledge."
                                  ),
                                  _c("br"),
                                  _c("br"),
                                  _c("kk", [
                                    _vm._v(" Instructional Technology:")
                                  ]),
                                  _vm._v(
                                    " Theory and practice of design, development, utilization, management, and evaluation of processes and resources for learning."
                                  ),
                                  _c("br"),
                                  _c("br"),
                                  _c("kk", [
                                    _vm._v(" Information Technology:")
                                  ]),
                                  _vm._v(
                                    " The hardware or equipment which make the software designed to run specific programmes work. "
                                  ),
                                  _c("br"),
                                  _c("br"),
                                  _c("kk", [_vm._v(" Digital Libraries:")]),
                                  _vm._v(
                                    " A digital library is like any ordinary library except that the materials available are electronic or take a digital format e.g. E-Books."
                                  ),
                                  _c("br"),
                                  _c("br"),
                                  _c("kk", [_vm._v(" E-learning:")]),
                                  _c("fight", [
                                    _vm._v(" Please consider adding definition")
                                  ]),
                                  _c("br"),
                                  _c("br"),
                                  _c("kk", [_vm._v(" Digital device:")]),
                                  _c("fight", [
                                    _vm._v(" Please consider adding definition")
                                  ]),
                                  _c("br"),
                                  _c("br"),
                                  _c("kk", [_vm._v("Social Media:")]),
                                  _vm._v(
                                    " An Internet-based form of communication. Social media platforms allow users to have conversations, share information and create web content."
                                  ),
                                  _c("br"),
                                  _c("br"),
                                  _c("kk", [_vm._v(" Communication:")]),
                                  _vm._v(
                                    " The process through which ideas, information, or skills are passed from a source to a receiver as intended. "
                                  ),
                                  _c("br"),
                                  _c("br"),
                                  _c("kk", [_vm._v(" Media:")]),
                                  _vm._v(
                                    " The different types of materials and/or artifacts used by the teacher in supporting the teaching and learning process. "
                                  ),
                                  _c("br"),
                                  _c("br")
                                ],
                                1
                              )
                            ]
                          )
                        ])
                      ])
                    ])
                  ]),
                  _c("br"),
                  _c("br"),
                  _c("mdb-row", { staticClass: "bg-primary text-left " }, [
                    _c(
                      "h2",
                      { staticClass: "h2-responsive", attrs: { id: "item-2" } },
                      [
                        _vm._v(
                          "1.2 Key Concepts Applicable to Educational Technology and ICTs"
                        )
                      ]
                    ),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive",
                        attrs: { id: "item-2-1" }
                      },
                      [_vm._v(" 1.2.1 What is Educational technology?")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The concept 'Educational Technology' is very wide and as a result difficult to define. The term itself has been evolving over a very long time. For example, when a classroom teacher browses the Internet for new teaching materials, that teacher is using some of the latest educational technology. What you must realize is that educational technology is not new at all, and it is by no means limited to the use of equipment let alone electronic equipment. Modern tools and techniques are simply the latest developments in a field that some people believe is as old as education itself (Roblyer, 2004). The definition of the term educational technology varies depending on whether the term is used by educators or by technologists. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Technology is both a tool and a process. As a process, technology refers to construction uses and organization of knowledge for the achievement of practical purposes in intellectual and social contexts while technology as a tool refers to material construction and operation of physical systems based on knowledge of design. Technology is commonly thought of in terms of instruments, machines, and devices. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The term 'education' on the other hand refers to facilitation of learning by arranging environments and information and it can result from either instruction or experience. Many educators use the term educational technology very broadly. Educational technology for those educators includes any media that can be used during instruction. In such cases, educational technology is simply defined as an array of instructional or communication tools that might prove helpful in advancing student learning (Wikipedia, the free encyclopedia). "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Please note that by media (also referred to as instructional media) we mean all the materials and physical means that an instructor might use to implement instruction and facilitate students' achievement of instructional objectives. This could include traditional materials such as chalkboards, handouts, charts, overhead projectors, real objects, as well as the newer materials and methods such as DVDs, CD-ROMs, the Internet and interactive media. Below is an example of a media technology that a teacher can use to project different instructional materials. "
                        )
                      ]),
                      _c("p", { staticClass: "text-center meme" }, [
                        _c("img", {
                          staticClass: "img-fluid",
                          attrs: {
                            src: require("../assets/projector.png"),
                            alt: "Responsive image"
                          }
                        }),
                        _c("br"),
                        _c("i", [
                          _c("strong", [_vm._v(" Computer/Video Projector")])
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Educational Technology relies on a broad definition of the word 'technology'. The word technology can refer to material objects of use to humanity such as machines, hardware or utensils, but it can also include broader themes such as systems, methods of organization, and techniques. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The term educational technology therefore has several definitions that might include any of the following components: "
                        ),
                        _c("ul", [
                          _c("li", [
                            _vm._v(
                              "all components of informational technology that are used to deliver educational materials;"
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              " complex and integrated processes involving people, procedures, ideas, devices and organization for analyzing problems, implementing, evaluating and managing solutions in all aspects of human learning; and "
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              "use of technology to improve teaching and learning. "
                            )
                          ])
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The Association for Educational Communication and Technology (AECT), defines educational technology as 'The theory and practice of design, development, utilization, management, and evaluation of processes and resources for learning' (Lever-Duffy, J.; McDonald, J.B.; Mizell, A.P. (2005). "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The above definition takes the broadest view possible and allows us to explore the full range of media that a teacher might use to enhance his/her instruction and assist students to learn. Based on the above broad definition, we can simply define educational technology as "
                        ),
                        _c("i", [
                          _vm._v(
                            " any technology used by educators in support of the teaching and learning process. "
                          )
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " You will note that educational technology can include any resource and any process that facilitates learning. For example, a teacher might use educational technology to enhance the quality and clarity of communication or might employ a particular process or a specific learning style or intelligence. "
                        )
                      ]),
                      _c(
                        "p",
                        {
                          staticClass:
                            "text-center font-italic font-weight-bold meme"
                        },
                        [_vm._v("Instructional Technology ")]
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The term educational technology is often associated with instructional technology. According to Heinich, Molenda, Rusell, & Smaldino (1996:411), Instructional Technology refers to "
                        ),
                        _c("i", [
                          _vm._v(
                            ' a complex integrated process involving people, procedures, ideas, devices, and organization, for analyzing problems and devising, implementing, evaluating, and managing solutions to those problems in situations in which learning is purposive and controlled". '
                          )
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Before you continue reading this module, stop for a while and carry out this task. "
                        )
                      ]),
                      _c("div", { staticClass: "note note-primary" }, [
                        _c(
                          "blockquote",
                          { staticClass: "blockquote bq-primary" },
                          [
                            _c("h4", { attrs: { id: "item-2-1-1" } }, [
                              _c("i", { staticClass: "fas fa-tools" }, [
                                _vm._v(" Activity 1.1")
                              ])
                            ]),
                            _c("br"),
                            _vm._v(
                              " Based on the definitions that you have been given above, construct your own definition of the term 'educational technology'. "
                            )
                          ]
                        )
                      ]),
                      _c("br"),
                      _c("p", { staticClass: "meme" }, [
                        _vm._v(
                          " I suppose in your definition of educational technology you have included the following key elements: "
                        ),
                        _c("ul", [
                          _c("li", [
                            _vm._v(
                              "the concept of educational technology focuses on both procedures and devices;"
                            )
                          ]),
                          _c("li", [
                            _vm._v(
                              "it is an integrated process which involves people, procedures, devices and organization;"
                            )
                          ]),
                          _c("li", [_vm._v("it is a complex process. ")])
                        ])
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive",
                        attrs: { id: "item-2-2" }
                      },
                      [_vm._v("1.2.2 Why Study Educational Technology?")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " If we go by the simple definition of educational technology as "
                        ),
                        _c("i", [
                          _vm._v(
                            ' "any technology used by educators in support of the teaching and learning process", '
                          )
                        ]),
                        _vm._v(
                          " as a teacher you have to be prepared for the use of technology to keep up with the rapid changes in the world. Not only that but also, the learners are different, learning occurs differently, so teaching must vary too. As a 21st Century teacher , you must be prepared to provide technology-supported learning opportunities for your students. You should be able to use educational technology effectively in your classroom to facilitate learning. You cannot do this unless you know what technology is available for teaching and learning, and how it fits into your own instructional situation. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " As you might be aware by now, for learning to take place, instruction may be necessary "
                        ),
                        _c("i", [
                          _vm._v(
                            " Instruction in this case refers to the arrangement of information and environment to facilitate learning. "
                          )
                        ]),
                        _vm._v(
                          " By environment, we do not just mean where instruction takes place but also the methods, media and equipment that are used or needed to facilitate and guide the learner's study. Information and environment will change depending on the instructional goal. Therefore, as the expected learning outcomes change, you may need to change the way that you arrange the instructional environment. You need to adapt your instruction to changing times and environments, which necessitates that you have a thorough working knowledge of the many kinds of educational technologies available that might assist you in teaching and enhance learning simultaneously. Educational technologies are the tools that a teacher might need to use in order to create an effective instructional experience. "
                        )
                      ])
                    ])
                  ]),
                  _c("br"),
                  _c("br"),
                  _c("mdb-row", { staticClass: "bg-primary text-left" }, [
                    _c(
                      "h2",
                      { staticClass: "h2-responsive", attrs: { id: "item-3" } },
                      [_vm._v("1.3 Meaning and Scope of ICTs")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " ICTs can be described as a combination of hardware, software and the means of production that enable the exchange, processing and management of information and knowledge. They offer new ways of communicating and exchanging information and knowledge. Through communication via ICTs, the world has since become a global village where for instance, people from one country can learn about happenings in many other countries or even across continents as soon as the news break. People can communicate with each other globally instantly and access information or relevant data when needed at the mere touch of a button. ICTs and traditional mass media such as television, newspapers and radio, are therefore some of the components of the information-transfer system in international communication. Do you see the resemblance to educational technologies? "
                        )
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive",
                        attrs: { id: "item-3-1" }
                      },
                      [_vm._v("1.3.1 Types of ICTs")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " ICTs include other communication devices that facilitate communication between individuals, groups as well as mass communication. These may include among others posters, charts, overhead projectors, fax machines, telephones, newspapers and bulletin boards to mention some. Television, newspapers and radio are considered components of information transfer because of the role they play in disseminating information to people in a 'mass' format. The degree of their usage however varies based on the location and/or situation one is in. In most African countries for example, the above communication devices, including radio and television are the most common means of sharing ideas and disseminating information. The above are also widely used in schools. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " While the term 'ICTs' can be interpreted as including a wide range of media, 'new ICTs' is used to denote the use of computers and communication systems between computers. These new ICTs are becoming more accessible, and users can obtain information from various sources, and one computer could meet the needs of a large community or school. This enables users to access programmes on the World Wide Web at a convenient time, and send feedback through e-mail or chat. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Below is a graphic showing how a classroom in the 21"
                        ),
                        _c("sup", [_vm._v("st")]),
                        _vm._v(
                          " century can look like when ICTs and media technologies are in place. The graphic shows how a classroom can be wired or connected for different activities. "
                        )
                      ]),
                      _c("p", { staticClass: "text-center meme" }, [
                        _c("img", {
                          staticClass: "img-fluid",
                          attrs: {
                            src: require("../assets/junk.png"),
                            alt: "Responsive image"
                          }
                        }),
                        _c("br"),
                        _c("i", [
                          _c("strong", [
                            _vm._v(" 21"),
                            _c("sup", [_vm._v("st")]),
                            _vm._v(" Classroom ")
                          ])
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Chat can be either through text, audio, or video or a combination of all. When people chat, they go through discussion or 'chat' in real time. Teachers can create chats using social media such as Whats App and Facebook for students to chat, or if available, Learning Management Systems can also be used to organise chats. "
                        )
                      ])
                    ]),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive",
                        attrs: { id: "item-3-2" }
                      },
                      [_vm._v("1.3.2 ICTs as media of communication")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: " text-justify meme" }, [
                        _vm._v(
                          " ICTs are a media of communication. We have seen how information is disseminated through a number of media. One such method is "
                        ),
                        _c("strong", [_vm._v("broadcasting")]),
                        _vm._v(
                          ". Traditionally, radio has been the main form of mass communication technology that is able to reach many people at once. Radio broadcast can reach communities at the very end of the development road - people who live in remote areas with no phones or electricity. Radio reaches people who can't read or write, and even in very poor communities, radio penetration is vast. Schools can organise radio listening groups whereby school related programmes can form part of the curriculum "
                        )
                      ]),
                      _c("p", { staticClass: " text-justify meme" }, [
                        _vm._v(
                          " Other communication devices include television, the Internet and mobile phones. These technologies have made it easier for information to reach the general public, teachers, students, and community members alike. Let us now look at Information Technology (IT) and its relationship to ICTs. "
                        )
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive",
                        attrs: { id: "item-3-3" }
                      },
                      [_vm._v("1.3.3 Information Technology (IT) equipment")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: " text-justify meme" }, [
                        _vm._v(
                          " Information technology is another element of ICTs. For our purposes in this course, we look at equipment or hardware. These are the hardware or equipment which make the software designed to run specific programmes work. They enable information (sound, text, graphics, video, etc.) to pass through and reach the recipient at the receiving end As well. These include computers, television sets, telephones, radio, fax machines, and many others. As you can see from the above description, the same types of technologies keep coming back. Another important related issue to ICTs is Telecommunication. This is discussed briefly in the next topic. "
                        )
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive",
                        attrs: { id: "item-3-4" }
                      },
                      [_vm._v("1.3.4 Telecommunications")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: " text-justify meme" }, [
                        _vm._v(
                          " Telecommunications are an integral part of ICTs. Through telecommunications, equipment, hardware, and gadgets are able to send, store, retrieve and disseminate information to the end user. In this case therefore, telecommunications may promote or hinder the functioning of IT equipment and hardware. For example, telephones and mobile-phones play a major role in connecting people and machines. If they are not functioning properly, communication will be severely hampered. Are you familiar with telephone companies that provide Internet services in Swaziland? This service is enabled by a sound telecommunications infrastructure. Schools can also be connected to the Internet via this system. ICTs through telecommunications play a major role in providing communities with ways of accessing information and knowledge through the following: "
                        ),
                        _c("ul", [
                          _c("li", [
                            _c("strong", [
                              _c("i", [_vm._v("School Libraries")])
                            ])
                          ]),
                          _vm._v(
                            " School libraries are resource centres where pupils can access information such as books, pamphlets, magazines, etc. Furthermore, a well-equipped school library can offer other services such as photocopying, computer facilities, Internet connection as well as the use and production of audio-visual materials. As a teacher therefore you should constantly use libraries as well as encourage your learners to do the same. "
                          ),
                          _c("li", [
                            _c("strong", [
                              _c("i", [_vm._v("Digital Libraries")])
                            ])
                          ]),
                          _vm._v(
                            " Due to advancement in technology, digital libraries are now very common in many parts of the world. While there may not be one in your area, you can access it through the Internet. Digital libraries operate like any ordinary library except that the materials available are electronic or take a digital format. Perhaps you have heard of e-books (electronic books). These are books (just like an ordinary book) except that they are not hard copies like the ones printed on paper and they cannot be touched. They are digital or electronic. "
                          )
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Digital and/or electronic materials are easily accessed and easy to go through (navigate) unlike ordinary books. For example, you can search for key words and the system can instantly take you to those word/s. Moving from section to section and chapter to chapter, etc. is easy and fast as well,. One is also able to print materials easily. This is possible through what is known as "
                        ),
                        _c("i", [_vm._v("Hypermedia")]),
                        _vm._v(" or "),
                        _c("i", [_vm._v("Hypertext")]),
                        _vm._v(
                          ". These terms will be discussed much further in Unit 2 of this module. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Other resources which can be found in the digital library include magazines, journals, music files, video/DVD files and many more. All these can be accessed (downloaded) where there is free access, or where there is restriction and you have to pay for time or subscribe (sometimes free subscription are available but sometimes one has to pay). Teachers can be able to download Open Education Resources (OER's) from different locations on the net. While ICTs have many good things to offer, they also have limitations. Let us now look at some of the limitations below. "
                        )
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive",
                        attrs: { id: "item-3-5" }
                      },
                      [_vm._v("1.3.5 Limitations of ICTs")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: " text-justify meme" }, [
                        _vm._v(
                          " In developing countries there are various social problems which create barriers to people (schools included) owning and using telecommunications and ICTs. These problems, amongst others, include finances, illiteracy, cultural barriers, lack of telecommunications infrastructure, lack of computer skills and technological know-how. Others include lack of access to computers and computer networks as a result of the digital divide. This amounts to no Internet access and lack of significant usage opportunities. "
                        )
                      ]),
                      _c("p", { staticClass: " text-justify meme" }, [
                        _vm._v(
                          " With the lack of computer skills for many teachers, a number of interventions need to be put in place such as re-training/in-service training, etc. For starters, this problem can be remedied once telecommunication infrastructures have been established in their areas of residence. In addition, teachers need to have access to computers and the internet and be capacitated to have the necessary computer skills. "
                        )
                      ]),
                      _c("p", { staticClass: " text-justify meme" }, [
                        _vm._v(
                          " Other constraints to ICTs in rural areas for example, include the relying on physical infrastructures which may not work properly. These include electricity and poor telecommunications. Even when such infrastructures are in place, difficulties arise when they are poorly maintained or too costly to use. Teachers therefore are urged to use what is available cautiously, or improvise where possible so that learners can benefit from the cast technologies which are in place. In the next section, we will look at social media which is linked to ICTs "
                        )
                      ])
                    ]),
                    _c("div", { staticClass: "note note-primary" }, [
                      _c(
                        "blockquote",
                        { staticClass: "blockquote bq-primary" },
                        [
                          _c("h4", { attrs: { id: "item-3-5-1" } }, [
                            _c("i", { staticClass: "fas fa-tools" }, [
                              _vm._v(" Activity 1.2")
                            ])
                          ]),
                          _vm._v(
                            " Discuss how you can use ICT's in the classroom. "
                          )
                        ]
                      )
                    ])
                  ]),
                  _c("br"),
                  _c("br"),
                  _c("mdb-row", { staticClass: "bg-primary text-left" }, [
                    _c(
                      "h2",
                      { staticClass: "h1-responsive", attrs: { id: "item-4" } },
                      [_vm._v("1.4 Introduction to Social Media")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Social media is an Internet-based form of communication. Social media is commonly associated with Web 2.0, technology that focuses on integration, collaboration, and interaction. Social media platforms allow users to have conversations, share information and create web content. There are many forms of social media, which include blogs, micro-blogs, wikis, social networking sites, photo-sharing sites, instant messaging, video-sharing sites, podcasts, widgets, virtual worlds, and more. Perhaps you are familiar with a number of the above media. Many teachers and students use Facebook, Twitter, WhatsApp and other platforms for social and teaching/learning purposes. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Billions of people around the world use social media to share information, conduct business and make connections. On a personal level, social media allows you to communicate with friends and family, learn new things, develop your interests, and be entertained. On a professional level, you can use social media to broaden your knowledge in a particular field and build your professional network by connecting with other professionals in your industry. At the company level, social media allows you to have a conversation with your audience, gain customer feedback, and elevate your products or services. "
                        )
                      ]),
                      _c("p", { staticClass: "text-center meme" }, [
                        _c("img", {
                          staticClass: "img-fluid",
                          attrs: {
                            src: require("../assets/lol.png"),
                            alt: "Responsive image"
                          }
                        }),
                        _c("br"),
                        _c("i", [
                          _c("strong", [
                            _vm._v(
                              " What happens in Social Media interactions."
                            )
                          ])
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Social media has many unique characteristics including: "
                        ),
                        _c(
                          "ul",
                          { attrs: { sstyle: "list-style-type:none" } },
                          [
                            _c("li", [
                              _c("i", [_vm._v(" Immediacy")]),
                              _vm._v(
                                " - Because of this, users are able to control the conversation by being the first to disseminate information and by having the ability to immediately respond or give feedback. "
                              )
                            ]),
                            _c("li", [
                              _c("i", [_vm._v(" Interaction")]),
                              _vm._v(
                                " - Social media helps facilitate interaction and engagement between people; it can be used by teachers and students. It also helpsto improve communication and relationships. "
                              )
                            ]),
                            _c("li", [
                              _c("i", [_vm._v("Audience")]),
                              _vm._v(
                                " - Many social media sites operate free of charge and are accessible to a large and diverse audience through mobile devices and computers. "
                              )
                            ])
                          ]
                        )
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive",
                        attrs: { id: "item-4-1" }
                      },
                      [_vm._v(" 1.4.1 Examples of Social Media")]
                    ),
                    _c("div", { staticClass: "text-justify meme ml-5" }, [
                      _c("p", { staticClass: "text-center font-italic" }, [
                        _vm._v(" facebook")
                      ]),
                      _vm._v(
                        " Facebook is a website that allows people from around the world to network with friends, companies, and organizations. Users can post updates, ask questions, play games, and share videos, photos, and links."
                      ),
                      _c("br"),
                      _c("br"),
                      _c("p", { staticClass: "text-center font-italic" }, [
                        _vm._v(" twitter")
                      ]),
                      _vm._v(
                        " Twitter is a micro-blogging site that allows users to post updates in 140 characters or less. Users can share links, videos and photos, while tagging their posts with searchable keywords."
                      ),
                      _c("br"),
                      _c("br"),
                      _c("p", { staticClass: "text-center font-italic" }, [
                        _vm._v(" LinkedIn")
                      ]),
                      _vm._v(
                        " LinkedIn is a business-related social networking site used mainly for professional networking. Users can build a profile, connect with other professionals, join groups, and more. Teachers also use this service at a professional level."
                      ),
                      _c("br"),
                      _c("br"),
                      _c("p", { staticClass: "text-center font-italic" }, [
                        _vm._v(" Tumblr")
                      ]),
                      _vm._v(
                        " Tumblr is a micro-blogging platform and social networking website that allows users to post multimedia and other content to a short-form blog."
                      ),
                      _c("br"),
                      _c("br"),
                      _c("p", { staticClass: "text-center font-italic" }, [
                        _vm._v(" YouTube")
                      ]),
                      _vm._v(
                        " YouTube is the world's largest video sharing site. Users can view videos, upload videos to their personal channel, subscribe to other channels, comment on videos, and more. As a teachers you can select and use appropriate videos from this site."
                      ),
                      _c("br"),
                      _c("br"),
                      _c("p", { staticClass: "text-center font-italic" }, [
                        _vm._v(" Instagram")
                      ]),
                      _vm._v(
                        " Instagram is a social networking site that allows users to share pictures and short videos using their mobile devices."
                      ),
                      _c("br"),
                      _c("br"),
                      _c("p", [
                        _vm._v(
                          " More on this topic will be presented in Unit 2 of this module. Let us now continue with describing educational technology, classroom communication and learning. "
                        )
                      ])
                    ])
                  ]),
                  _c("br"),
                  _c("br"),
                  _c("mdb-row", { staticClass: "bg-primary text-justify" }, [
                    _c(
                      "h2",
                      { staticClass: "h2-responsive", attrs: { id: "item-5" } },
                      [
                        _vm._v(
                          "1.5 Educational Technology, Classroom Communication and Learning"
                        )
                      ]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " To understand how technology fits into instruction, we need first to have a clear picture of the nature of teaching, learning, and the instructional events that teachers construct for transferring information and skills to their students. As a teacher, you need a clear understanding of key teaching and learning theories. Since this module cannot provide you with that information, it is suggested that you refer to the relevant sections in your module on "
                        ),
                        _c("strong", [
                          _vm._v(" Teaching Principles and Practice. ")
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          ' One of the things that you might have noted from your reading is the definition of terms like "teaching" and "learning". Nacino-Brown et al (1982:2) have defined teaching as '
                        ),
                        _c("i", [
                          _vm._v(
                            ' "an attempt to help someone acquire, or change some skills, attitude, or knowledge". '
                          )
                        ]),
                        _vm._v(
                          "In other words, the teacher influences desirable change in the behaviour of the learner. The goal of teaching is to bring about desired learning in the student. The aim of teaching is to help individuals learn. Teaching can also be defined as a systematic, planned sequence of events that facilitates the communication of ideas, concepts or skills to a learner (Lever-Duffy, J.; McDonald, J.B.; Mizell, A.P. (2005). The act of teaching requires an understanding of learning and of the individual as well as understanding of environmental factors that affect the learner. This calls for imagination on the part of the teacher by selecting relevant content, using the most effective methods and materials and organizing the learning the environment in a way that learners interact with the content and helps to bring about the desired behaviour. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Learning on the other hand is something that takes place in an individual's mind. It can never be seen or observed directly. Learning is said to have occurred whenever an individual's behaviour is modified or when a person thinks and acts differently, or when he/she has acquired new knowledge or a new skill (Kemp & Dayton, 1985:13). According to Heinich et al (1996), "
                        ),
                        _c("i", [
                          _vm._v(
                            " learning is the development of new knowledge, skills, or attitudes as an individual interacts with information and the environment. "
                          )
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The instructional/learning process involves the selection, arrangement, and delivery of information in an appropriate environment and the way the learner interacts with that information. Usually the arrangement of information and the environment is normally the responsibility of the instructor and the designers of instructional media. As a teacher, you need to select, arrange, and deliver the information in an appropriate environment so that learners can interact with it and convert it into knowledge. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " For instruction to take place, instructional media are used since they form part of the instructional environment. If you can recall, we gave a simple definition of education technology as "
                        ),
                        _c("i", [
                          _vm._v(
                            " any technology used by educators in support of the teaching and learning process. "
                          )
                        ])
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The best way for students to learn is for them to experience the environment firsthand. However, it is not always possible to provide learners with firsthand experience as the environment becomes more complex and some compromise in form of substitute experience must be developed. The teacher will need to select and use appropriate media that could provide substitute experience. Therefore, instructional media form part of the classroom communication process and play a vital role in the learning process. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " Earlier on, we defined instruction as the arrangement of information and environment to facilitate learning. That transmission or transfer of information from a source to a destination is called "
                        ),
                        _c("strong", [_vm._v("communication")]),
                        _vm._v(
                          ". Since new learning usually depends on taking in new information, effective instruction cannot take place unless communication takes place. Therefore, we need to understand the communication process so that we can use educational technology effectively during instruction. "
                        )
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive",
                        attrs: { id: "item-5-1" }
                      },
                      [_vm._v("1.5.1 Communication and learning")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The word 'communication' has its origin from a Latin word, "
                        ),
                        _c("i", [_vm._v('"communis"')]),
                        _vm._v(" which means, "),
                        _c("i", [_vm._v('"make common"')]),
                        _vm._v(
                          ". This could be stretched to mean, 'create a common ground for understanding' or share with others an idea, concept, or information. Communication could also be defined as "
                        ),
                        _c("i", [
                          _vm._v(
                            "an attempt to persuade people or influence them with intent"
                          )
                        ]),
                        _vm._v(
                          ". Communication is the process through which information is passed from one person to another. "
                        )
                      ]),
                      _c("p", { staticClass: "text-center meme" }, [
                        _c("img", {
                          staticClass: "img-fluid",
                          attrs: {
                            src: require("../assets/arrow.png"),
                            alt: "Responsive image"
                          }
                        }),
                        _c("br")
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " The graphic above shows how one begins the communication until it reaches the recipient. Note the channel/s which includes speaking, writing, graphics and video to mention some. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " As a teacher, you are basically a communicator. You have ideas and information to share with your students so that they know these. You need to make a deliberate effort to influence the students to perceive the ideas and information the same way you do. This means that you have to follow a process that will help you to share the ideas and the information with your students. That process is called communication. "
                        )
                      ]),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " As mentioned previously, communication is the process through which ideas, information, or skills are passed from a source to a receiver as intended. Communication does not occur unless the person receiving the message interprets it as intended. This means that both the source and the receiver must share a common understanding of the message when communication takes place. Communication as a process consists of several elements. These elements include: "
                        ),
                        _c("ul", [
                          _c("li", [_vm._v("Source")]),
                          _c("li", [
                            _vm._v("Message (verbal and non -verbal)")
                          ]),
                          _c("li", [_vm._v("Channel")]),
                          _c("li", [_vm._v("Receiver")]),
                          _c("li", [_vm._v("Environment")]),
                          _c("li", [_vm._v("Feedback. ")])
                        ])
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("The source")]),
                          _vm._v(
                            " encodes the message that is conveyed to the receiver. The source could be you as the teacher or it could be your students. To encode the message and convey it as intended to the target audience, the source must have the following characteristics: "
                          ),
                          _c("ul", [
                            _c("li", [
                              _vm._v(
                                "Possess the necessary communication skills such as speaking, reading, writing, and listening."
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                "Have a positive attitude towards self (self-confidence), the receiver of the message and towards the subject matter."
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                " Have good knowledge of the target audience/learners. You need to know the characteristics of the learners such as their age, composition (either homogenous or heterogeneous group), ability level, specific entry competencies, size (how many), their experience and interests or their social-cultural background. "
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                "Have good knowledge of the subject matter to be communicated."
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                "Possess skills in handling educational technologies."
                              )
                            ])
                          ])
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("The receiver")]),
                          _vm._v(
                            " is the person who decodes/interprets the message. As the person encoding the message, make sure that you reach out to your target audience since whatever message you encode must be interpreted by the target audience as intended. For example, you talk and your audience listens, or you write and they read the content of the message. Make sure that your message is rooted in their experiences. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("The message")]),
                          _vm._v(
                            " refers to the content that you are communicating to the audience. The message could be facts, information, skills, etc. You should organize the message in a way that interests the audience and which they can identify with. Make the message credible and put it at the level of your audience understanding so that they can easily interpret it. The message should be receiver oriented. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [
                            _vm._v("The channel or the medium of communication")
                          ]),
                          _vm._v(
                            " is the means used to encode the message. The medium could be spoken word, a picture, a chart, a machine, music or a combination of any of such media. The channel that you choose to use to convey your message affects how the message is received and interpreted by the audience or the receiver. It is said that 'the medium is the message' because the channel that you select determines how effectively the audience receives the message. Media serve as extensions of our efforts to communicate with the target audience. Therefore, always select the most appropriate channel by considering the following factors: "
                          ),
                          _c("ul", [
                            _c("li", [
                              _vm._v(
                                "What are the characteristics of your target audience?"
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                "What is the nature of your message or subject matter?"
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                "What is your communication goal/objective or what do you want to achieve?"
                              )
                            ]),
                            _c("li", [
                              _vm._v(
                                "What channels of communication are available for you to choose from? "
                              )
                            ])
                          ])
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("The environment")]),
                          _vm._v(
                            " refers to the context of communication or where communication takes place. This could be the classroom, the laboratory, the workshop, or in the open field. So, make sure that you select media/medium that fits the situation. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Feedback")]),
                          _vm._v(
                            " refers to knowledge of results based on the receiver's response to the message sent. Whenever you communicate, you need to confirm whether the message has been received as you intended. You should not wait to be told by the receiver whether the message has been received as intended or not. You should look for feedback and it does not always have to be verbal or spoken. Feedback could be in form of words, expressions, gestures, or other actions (verbal and non-verbal). Feedback could also be positive or negative. As a teacher, always be aware of the non-verbal feedback. As it is said, "
                          ),
                          _c(
                            "i",
                            [
                              _c("kk", [
                                _vm._v("'one cannot not communicate'")
                              ]),
                              _vm._v(
                                ". This means that communication is always on going, it is also irreversible, irretrievable, and interdependent. What I say, or not say, or what I do, affects how you respond and what you say or do affects me but neither of us determines the behaviour of the other. "
                              )
                            ],
                            1
                          ),
                          _c("br"),
                          _c("br"),
                          _vm._v(
                            " Feedback helps you as the source of the message to detect where a problem might have arisen if the message has not been received as intended. It also helps you to correct any errors in the transmitted message, or to improve the encoding and transmission process or even to assist your target audience if they have a problem interpreting the message. Do not always wait to receive feedback. Look for it from your audience especially by observing the non-verbal communication cues. "
                          )
                        ],
                        1
                      ),
                      _c("p", { staticClass: "text-justify meme" }, [
                        _vm._v(
                          " An additional element in a communication process is noise. Noise is any disturbance that interferes with or distorts the transmission of the message. Noise could have a serious impact on the success or failure of communication. Noise clouds and masks information transmission to varying degrees and must be recognized as an obstacle to be overcome (Kemp & Dayton, 1985). "
                        )
                      ])
                    ]),
                    _c("br"),
                    _c(
                      "h3",
                      {
                        staticClass: "h3-responsive",
                        attrs: { id: "item-5-2" }
                      },
                      [_vm._v("1.5.2 A simple communication model")]
                    ),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: "text-center" }, [
                        _c("img", {
                          staticClass: "img-fluid",
                          attrs: {
                            src: require("../assets/feedback.png"),
                            alt: "Responsive image"
                          }
                        }),
                        _c("br")
                      ]),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _vm._v(
                            " As you might know from your personal experience, clear and precise communication does not always occur. There are three types of variables that might interfere with the communication of ideas namely; "
                          ),
                          _c("kk", [
                            _vm._v(
                              "environmental factors, psychological factors, and personal filters."
                            )
                          ])
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Environmental factors")]),
                          _vm._v(
                            " are those factors within the environment that cause a learner to lose focus and disengage from active participation in the communication process. Such factors could include; loud noise from outside the classroom, excessive movement, poor lighting, or poor seating arrangement. This could also be caused by poor physical reception. Clear understanding of the message depends on clear, unhampered and undistorted reception of the message. For example, written words or drawings must be large enough for all students in class to see and read from every corner in the classroom. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Psychological factors")]),
                          _vm._v(
                            " are the unique individual psychological differences that define and affect the reception of the communication message. For example, an individual's emotional state at the time the message is transmitted. Inaccurate reading of feedback could also cause this to happen. "
                          )
                        ],
                        1
                      ),
                      _c(
                        "p",
                        { staticClass: "text-justify meme" },
                        [
                          _c("kk", [_vm._v("Personal filters")]),
                          _vm._v(
                            " also affect message reception. Personal filters include; personal values, social belief system, religious beliefs, dissimilar background, etc. If one for example holds a belief that is directly opposed to the content of the message, then the information might be distorted to be consistent with the belief or rejected because it is in conflict with the belief. "
                          )
                        ],
                        1
                      )
                    ]),
                    _c("div", { staticClass: "note note-primary" }, [
                      _c(
                        "blockquote",
                        { staticClass: "blockquote bq-primary" },
                        [
                          _c("h4", { attrs: { id: "item-5-2-1" } }, [
                            _c("i", { staticClass: "fas fa-tools" }, [
                              _vm._v(" Activity 1.3")
                            ])
                          ]),
                          _c("br"),
                          _vm._v(
                            " Briefly explain why a teacher preparing for a course on educational technology needs to understand learning theories. "
                          )
                        ]
                      ),
                      _c("p", { staticClass: " text-justify" }, [
                        _c("i", [
                          _vm._v(
                            " In your answer you need to establish the connection between learning theories and the application of educational technology. This requires you to explain what the various learning theories say about how individuals learn, and what should happen for the individual to learn. Then, go on to explain the role of educational technology in fulfilling that role of helping individuals learn. In particular consider the suggestions made by Kemp, & Dayton, (1985:14) about some important factors that we need to consider in the design and use of instructional media. "
                          )
                        ])
                      ])
                    ])
                  ]),
                  _c("br"),
                  _c("br"),
                  _c("mdb-row", { staticClass: " text-left" }, [
                    _c(
                      "h2",
                      { staticClass: "h2-responsive", attrs: { id: "item-6" } },
                      [
                        _vm._v(
                          " 1.6 The Changing Role of the Teacher in Classroom Communication"
                        )
                      ]
                    ),
                    _c("br"),
                    _c("div", { staticClass: "ml-5" }, [
                      _c("p", { staticClass: " text-justify meme" }, [
                        _vm._v(
                          " The role of the teacher has changed since the 20"
                        ),
                        _c("sup", [_vm._v("th")]),
                        _vm._v(
                          " Century as the purpose of education has expanded rapidly. Goals of education have expanded and exceeded the focus of the 3Rs (Reading, writing and arithmetic). In the 21"
                        ),
                        _c("sup", [_vm._v("st")]),
                        _vm._v(
                          " Century, some aspects of education and teaching will remain the same, while others are changing dramatically. At the moment, teachers must be equipped with a number of skills such as the use of the Internet, as instruction can take place via the Internet through what is known as E-learning. "
                        )
                      ]),
                      _c("p", { staticClass: " text-justify meme" }, [
                        _vm._v(
                          " As well, there are many developments in using technology for instructional purposes. In some schools in Swaziland they have introduced the use of Tablets and printed materials are used minimally. Mobile devices such as cell-phones are also used extensively in education. Platforms such as Skype allow teachers and students to communicate through video conferencing, texting (sms or chatting), audio as well as video. "
                        )
                      ]),
                      _c("p", { staticClass: "text-center" }, [
                        _c("img", {
                          staticClass: "img-fluid",
                          attrs: {
                            src: require("../assets/technology.png"),
                            alt: "Responsive image"
                          }
                        })
                      ]),
                      _c("p", { staticClass: " text-justify meme" }, [
                        _vm._v(
                          " Let us briefly look at some of the areas where change might or has occurred: "
                        ),
                        _c("ul", [
                          _c("li", [
                            _vm._v(
                              " Tremendous changes are/have occurred in the way information is stored and accessed with computers and digital technologies. Today, the Internet is connecting students to a wide range of resources for learning, which were previously not available. Arends (2007:7) argues that the Internet will become (if it has not already) the primary medium of/for information and will substantially redefine other forms of print and visual publications. This in turn will cause educators to redefine how they conduct their lessons and the assignments they give in class. As educators worldwide expand the use of technology in teaching and learning, it is becoming evident that technology will end up doing more than just enhancing instruction. It might prove to be a serious force in changing the nature and form of instruction. "
                            )
                          ])
                        ])
                      ]),
                      _c("p", { staticClass: " text-justify meme" }, [
                        _vm._v(
                          " Consider the case of the cell phone, which has completely changed the nature of personal, and business communication. Like the cellular technology, educational technologies are essentially communication tools and any advances in educational technologies will fundamentally alter the way in which we communicate educationally. Another example is in distance education courses like the one you are currently enrolled in. A major characteristic of distance education programmes is the physical separation between the instructor and the learners for most of the time. So, such programmes are offered through various combinations of digital and other distance delivery technologies. "
                        )
                      ]),
                      _c("p", { staticClass: " text-justify meme" }, [
                        _c("ul", [
                          _c("li", [
                            _vm._v(
                              " Education in the past was organized in such a manner that the teacher's role was to transmit information or 'the truth' to students. Teachers were regarded as experts whose duty was to pass information to the students who were passive listeners. It is now believed that knowledge is personal and meaning is constructed by the learner through experience. Therefore, learning is a social and cultural activity in which learners construct their own meaning by interacting with the information and by being actively involved in the process of creating meaning. This is what has come to be described as "
                            ),
                            _c("i", [
                              _vm._v(
                                " 'constructivist learning'. Constructivism "
                              )
                            ]),
                            _vm._v(
                              " is a perspective in teaching and learning in which a learner constructs meaning from experience and interaction with others where the role of the teacher is to provide meaningful experiences for students (Arends 2007: Glossary: 3). "
                            )
                          ])
                        ])
                      ]),
                      _c("p", { staticClass: " text-justify meme" }, [
                        _vm._v(
                          " According to Heinich et al. (1996:18), the ultimate measure of learning is based on the ability of the student to use knowledge to facilitate thinking in real life. From the constructivist perspective, learning is viewed as a process where students are actively engaged in relevant experiences with opportunities for dialogue so that meaning can evolve and be constructed. Learning takes place not in passive classrooms but in communities characterized by high levels of learner participation and engagement. This will imply that teachers will have to change the way they plan and organize instruction. Teachers will no longer be the source of information but will act as facilitators by providing opportunities and resources for students to interact with and construct their own meanings. This will imply that teachers will have to make support technologies such as E-mail, Internet, Web sites and Electronic Conferences available for students to use. "
                        )
                      ])
                    ]),
                    _c("div", { staticClass: "note note-primary ml-5" }, [
                      _c(
                        "blockquote",
                        { staticClass: "blockquote bq-primary" },
                        [
                          _c("h4", { attrs: { id: "item-6-1" } }, [
                            _c("i", { staticClass: "fas fa-tools" }, [
                              _vm._v(" Activity 1.4")
                            ])
                          ]),
                          _c("br"),
                          _vm._v(
                            " In your own words, explain how you expect the role of a teacher in classroom communication to change in Swaziland as new technologies invade the classrooms. "
                          )
                        ]
                      ),
                      _c("p", { staticClass: " text-justify" }, [
                        _vm._v(
                          " In your answer you might need to consider the new technologies that have invaded the classroom and how their utilization might affect the way teachers have traditionally communicated with students in class. Explain the demands placed on teachers as they facilitate students to learn using the emerging technologies. "
                        )
                      ])
                    ])
                  ]),
                  _c("br"),
                  _c("br"),
                  _c("mdb-row", { staticClass: " text-left" }, [
                    _c("div", { staticClass: "note note-success" }, [
                      _c(
                        "blockquote",
                        { staticClass: "blockquote bq-success" },
                        [
                          _c("h1", { attrs: { id: "item-7" } }, [
                            _c("i", { staticClass: "fas fa-folder-open" }, [
                              _vm._v(" Unit Summary")
                            ])
                          ]),
                          _c("p", { staticClass: "text-justify" }, [
                            _vm._v(
                              " In this unit we focused on understanding what educational technology was and we also defined some of the terms that are closely associated with educational technology. We went on to discuss why we need to study educational technology. We discussed the relationship between educational technology, communication and learning. We need to understand where educational technology features or fits in, in the whole classroom communication process since we use educational technology to extend and maximise our communication efforts "
                            )
                          ]),
                          _c("p", { staticClass: "text-justify" }, [
                            _vm._v(
                              " We also discussed the communication process in relation to learning as well as the various theories of learning. It is important that we understand how learning takes place so that we can plan for effective teaching and learning. We concluded the unit by discussing the changing role of a teacher in classroom communication as newer technologies invade the classroom. With this introduction, you now need to synthesize the knowledge gained into your own personal view of the teaching and learning process so that you can determine how educational technology fits into your teaching and learning. "
                            )
                          ])
                        ]
                      )
                    ]),
                    _c("br"),
                    _c("div", { staticClass: "note note-warning" }, [
                      _c(
                        "blockquote",
                        { staticClass: "blockquote bq-warning" },
                        [
                          _c("h1", { attrs: { id: "item-8" } }, [
                            _c("i", { staticClass: "fas fa-medal" }, [
                              _vm._v(" Assignment")
                            ])
                          ]),
                          _c("p", { staticClass: "text-justify" }, [
                            _vm._v(
                              " Conduct an Internet Search and report on the uses of Social Media in the classroom. Your work should be posted on the E-learning website. "
                            )
                          ])
                        ]
                      )
                    ]),
                    _c("br"),
                    _c("div", { staticClass: "note note-secondary" }, [
                      _c(
                        "blockquote",
                        { staticClass: "blockquote bq-secondary" },
                        [
                          _c("h1", { attrs: { id: "item-9" } }, [
                            _c("i", { staticClass: "fas fa-" }, [
                              _vm._v(" References")
                            ])
                          ]),
                          _c("p", { staticClass: "text-justify" }, [
                            _vm._v(" Arends, R.I (2007)."),
                            _c("i", [
                              _vm._v(
                                " Learning to Teach. McGraw Hill International Edition"
                              )
                            ]),
                            _vm._v(" 7th Edition. New York ")
                          ]),
                          _c("p", { staticClass: "text-justify" }, [
                            _vm._v(
                              " Heinich, R.; Molenda, M.; Rusell, J.D.; & Smaldino, S.E (1996). "
                            ),
                            _c("i", [
                              _vm._v(
                                "Instructional Media and Technologies for Learning. "
                              )
                            ]),
                            _vm._v(" 5"),
                            _c("sup", [_vm._v("th")]),
                            _vm._v(" Edition. Prentice Hall, Inc. New Jersey. ")
                          ]),
                          _c("p", { staticClass: "text-justify" }, [
                            _vm._v(" Kemp, J.E.; Dayton, D.K. (1985)."),
                            _c("i", [
                              _vm._v(
                                " Planning and Producing Instructional Media."
                              )
                            ]),
                            _vm._v(
                              " 5th Edition. Harper & Row, Publishers. New York. "
                            )
                          ]),
                          _c("p", { staticClass: "text-justify" }, [
                            _vm._v(
                              " Nacino-Brown, R.; Oke, F.E.; Brown, D.P. (1982)."
                            ),
                            _c("i", [
                              _vm._v(" Teaching and Learning with Technology.")
                            ]),
                            _vm._v(" 2"),
                            _c("sup", [_vm._v("nd")]),
                            _vm._v(" Edition. Allyn and Bacon. New York. ")
                          ]),
                          _c("p", { staticClass: "text-justify" }, [
                            _vm._v(
                              " Nacino-Brown, R.; Oke, F.E.; Brown, D.P. (1982) "
                            ),
                            _c("i", [
                              _vm._v(
                                "). Curriculum and Instruction: An Introduction to Teaching Methods of Teaching. "
                              )
                            ]),
                            _vm._v(" McMillan Publishers. London. ")
                          ]),
                          _c("p", { staticClass: "text-justify" }, [
                            _vm._v(" Roblyer, M.D. (2004). 2004 Update:"),
                            _c("i", [
                              _vm._v(
                                "Integrating Educational Technology into Teaching."
                              )
                            ]),
                            _vm._v(" 3"),
                            _c("sup", [_vm._v("rd")]),
                            _vm._v(
                              " Edition. Upper Saddle River, New Jersey, Columbus, Ohio: Pearson Merrill Prentice Hall. "
                            )
                          ]),
                          _c("p", { staticClass: "text-justify" }, [
                            _vm._v(
                              " Wikipedia, the free encyclopedia. Accessed from "
                            ),
                            _c(
                              "a",
                              {
                                attrs: {
                                  href:
                                    "http://en.wikipedia.org/wiki/Educational_technology"
                                }
                              },
                              [
                                _vm._v(
                                  " http://en.wikipedia.org/wiki/Educational_technology"
                                )
                              ]
                            ),
                            _vm._v(" on 22nd August 2008. ")
                          ])
                        ]
                      )
                    ])
                  ])
                ],
                1
              )
            ],
            1
          )
        ])
      ])
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-sm-4 col-lg-3" }, [
      _c(
        "nav",
        {
          staticClass: "navbar navbar-light sticky-top flex-column mt-4",
          attrs: { id: "navbar-example3" }
        },
        [
          _c("a", { staticClass: "navbar-brand", attrs: { href: "#" } }, [
            _vm._v("Unit 1")
          ]),
          _c("nav", { staticClass: "nav nav-pills flex-column" }, [
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-1" } }, [
              _vm._v("1.1 Introduction")
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-1-1" }
                },
                [_vm._v(" Unit Outcomes")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-1-2" }
                },
                [_vm._v(" Terminology")]
              )
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-2" } }, [
              _vm._v(
                "1.2 Key Concepts Applicable to Educational Technology and ICTs"
              )
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-2-1" }
                },
                [_vm._v(" 1.2.1 What is Educational technology?")]
              ),
              _c("nav", { staticClass: "nav nav-pills flex-column" }, [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-2-1-1" }
                  },
                  [_vm._v("Activity 1.1")]
                )
              ]),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-2-2" }
                },
                [_vm._v(" 1.2.2 Why Study Educational Technology?")]
              )
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-3" } }, [
              _vm._v("1.3 Meaning and Scope of ICTs")
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-1" }
                },
                [_vm._v("1.3.1 Types of ICTs")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-2" }
                },
                [_vm._v("1.3.2 ICTs as media of communication")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-3" }
                },
                [_vm._v("1.3.3 Information Technology (IT) equipment")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-4" }
                },
                [_vm._v("1.3.4 Telecommunications")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-3-5" }
                },
                [_vm._v("1.3.5 Limitations of ICTs")]
              ),
              _c("nav", { staticClass: "nav nav-pills flex-column" }, [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-3-5-1" }
                  },
                  [_vm._v("Activity 1.2")]
                )
              ])
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-4" } }, [
              _vm._v("1.4 Introduction to Social Media")
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-4-1" }
                },
                [_vm._v("1.4.1 Examples of Social Media")]
              )
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-5" } }, [
              _vm._v(
                "1.5 Educational Technology, Classroom Communication and Learning"
              )
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-5-1" }
                },
                [_vm._v("1.5.1 Communication and learning")]
              ),
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-5-2" }
                },
                [_vm._v("1.5.2 A simple communication model")]
              ),
              _c("nav", { staticClass: "nav nav-pills flex-column" }, [
                _c(
                  "a",
                  {
                    staticClass: "nav-link ml-5 my-1",
                    attrs: { href: "#item-5-2-1" }
                  },
                  [_vm._v("Activity 1.3")]
                )
              ])
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-6" } }, [
              _vm._v(
                "1.6 The Changing Role of the Teacher in Classroom Communication"
              )
            ]),
            _c("nav", { staticClass: "nav nav-pills flex-column" }, [
              _c(
                "a",
                {
                  staticClass: "nav-link ml-3 my-1",
                  attrs: { href: "#item-6-1" }
                },
                [_vm._v("Activity 1.4")]
              )
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-7" } }, [
              _vm._v("Unit summary")
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-8" } }, [
              _vm._v("Assignment")
            ]),
            _c("a", { staticClass: "nav-link", attrs: { href: "#item-9" } }, [
              _vm._v("References")
            ])
          ])
        ]
      )
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}