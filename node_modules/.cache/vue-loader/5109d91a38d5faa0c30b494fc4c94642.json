{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit4.vue?vue&type=template&id=34e30566&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\src\\views\\Unit4.vue","mtime":1594191850952},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\Education\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYm9yZGVyIGJvcmRlci1saWdodCBwLTMgbWItNSByb3VuZGVkICIgfSwgWwogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgX3ZtLl9tKDApLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS04IGNvbC1sZy05IiB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgInNjcm9sbHNweS1leGFtcGxlIHotZGVwdGgtMSBtdC00IHNoYWRvdy1sZyBwLTMgbWItNSByb3VuZGVkIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAiZGF0YS1zcHkiOiAic2Nyb2xsIiwKICAgICAgICAgICAgICAiZGF0YS10YXJnZXQiOiAiI25hdmJhci1leGFtcGxlMyIsCiAgICAgICAgICAgICAgImRhdGEtb2Zmc2V0IjogIjAiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJoMSIsIHsgc3RhdGljQ2xhc3M6ICJoMS1yZXNwb25zaXZlIHRleHQtanVzdGlmeSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiVW5pdCA0IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJoMSIsIHsgc3RhdGljQ2xhc3M6ICJoMS1yZXNwb25zaXZlIHRleHQtanVzdGlmeSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJEZXNpZ24gYW5kIERldmVsb3BtZW50IG9mIEluc3RydWN0aW9uYWwgTWVkaWEgYW5kIE1hdGVyaWFscyIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaDItcmVzcG9uc2l2ZSB0ZXh0LWp1c3RpZnkiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJpdGVtLTEiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjQuMSBJbnRyb2R1Y3Rpb24iKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtbC01IiB9LCBbCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiBUZWFjaGVycyBoYXZlIGxvbmcgYmVlbiBrbm93biBmb3IgdGhlaXIgY3JlYXRpdmUgdXNlIG9mIGF2YWlsYWJsZSB0b29scyBhbmQgcmVzb3VyY2VzIHRvIHByb2R1Y2UgaW5zdHJ1Y3Rpb25hbCBtYXRlcmlhbHMuIENyZWF0aW5nIHlvdXIgb3duIGluc3RydWN0aW9uYWwgbWF0ZXJpYWxzIGlzIHNvbWV0aW1lcyB1bmF2b2lkYWJsZSBpbiBhIGNsYXNzcm9vbSwgZ2l2ZW4gdGhhdCB0ZWFjaGVycyBhcmUgZmFjZWQgd2l0aCBkaWZmZXJlbnQgYW5kIHVuaXF1ZSBpbnN0cnVjdGlvbmFsIHNpdHVhdGlvbnMuIFNpbmNlIG91ciBzdHVkZW50cyBkaWZmZXIgaW4gdGhlaXIgY2hhcmFjdGVyaXN0aWNzIGFuZCBsZWFybmluZyBuZWVkcywgYXZhaWxhYmxlIGluc3RydWN0aW9uYWwgbWF0ZXJpYWxzIG1pZ2h0IG5vdCBhbHdheXMgd29yayBmb3Igb3VyIG93biBzaXR1YXRpb25zLiBUaGlzIGNhbGxzIGZvciBjcmVhdGl2aXR5IG9uIG91ciBwYXJ0IGFzIHRlYWNoZXJzIHRvIGRlc2lnbiBhbmQgcHJvZHVjZSBvdXIgb3duIGluc3RydWN0aW9uYWwgbWF0ZXJpYWxzLiAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl9tKDEpLAogICAgICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiIEluIHRoaXMgdW5pdCB3ZSB3aWxsIHRoZXJlZm9yZSBpbnRyb2R1Y2UgeW91IHRvIHRoZSBjb25jZXB0cyBvZiBkZXNpZ25pbmcsIHBsYW5uaW5nIGFuZCBwcm9kdWNpbmcgaW5zdHJ1Y3Rpb25hbCBtYXRlcmlhbHMgdG8gbWVldCB5b3VyIGluc3RydWN0aW9uYWwgZ29hbHMuIFdlIHdpbGwgZGlzY3VzcyB0aGUgcHJvY2VzcyBmb3IgZGVzaWduaW5nIGluc3RydWN0aW9uYWwgbWF0ZXJpYWxzIHNvIHRoYXQgeW91IGNhbiBiZSBpbiBhIHBvc2l0aW9uIHRvIGNyZWF0ZSB5b3VyIG93biBpbnN0cnVjdGlvbmFsIG1hdGVyaWFscyBzaG91bGQgdGhlIG5lZWQgYXJpc2UuICIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm5vdGUgbm90ZS1zZWNvbmRhcnkgdGV4dC1qdXN0aWZ5IG1lbWUiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFRvIGhlbHAgdHJhbnNsYXRlIHRoZSB0aGVvcnkgdGhhdCBpcyBwcmVzZW50ZWQgaW4gdGhpcyB1bml0IGludG8gcHJhY3RpY2UsIHlvdSB3aWxsIGJlIHJlcXVpcmVkIHRvIGF0dGVuZCBzb21lIGRlbW9uc3RyYXRpb25zIG9uIGhvdyB0byBwcm9kdWNlIGRpZmZlcmVudCBpbnN0cnVjdGlvbmFsIG1lZGlhIG1hdGVyaWFscyB0byBtZWV0IHlvdXIgc3R1ZGVudHMgbGVhcm5pbmcgbmVlZHMuIFRoZXNlIGRlbW9uc3RyYXRpb25zIHdpbGwgYmUgc2NoZWR1bGVkIHRvIHRha2UgcGxhY2UgaW4gcm9vbSBDMTogMSB3aXRoaW4gdGhlIEZhY3VsdHkgb2YgRWR1Y2F0aW9uIGFuZCB5b3Ugd2lsbCBiZSBpbmZvcm1lZCB3aGVuIHRvIGF0dGVuZCB0aGVtLiBZb3Ugd2lsbCBhbHNvIGJlIHJlcXVpcmVkIHRvIGRlc2lnbiB5b3VyIG93biBpbnN0cnVjdGlvbmFsIG1hdGVyaWFscyBhbmQgbWFrZSBhIHByZXNlbnRhdGlvbiB0byBhIHNtYWxsIGdyb3VwIGFuZCB0aGlzIHRhc2sgd2lsbCBiZSBncmFkZWQgYXMgcGFydCBvZiB5b3VyIHByYWN0aWNhbCB3b3JrLiBZb3Ugd2lsbCByZWNlaXZlIGZ1cnRoZXIgaW5mb3JtYXRpb24gYW5kIGluc3RydWN0aW9ucyBvbiB0aGlzIHRhc2sgZnJvbSB0aGUgY291cnNlIGxlY3R1cmVyLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgIF92bS5fbSgzKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5vdGUgbm90ZS1zdWNjZXNzIHRleHQtanVzdGlmeSIgfSwgWwogICAgICAgICAgICAgICAgX2MoImJsb2NrcXVvdGUiLCB7IHN0YXRpY0NsYXNzOiAiYmxvY2txdW90ZSBicS1zdWNjZXNzIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fbSg0KSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkiIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW192bS5fdigiU3Rvcnlib2FyZGluZzoiKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiQSB0ZWNobmlxdWUgYm9ycm93ZWQgZnJvbSBmaWxtIGFuZCB2aWRlbyBwcm9kdWN0aW9uIHRoYXQgYWxsb3dzIHlvdSB0byBjcmVhdGl2ZWx5IGFycmFuZ2UgYW5kIHJlYXJyYW5nZSB5b3VyIHNrZXRjaGVzLiIKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygia2siLCBbX3ZtLl92KCJHcmFwaGljIE1hdGVyaWFsczoiKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiTWF0ZXJpYWxzIGluIGFydCBmb3JtIHdoZXJlIGlkZWFzIGFyZSBleHByZXNzZWQgaW4gZGlhZ3JhbXMsIHBpY3R1cmVzLCBncmFwaHMsIGNoYXJ0cywgY29sbGFnZXMgYW5kIHBvc3RlcnMuIgogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygia2siLCBbX3ZtLl92KCJDaGFsa2JvYXJkOiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJNZWRpYSB1c2VkIHRvIHdyaXRlLW9uIGFuZCBkaXNwbGF5IG1hdGVyaWFscyBpbiB0aGUgY2xhc3Nyb29tLiIKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW192bS5fdigiV2hpdGVib2FyZDoiKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiIExpa2UgdGhlIGNoYWxrYm9hcmQsIGEgbmV3IG1lZGlhIHVzZWQgdG8gd3JpdGUtb24gYW5kIGRpc3BsYXkgbWF0ZXJpYWxzIGluIHRoZSBjbGFzc3Jvb20uIgogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygia2siLCBbX3ZtLl92KCJBdWRpbyBNZWRpYToiKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiTWVkaWEgaW4gdGhlIGZvcm0gb2Ygc291bmQgZS5nLiBhdWRpbyBDRCdzLCBhdWRpbyBmaWxlcyBhbmQgcG9kY2FzdHMuIgogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygia2siLCBbX3ZtLl92KCJDb21tdW5pdHkgUmVzb3VyY2VzOiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJSZXNvdXJjZXMgZm91bmQgaW4gdGhlIHJlYWwgY29udGV4dCAoaW4gdGhlIGNvbW11bml0eS9wbGFjZSkuIFJlYWwgdGhpbmdzIGFuZCBvYmplY3RzIGFyZSBleGFtcGxlcy4iCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW192bS5fdigiQ29tcHV0ZXItQmFzZWQgTWVkaWE6IildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIk1lZGlhIHByZS1kb21pbmFudGx5IHNob3duIG9yIGRpc3BsYXllZCB2aWEgYSBjb21wdXRlci4gTW9zdGx5IGVsZWN0cm9uaWMgbWVkaWEuIgogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygia2siLCBbX3ZtLl92KCJXZWItYmFzZWQgTWVkaWE6IildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIk1lZGlhIHNob3duIG9yIGRpc3BsYXllZCBtb3N0bHkgb3ZlciB0aGUgSW50ZXJuZXQuIgogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImgyLXJlc3BvbnNpdmUgdGV4dC1qdXN0aWZ5IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiaXRlbS0yIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICI0LjIgVGhlIFByb2Nlc3MgZm9yIGRlc2lnbmluZyBJbnN0cnVjdGlvbmFsIE1lZGlhIGFuZCBNYXRlcmlhbHMiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX20oNSksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiaDMiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaDMtcmVzcG9uc2l2ZSB0ZXh0LWp1c3RpZnkiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJpdGVtLTItMSIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiNC4yLjEgUHJvY2VzcyBmb3IgZGVzaWduaW5nIGluc3RydWN0aW9uYWwgbWVkaWEiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtbC01IHRleHQtanVzdGlmeSIgfSwgWwogICAgICAgICAgICAgIF92bS5fbSg2KSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiIENyZWF0aW9uIG9mIGluc3RydWN0aW9uYWwgbWVkaWEgYnkgeW91IGFzIGEgdGVhY2hlciBjb3VsZCBiZSBpbmZsdWVuY2VkIGJ5IGFueSBvbmUgb2YgdGhlIGZvbGxvd2luZyBpbnRlbnRpb25zIHRoYXQgbWlnaHQgYmUgc2VydmVkIGJ5IG1lZGlhIHdoZW4geW91IHVzZSBpdCBlaXRoZXIgd2l0aCBpbmRpdmlkdWFscywgc21hbGwgZ3JvdXBzLCBvciB3aXRoIGxhcmdlIGdyb3VwczogIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fbSg3KSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgTm93IGxldCB1cyBjb25zaWRlciBlYWNoIHB1cnBvc2VzIGluIG1vcmUgZGV0YWlsLiIpLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIEZvciAiKSwKICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW192bS5fdigibW90aXZhdGlvbmFsIHB1cnBvc2VzIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIsIGRyYW1hdGljIG9yIGVudGVydGFpbm1lbnQgdGVjaG5pcXVlcyBtYXkgYmUgZW1wbG95ZWQuIFRoZSBkZXNpcmVkIHJlc3VsdCBpcyB0byBnZW5lcmF0ZSBpbnRlcmVzdCBvciBzdGltdWxhdGUgbGVhcm5lcnMgdG8gdGFrZSBjZXJ0YWluIGFjdGlvbi4gVGhpcyBzaG91bGQgaW52b2x2ZSBhY2NvbXBsaXNoaW5nIG9iamVjdGl2ZXMgdGhhdCBhZmZlY3QgcGVyc29uYWwgYXR0aXR1ZGVzLCB2YWx1ZXMsIGFuZCBlbW90aW9ucy4iCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgRm9yICIpLAogICAgICAgICAgICAgICAgICBfYygia2siLCBbX3ZtLl92KCJpbmZvcm1hdGlvbmFsIHB1cnBvc2VzIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIsIHRoZSBpbnN0cnVjdGlvbmFsIG1lZGlhIHdvdWxkIGJlIHVzZWQgaW4gYSBwcmVzZW50YXRpb24gbWFkZSBiZWZvcmUgYSBncm91cCBvZiBsZWFybmVycy4gVGhlIGNvbnRlbnQgYW5kIGZvcm0gb2YgdGhlIHByZXNlbnRhdGlvbiB3b3VsZCBiZSBnZW5lcmFsIGluIG5hdHVyZSwgc2VydmluZyBhcyBhbiBpbnRyb2R1Y3Rpb24sIGFuIG92ZXJ2aWV3LCBhIHJlcG9ydCwgb3IgYmFja2dyb3VuZCBrbm93bGVkZ2UuIEl0IGNvdWxkIHRoZXJlZm9yZSBlbXBsb3kgZWl0aGVyIGVudGVydGFpbm1lbnQsIGRyYW1hdGljLCBvciBtb3RpdmF0aW9uYWwgdGVjaG5pcXVlcyBpbiBvcmRlciB0byBhdHRyYWN0IGFuZCBob2xkIGxlYXJuZXJzJyBhdHRlbnRpb24uIFVzdWFsbHksIHdoZW4gdmlld2luZyBpbmZvcm1hdGlvbmFsLXR5cGUgbWF0ZXJpYWxzLCB0aGUgaW5kaXZpZHVhbHMgdGVuZCB0byBiZSBwYXNzaXZlIHZpZXdlcnMgb3IgbGlzdGVuZXJzLiIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBGb3IgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFtfdm0uX3YoImluc3RydWN0aW9uYWwgcHVycG9zZXMiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiwgd2hpbGUgcHJlc2VudGF0aW9uIG9mIGluZm9ybWF0aW9uIGlzIGltcG9ydGFudCwgYXR0ZW50aW9uIGlzIGFsc28gZ2l2ZW4gdG8gaW52b2x2aW5nIHRoZSBwYXJ0aWNpcGFudHMgb3IgdGhlIHN0dWRlbnRzIGluIG91ciBjYXNlIGluIGVpdGhlciBtZW50YWwgb3Igb3ZlcnQgYWN0aXZpdGllcyByZWxhdGluZyB0byB0aGUgaW5zdHJ1Y3Rpb25hbCBtZWRpYSBiZWluZyB1c2VkIHNvIHRoYXQgbGVhcm5pbmcgY2FuIHRha2UgcGxhY2UuIFRoZSBtYXRlcmlhbHMgdGhlbXNlbHZlcyBzaG91bGQgYmUgZGVzaWduZWQgbW9yZSBzeXN0ZW1hdGljYWxseSBpbiB0ZXJtcyBvZiBsZWFybmluZyBwcmluY2lwbGVzIGluIG9yZGVyIHRvIHByb3ZpZGUgZWZmZWN0aXZlIGluc3RydWN0aW9uIGJ1dCBhdCB0aGUgc2FtZSB0aW1lLCB0aGV5IHNob3VsZCBiZSBlbmpveWFibGUgYW5kIHByb3ZpZGUgcGxlYXNhbnQgZXhwZXJpZW5jZXMuIEl0IGlzIGRlc2lyYWJsZSB0byBtYWtlIHByb3Zpc2lvbiBmb3IgdGhlIGluZGl2aWR1YWwgbGVhcm5lciB0byB1c2UgaW5zdHJ1Y3Rpb25hbCBtZWRpYSBvbiB0aGVpciBvd24uICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fbSg4KSwKICAgICAgICAgICAgICBfdm0uX20oOSksCiAgICAgICAgICAgICAgX3ZtLl9tKDEwKSwKICAgICAgICAgICAgICBfdm0uX20oMTEpLAogICAgICAgICAgICAgIF92bS5fbSgxMikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImgyLXJlc3BvbnNpdmUgdGV4dC1qdXN0aWZ5IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiaXRlbS0zIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICI0LjMgSG93IHRvIERlc2lnbiwgUGxhbiBhbmQgUHJvZHVjZSBEaWZmZXJlbnQgVHlwZXMgb2YgSW5zdHJ1Y3Rpb25hbCBNYXRlcmlhbHMiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX20oMTMpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiaDMiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaDMtcmVzcG9uc2l2ZSB0ZXh0LWp1c3RpZnkiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJpdGVtLTMtMSIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiNC4zLjEgUHJvY2VzcyBvZiB2aXN1YWwgZGVzaWduICIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1sLTUgdGV4dC1qdXN0aWZ5IiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl9tKDE0KSwKICAgICAgICAgICAgICBfdm0uX20oMTUpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygia2siLCBbX2MoImkiLCBbX3ZtLl92KCJWaXN1YWwgZWxlbWVudHMiKV0pXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBUaGUgdHlwZSBvZiB2aXN1YWxzIHNlbGVjdGVkIGZvciBhIHBhcnRpY3VsYXIgc2l0dWF0aW9uIGRlcGVuZHMgb24gdGhlIGxlYXJuaW5nIHRhc2suIEZvciBleGFtcGxlLCBiYXNlZCBvbiBEYWxlJ3MgQ29uZSBvZiBFeHBlcmllbmNlIHRoYXQgd2UgZGlzY3Vzc2VkIGluIFVuaXQgMiwgdmlzdWFsIHN5bWJvbHMgY2FuIGJlIGRpdmlkZWQgaW50byB0aHJlZSBjYXRlZ29yaWVzLCBuYW1lbHk7IHJlYWxpc3RpYywgYW5hbG9naWMsIGFuZCBvcmdhbml6YXRpb25hbCAoSG91Z2h0b24gJiBXaWxsb3dzLCAxOTg3KS4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl9tKDE2KSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW19jKCJpIiwgW192bS5fdigiVmVyYmFsIEVsZW1lbnRzIildKV0pLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVGhlc2UgcmVmZXIgdG8gbGV0dGVyaW5nIHN0eWxlIGFuZCBsb2NhdGlvbi4gTW9zdCBkaXNwbGF5cyBpbmNvcnBvcmF0ZSBzb21lIHR5cGUgb2YgdmVyYmFsIGluZm9ybWF0aW9uIGluIGFkZGl0aW9uIHRvIHZpc3VhbHMuIFdoZW4gZXZhbHVhdGluZyBhIGRpc3BsYXkgZm9yIGl0cyBpbnN0cnVjdGlvbmFsIHBvdGVudGlhbCwgb3IgaW4gcHJlcGFyaW5nIHlvdXIgb3duIGRpc3BsYXksIHlvdSBuZWVkIHRvIGNvbnNpZGVyIHRoZSBsZXR0ZXJpbmcgYXMgaXQgY2FuIGFkZCB0byBlZmZlY3RpdmUgY29tbXVuaWNhdGlvbiBlZmZlY3RpdmVseSB0b28uIEF0IGEgbWluaW11bSwgZW5zdXJlIHRoYXQgbGV0dGVyaW5nIGlzIGxlZ2libGUgaW4gdGVybXMgb2Ygc2l6ZSBhbmQgc3BhY2luZyBhbmQgdGhhdCB0aGUgc3R5bGUgaXMgY29uc2lzdGVudCB3aXRoIHRoZSBpbnRlbmRlZCBtZXNzYWdlLiIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoIkxldHRlciBTdHlsZSIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBUaGUgbGV0dGVyaW5nIHN0eWxlIHNob3VsZCBiZSBjb25zaXN0ZW50IGFuZCBpbiBoYXJtb255IHdpdGggdGhlIG90aGVyIGVsZW1lbnRzIG9mIHRoZSB2aXN1YWwuIEZvciBpbmZvcm1hdGlvbmFsIGFuZCBpbnN0cnVjdGlvbmFsIHB1cnBvc2VzLCBhIHBsYWluIChub3QgZGVjb3JhdGl2ZSkgbGV0dGVyaW5nIHN0eWxlIGlzIHJlY29tbWVuZGVkLiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IGEgZGlzcGxheSAtb3Igc2VyaWVzIG9mIHJlbGF0ZWQgdmlzdWFscywgc3VjaCBhcyBhIHNsaWRlIHNlcmllcy11c2Ugbm8gbW9yZSB0aGFuIHR3byBkaWZmZXJlbnQgdHlwZXMgb2Ygc3R5bGVzLCB3aGljaCBzaG91bGQgYmUgaW4gaGFybW9ueSB3aXRoIGVhY2ggb3RoZXIuIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEZvciBiZXN0IGxlZ2liaWxpdHksIHVzZSBsb3dlcmNhc2UgbGV0dGVycywgYWRkaW5nIGNhcGl0YWxzIG9yIHVwcGVyY2FzZSBvbmx5IHdoZXJlIG5vcm1hbGx5IHJlcXVpcmVkLiBUaGUgY29sb3VyIG9mIHRoZSBsZXR0ZXJpbmcgc2hvdWxkIGNvbnRyYXN0IHdpdGggdGhlIGJhY2tncm91bmQgY29sb3VyIGZvciBwdXJwb3NlcyBvZiBsZWdpYmlsaXR5IHNpbmNlIGxlZ2liaWxpdHkgZGVwZW5kcyBvbiBjb250cmFzdC4iCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJTaXplIG9mIGxldHRlcnMiKV0pLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgRGlzcGxheXMgc3VjaCBhcyBidWxsZXRpbiBib2FyZHMgYXJlIG1lYW50IHRvIGJlIHZpZXdlZCBieSBwZW9wbGUgc2l0dWF0ZWQgYXQgYSBkaXN0YW5jZSBvZiBhYm91dCB0ZW4gKDEwKSBtZXRlcnMuIEluIHN1Y2ggY2FzZXMsIHRoZSBzaXplIG9mIGxldHRlcnMgaXMgY3J1Y2lhIGwgZm9yIGxlZ2liaWxpdHkuIEEgY29tbW9uIHJ1bGUgb2YgdGh1bWIgaXMgdG8gbWFrZSBsb3dlcmNhc2UgbGV0dGVycyAxLjIgY2VudGltZXRlcnMgZm9yIGVhY2ggZm91ciAoNCkgbWV0ZXJzIG9mIHZpZXdlciBkaXN0YW5jZS4iCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJTcGFjaW5nIGJldHdlZW4gbGV0dGVycyIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBUaGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgbGV0dGVycyBvZiB0aGUgaW5kaXZpZHVhbCB3b3JkcyBtdXN0IGJlIGp1ZGdlZCBieSBleHBlcmllbmNlIHJhdGhlciB0aGFuIG9uIG1lY2hhbmljYWwgYmFzaXMgc2luY2Ugc29tZSBsZXR0ZXJzIGFyZSBpcnJlZ3VsYXIgY29tcGFyZWQgdG8gb3RoZXJzLiIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoIlNwYWNpbmcgYmV0d2VlbiBsaW5lcyIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBWZXJ0aWNhbCBzcGFjaW5nIGJldHdlZW4gbGluZXMgaXMgYWxzbyBpbXBvcnRhbnQgZm9yIGxlZ2liaWxpdHkuIElmIHRoZSBsaW5lcyBhcmUgdG9vIGNsb3NlIHRvZ2V0aGVyLCB0aGV5IGJsdXIgdGhlIGRpc3RhbmNlIGFuZCBpZiB0aGV5IGFyZSB0b28gZmFyIGFwYXJ0LCB0aGV5IHdpbGwgc2VlbSBkaXNqb2ludGVkLiBGb3IgZXF1YWwgc3BhY2luZywgc3RhcnQgYnkgZHJhd2luZyBsaW5lcyBvZiBlcXVhbCBkaXN0YW5jZSB1c2luZyBhIHJ1bGVyLiBUaGlzIHdpbGwgaGVscCB5b3UgZ2V0IHVzZWQgdG8gZXZlbiBsaW5lIHNwYWNpbmcuIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiRWxlbWVudHMgdGhhdCBBZGQgQXBwZWFsIildKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFlvdXIgdmlzdWFscyB3aWxsIGhhdmUgYSBzbGltIGNoYW5jZSBvZiBoYXZpbmcgYW4gZWZmZWN0IHVubGVzcyB0aGV5IGNhcHR1cmUgYW5kIGhvbGQgdGhlIHZpZXdlcidzIGF0dGVudGlvbi4gSG93IGNhbiB5b3UgYWNoaWV2ZSB0aGlzPyAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uX20oMTcpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygia2siLCBbX2MoImkiLCBbX3ZtLl92KCJQYXR0ZXJuIildKV0pLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgT25jZSB5b3UgaGF2ZSBtYWRlIGRlY2lzaW9ucyBvbiB0aGUgZWxlbWVudHMgdG8gaW5jbHVkZSBpbiB5b3VyIHZpc3VhbCBkaXNwbGF5LCB5b3Ugc2hvdWxkIHRoZW4gZGVjaWRlIG9uIGhvdyB0aGUgdmlld2VyJ3MgZXllcyB3aWxsIGZsb3cgYWNyb3NzIHRoZSBkaXNwbGF5LiBUaGlzIGlzIHdoYXQgY2FuIGJlIGRlc2NyaWJlZCBhcyAncGF0dGVybicuIFBhdHRlcm4gaXMgaW5mbHVlbmNlZCBieTsgYWxpZ25tZW50LCBzaGFwZSwgYmFsYW5jZSwgc3R5bGUsIGNvbG91ciBzY2hlbWUgYW5kIGNvbG91ciBhcHBlYWwuIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiQWxpZ25tZW50IildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgcmVmZXJzIHRvIHBvc2l0aW9uaW5nIG9mIGVsZW1lbnRzIHRvIGdpdmUgYSBjbGVhciB2aXN1YWwgcmVsYXRpb25zaGlwIHRvIGVhY2ggb3RoZXIgaW4gb3JkZXIgdG8gYWlkIHVuZGVyc3RhbmRpbmcgYW5kIGludGVycHJldGF0aW9uLiBWaWV3ZXJzIHdpbGwgcGVyY2VpdmUgZWxlbWVudHMgdG8gYmUgYWxpZ25lZCB3aGVuIHRoZSBlZGdlcyBvZiB0aG9zZSBlbGVtZW50cyBhcmUgYWxpZ25lZCBvbiB0aGUgc2FtZSBpbWFnaW5hcnkgaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgbGluZS4gVGhlc2UgaW1hZ2luYXJ5IGxpbmVzIHNob3VsZCBiZSBwYXJhbGxlbCB0byB0aGUgZWRnZXMgb2YgdGhlIGRpc3BsYXkuIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiU2hhcGUiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIi1WaXN1YWxzIHNob3VsZCBiZSBhcnJhbmdlZCB0byBwcmVzZW50IGEgc2hhcGUgdGhhdCBpcyBmYW1pbGlhciB0byB0aGUgdmlld2Vycy4gVXNlIGEgcGF0dGVybiB0aGF0IGF0dHJhY3RzIGFuZCBmb2N1c2VzIGF0dGVudGlvbiBhcyBlZmZvcnRsZXNzIGFzIHBvc3NpYmxlLiBGb3IgZXhhbXBsZSBjaXJjbGVzLCByZWN0YW5nbGVzLCBvciB0cmktYW5nbGVzIHByb3ZpZGUgYSBjb252ZW5pZW50IGZyYW1ld29yaywgYXMgdGhlIHNoYXBlIGlzIHByZWRpY3RhYmxlIHRvIHRoZSB2aWV3ZXJzLiIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoIkNvbG91ciBzY2hlbWUiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIi0gYXMgeW91IGNob29zZSBjb2xvdXIsIGNvbnNpZGVyIHRoZSBoYXJtb255IG9mIHRoZSBjb2xvdXJzLiBBbnkgdHdvIGNvbG91cnMgdGhhdCBsaWUgZGlyZWN0bHkgb3Bwb3NpdGUgZWFjaCBvdGhlciBvbiB0aGUgY29sb3VyIHdoZWVsIGFyZSBjYWxsZWQgY29tcGxlbWVudGFyeSBjb2xvdXJzIHN1Y2ggYXMgcmVkIGFuZCBncmVlbiwgb3IgeWVsbG93IGFuZCB2aW9sZXQuICIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW192bS5fdigiQ29tcGxlbWVudGFyeSBjb2xvdXJzIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgaGFybW9uaXplIHdlbGwgaW4gdGVybXMgb2Ygb3ZlcmFsbCBjb2xvdXIgc2NoZW1lLiBDb2xvdXJzIHRoYXQgbGllIG5leHQgdG8gZWFjaCBvdGhlciBvbiB0aGUgY29sb3VyIHdoZWVsIGFyZSBjYWxsZWQgIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygia2siLCBbX3ZtLl92KCJhbmFsb2dvdXMgY29sb3VycyIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiLiBGb3IgaW5zdGFuY2UsIGJsdWUtZ3JlZW4sIGJsdWUsIGFuZCBibHVlLXZpb2xldCBhcmUgYW5hbG9nb3VzIGNvbG91cnMuIENvbG91ciBhcHBlYWwgaXMgYWxzbyBpbXBvcnRhbnQuIEFydGlzdHMgYXBwcmVjaWF0ZSB0aGF0IGJsdWUsIGdyZWVuLCBhbmQgdmlvbGV0IGFyZSBjb29sIGNvbG91cnMgd2hpbGUgcmVkIGFuZCBvcmFuZ2UgYXJlIGNvbnNpZGVyZWQgd2FybSBjb2xvdXJzLiBXaGVuIGNob29zaW5nIGNvbG91ciBmb3IgaW5zdHJ1Y3Rpb25hbCBtYXRlcmlhbHMsIGNvbnNpZGVyIHRoZSBlbW90aW9uYWwgcmVzcG9uc2UgdGhhdCB5b3UgYXJlIHNlZWtpbmcuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygia2siLCBbX2MoImkiLCBbX3ZtLl92KCJBcnJhbmdlbWVudCIpXSldKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFlvdSBzaG91bGQgYXJyYW5nZSBpdGVtcyB3aXRoaW4gdGhlIHBhdHRlcm4gYXMgdmlld2VycyBhc3N1bWUgdGhhdCBlbGVtZW50cyBjbG9zZSB0b2dldGhlciBhcmUgcmVsYXRlZCBhbmQgdGhvc2UgdGhhdCBhcmUgZmFyIGFwYXJ0IGFyZSB1bnJlbGF0ZWQuIElmIGEgZGlzcGxheSBpbmNsdWRlcyB2ZXJiYWwgbGFiZWxzIGZvciB0aGUgcGljdHVyZSBlbGVtZW50cywgY29ubmVjdCB0aGUgcmVsYXRlZCB3b3JkcyBhbmQgcGljdHVyZXMgY2xlYXJseS4iCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW19jKCJpIiwgW192bS5fdigiQ29uc2lzdGVuY3kiKV0pXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBJZiB5b3UgYXJlIHBsYW5uaW5nIGEgc2VyaWVzIG9mIGRpc3BsYXlzIHN1Y2ggYXMgYSBzZXQgb2Ygb3ZlcmhlYWQgdHJhbnNwYXJlbmNpZXMgb3IgUG93ZXJQb2ludCBzbGlkZXMsIHlvdSBzaG91bGQgYmUgY29uc2lzdGVudCBpbiB0aGUgYXJyYW5nZW1lbnQgb2YgZWxlbWVudHMuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImgzIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImgzLXJlc3BvbnNpdmUgdGV4dC1qdXN0aWZ5IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiaXRlbS0zLTIiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjQuMy4yIFZpc3VhbCBwbGFubmluZyB0b29scyIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1sLTUiIH0sIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgV2hlbiB5b3UgcGxhbiBhbmQgZGVzaWduIHlvdXIgdmlzdWFscyB5b3UgY291bGQgdXNlIHZpc3VhbCBwbGFubmluZyB0b29scyBzdWNoIGFzICIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImtrIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAic3RvcnkgYm9hcmRpbmcgYW5kIGxldHRlcmluZyBzdGVuY2lscyBhbmQgZ3VpZGVzLiIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgU3Rvcnlib2FyZGluZyBpcyBhIHRlY2huaXF1ZSBib3Jyb3dlZCBmcm9tIGZpbG0gYW5kIHZpZGVvIHByb2R1Y3Rpb24gdGhhdCBhbGxvd3MgeW91IHRvIGNyZWF0aXZlbHkgYXJyYW5nZSBhbmQgcmVhcnJhbmdlIHlvdXIgc2tldGNoZXMuIEluIHN0b3J5Ym9hcmRpbmcsIGEgc2tldGNoIG9yIGEgc2ltcGxlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2aXN1YWxzIHlvdSBwbGFuIHRvIHVzZSBpcyBwdXQgb24gYSBjYXJkIG9yIGEgcGllY2Ugb2YgcGFwZXIgYWxvbmcgd2l0aCB0aGUgbmFycmF0aW9uLiBBZnRlciBhIHNlcmllcyBvZiBjYXJkcyBoYXZlIGJlZW4gZGV2ZWxvcGVkLCB0aGV5IGFyZSBwbGFjZWQgaW4gYSByb3VnaCBzZXF1ZW5jZSBvbiBhIGZsYXQgc3VyZmFjZSBvciBvbiBhIHN0b3J5Ym9hcmQgaG9sZGVyLiBZb3UgY2FuIHVzZSBzbWFsbCBwaWVjZXMgb2YgcGFwZXIgdG8gY3JlYXRlIHlvdXIgc3Rvcnlib2FyZC4gVGhlIGluZGl2aWR1YWwgc3Rvcnlib2FyZCBjYXJkcyBvciBwYXBlcnMgY2FuIHRoZW4gYmUgZGl2aWRlZCBpbnRvIGFyZWFzIHRvIGFjY29tbW9kYXRlIHRoZSB2aXN1YWxzLCBuYXJyYXRpb24gYW5kIHByb2R1Y3Rpb24gbm90ZXMuIFRoZSBmb3JtYXQgb2YgYSBzdG9yeWJvYXJkIHNob3VsZCBmaXQgeW91ciBuZWVkIGFuZCBwdXJwb3NlLiIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBBIHdpZGUgdmFyaWV0eSBvZiBsZXR0ZXJpbmcgdGVjaG5pcXVlcyBmb3IgdmlzdWFscyBleGlzdC4gVGhlIHNpbXBsZXN0IGlzIGZyZWVoYW5kIGxldHRlcmluZyB3aXRoIG1hcmtlcnMgYW5kIGZlbHQtdGlwIHBlbnMgd2hpY2ggY29tZSBpbiBhbiBhcnJheSBvZiBjb2xvdXJzLiBMZXR0ZXJzIGNhbiBhbHNvIGJlIGN1dCBmcm9tIGNvbnN0cnVjdGlvbiBwYXBlciBvciBvdGhlciBtYXRlcmlhbHMuIFByZS0gY3V0IGxldHRlcnMgYXJlIGF2YWlsYWJsZSBpbiBzdGF0aW9uZXJ5IGFuZCBvZmZpY2Ugc3VwcGx5IHN0b3Jlcy4gVGhlc2UgbGV0dGVycyBhcmUgZWFzeSB0byB1c2UgYXMgdGhleSBjb21lIHdpdGggYW4gYWRoZXNpdmUgYmFja2luZy4gWW91IGNvdWxkIGFsc28gcHVyY2hhc2UgbGV0dGVyaW5nIGd1aWRlcyBmcm9tIHN0YXRpb25lcnkgc3RvcmVzLiBEZXNrdG9wIHB1Ymxpc2hpbmcgc3lzdGVtcyBhbHNvIGZyZXF1ZW50bHkgdXNlIGxldHRlcmluZyBpbiB2YXJpb3VzIHN0eWxlcyBhbmQgc2l6ZXMuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImgzIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImgzLXJlc3BvbnNpdmUgdGV4dC1qdXN0aWZ5IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiaXRlbS0zLTMiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjQuMy4zIEV4YW1wbGVzIG9mIHZpc3VhbHMgdGhhdCB5b3UgY291bGQgZGVzaWduIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWwtNSB0ZXh0LWp1c3RpZnkiIH0sIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW192bS5fdigiR3JhcGhpYyBtYXRlcmlhbHMiKV0pLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgR3JhcGhpY3MgaXMgYW4gYXJ0IGZvcm0gd2hlcmUgaWRlYXMgYXJlIGV4cHJlc3NlZCBpbiBkaWFncmFtcywgcGljdHVyZXMsIGdyYXBocywgY2hhcnRzLCBjb2xsYWdlcyBhbmQgcG9zdGVycy4gTXVjaCBvZiBncmFwaGljIG1hdGVyaWFsIGlzIG1hZGUgZm9yIGRpc3BsYXkgb24gYnVsbGV0aW4gYm9hcmRzLCBmbGFubmVsIGJvYXJkcyBhbmQgY2hhbGtib2FyZHMuIElmIHlvdSB0aGluayBhYm91dCBpdCBoYXJkIGVub3VnaCwgeW91IHdpbGwgcmVhbGl6ZSB0aGF0IGdyYXBoaWNzIGFyZSBwYXJ0IG9mIG91ciBldmVyeWRheSBsaWZlLiBBZnRlciBhbGwgd2VkbyBzZWUgZ3JhcGhpY3Mgb24gdGhlIGJpbGxib2FyZHMsIG9uIFRWIGNvbW1lcmNpYWxzLCBvbiBjbG90aGVzLCBldGMuIEdyYXBoaWNzIGF0dGVtcHQgdG8gZXhwcmVzcyBvciBjb252ZXkgYSB0aG91Z2h0LCBpbXByZXNzaW9uIG9yIHBvaW50IG9mIHZpZXcuIE11Y2ggb2YgdGhlIGdyYXBoaWMgbWVkaWEgaXMgbm90IG9ubHkgdXNlZnVsIGFzIG1vdGl2YXRpb25hbCBtYXRlcmlhbHMgYnV0IGFsc28sIHlvdSBhbmQgeW91ciBzdHVkZW50cyBjYW4gZWFzaWx5IGNyZWF0ZSB0aGVtLiIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBQb3N0ZXJzIGluIHBhcnRpY3VsYXIgYXJlIHZlcnkgZWZmZWN0aXZlIGluIHByb21vdGluZyBzY2hvb2wgYWN0aXZpdGllcywgY2FtcGFpZ25zIGFuZCBzcGVjaWFsIGV2ZW50cy4gWW91IGNvdWxkIGZvbGxvdyB0aGUgZGVzaWduIHByb2NlZHVyZSB0aGF0IHdlIGhhdmUgZGlzY3Vzc2VkIGVhcmxpZXIgb24gdG8gZGVzaWduIHlvdXIgb3duIHBvc3RlcnMuIFJlbWVtYmVyIHRoYXQgcG9zdGVycyByZWx5IG9uIHVzZSBvZiBzeW1ib2xzIHRvIGV4cHJlc3MgY2VydGFpbiBpZGVhcywgbGV0dGVyaW5nIGFuZCBjb2xvdXIuIE9uZSBmb3JtIG9mIHBvc3RlciB0aGF0IHlvdSBjb3VsZCBpbnZvbHZlIHlvdXIgc3R1ZGVudHMgaW4gY3JlYXRpbmcgIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygia2siLCBbX2MoImkiLCBbX3ZtLl92KCJpcyBjb2xsYWdlIildKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIi4gQSBjb2xsYWdlIGlzIGFuIGFydCBmb3JtIHRoYXQgdXNlcyBsYXllcnMgYW5kIHRleHR1cmVzIG9mIG1hdGVyaWFscyB0byBwb3J0cmF5IGEgc3ltYm9saWMgcGljdHVyZS4gTWF0ZXJpYWxzIGZvciBtYWtpbmcgY29sbGFnZSBjb3VsZCBiZSBvYnRhaW5lZCBmcm9tIHBpY3R1cmVzLCBjbG90aCwgbmV3c3BhcGVycywgbWFnYXppbmVzIGV0Yy4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX3ZtLl9tKDE4KQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJoMyIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoMy1yZXNwb25zaXZlIHRleHQtanVzdGlmeSIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIml0ZW0tMy00IiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCI0LjMuNCBEZXNpZ25pbmcgdGV4dCAiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl9tKDE5KSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJoMyIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoMy1yZXNwb25zaXZlIHRleHQtanVzdGlmeSIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIml0ZW0tMy01IiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCI0LjMuNSBDaGFsa2JvYXJkICIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1sLTUgdGV4dC1qdXN0aWZ5IiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFRoZSBjaGFsa2JvYXJkIGlzIHByb2JhYmx5IHRoZSBtb3N0IHdpZGVseSB1c2VkIG1lZGlhIGRpc3BsYXkgaW4gdGhlIGNsYXNzcm9vbSBzaW5jZSBldmVuIHRoZSBtb3N0IGRpc2FkdmFudGFnZWQgc2Nob29scyBhdCBsZWFzdCBoYXMgYSBjaGFsa2JvYXJkLiBJdCBpcyBhbHNvIHRoZSBlYXNpZXN0IG1lZGlhIHRvIHVzZSBlaXRoZXIgZm9yIHdyaXRpbmcgb3IgZm9yIGRpc3BsYXlpbmcgb3RoZXIgdHlwZXMgb2YgbWVkaWEuIFRvIG1ha2UgdGhlIGNoYWxrYm9hcmQgYW4gZWZmZWN0aXZlIGluc3RydWN0aW9uYWwgbWVkaWEgYWxzbyByZXF1aXJlcyBwbGFubmluZywgYW5kIGVmZmVjdGl2ZSBjaGFsa2JvYXJkIHRlY2huaXF1ZXMgcmVxdWlyZSBwcmFjdGljZS4gVXNlIG9mIHRoZSBjaGFsa2JvYXJkIGlzIG5vdCBsaWtlbHkgdG8gbWFrZSBhIHBvb3IgdGVhY2hlciBhIGdvb2QgdGVhY2hlciwgYnV0IGl0cyBhcHByb3ByaWF0ZSB1c2UgY2FuIG1ha2UgYm90aCBwb29yIHRlYWNoZXJzIGFuZCBnb29kIHRlYWNoZXJzIGJldHRlci4iCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW192bS5fdigiUGxhbm5pbmcgZm9yIGNoYWxrYm9hcmQgVXNlIildKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEJlZm9yZSB5b3UgdXNlIHRoZSBjaGFsa2JvYXJkIGFzayB5b3Vyc2VsZiB0aGVzZSBxdWVzdGlvbnM7ICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fbSgyMCksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFRoZXJlZm9yZSwgdGhpbmsgYmVmb3JlIHlvdSB3cml0ZSBvciBkcmF3IG9uIHRoZSBjaGFsa2JvYXJkIHRvIGNvbnNpZGVyIHdoYXQgeW91IHdhbnQgdG8gc2hvdywgYW5kIGhvdyBiZXN0IHRvIHByZXNlbnQgaXQuIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlJvbGUgb2YgdGhlIGNoYWxrYm9hcmQgZHVyaW5nIGluc3RydWN0aW9uIikKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBUaGUgY2hhbGtib2FyZCBjYW4gYmUgdXNlZCB0byBwcmVwYXJlIGRyYXdpbmdzIG9yIHdyaXRpbmcuIFlvdSBjYW4gZHJhdyB5b3VyIGRpYWdyYW1zIG9yIGlsbHVzdHJhdGlvbnMgaW4gYWR2YW5jZSBiZWZvcmUgdGhlIGNsYXNzIGNvbW1lbmNlcyBhbmQgdGhlbiBrZWVwIGl0IGNvdmVyZWQgYW5kIG9ubHkgcmV2ZWFsIGl0IHdoZW4geW91IHdhbnQgdG8gdGFsayBhYm91dCB0aGF0IHBhcnRpY3VsYXIgY29udGVudCBvciByZWZlciB0byB0aGUgZGlhZ3JhbSBmb3IgaWxsdXN0cmF0aW9uLiBDb2xvdXIgc2hvdWxkIGFsc28gYmUgdXNlZCBhcyBhIHdheSBvZiBtb3RpdmF0aW5nIHN0dWRlbnRzIGFuZCBoZWxwaW5nIHRvIGVtcGhhc2l6ZSBzcGVjaWZpYyBhc3BlY3RzIG9mIHRoZSBsZXNzb24uICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoIkltcHJvdmluZyB5b3VyIHVzZSBvZiB0aGUgY2hhbGtib2FyZCIpXSksCiAgICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIEFsd2F5cyB1c2UgYSBjbGVhbiBjaGFsa2JvYXJkIHNpbmNlIGEga2V5IGVsZW1lbnQgdG8gZ29vZCB2aXNpYmlsaXR5IGlzIGNvbnRyYXN0LiBUaGUgY2xlYXJlciB0aGUgYm9hcmQsIHRoZSBiZXR0ZXIgdGhlIHZpc2liaWxpdHkgb2Ygd2hhdCBpcyB3cml0dGVuLiAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgTWFrZSB5b3VyIGNoYWxrYm9hcmQgd29yayByZWFkYWJsZS4gV2hhdGV2ZXIgeW91IHdyaXRlIHNob3VsZCBiZSByZWFkIGV2ZW4gZnJvbSB0aGUgYmFjayBvZiB0aGUgY2xhc3MuIFRoaXMgaXMgYWNoaWV2ZWQgYnkgcHJvZHVjaW5nIGJvbGQsIGNsZWFyIGxpbmVzIGFuZCBsZXR0ZXIgY2hhcmFjdGVycy4gU3BhY2luZyBpcyBjcml0aWNhbCBpbiBhY2hpZXZpbmcgcmVhZGFibGUgd3JpdGluZy4gU3BhY2luZyByZWZlcnMgdG8gcmVndWxhdGlvbiBvZiBkaXN0YW5jZSBiZXR3ZWVuIGVsZW1lbnRzIG9mIGEgbGV0dGVyLCBsZXR0ZXJzIGluIGEgd29yZCwgd29yZHMgaW4gYSBsaW5lLCBhbmQgYmV0d2VlbiBzdWNjZXNzaXZlIGxpbmVzIGluIGEgcGllY2Ugb2Ygd3JpdGluZy4gU3BhY2luZyBkZXRlcm1pbmVzIHRoZSBzaGFwZSBvZiB0aGUgbGV0dGVycy4gVG8gZW5zdXJlIGdvb2QsIGxlZ2libGUgbGV0dGVycywgdGhlIHNwYWNlIGJldHdlZW4gdGhlIGRvd253YXJkIHN0cm9rZXMgb2YgbGV0dGVycyBsaWtlICIKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgW19jKCJrayIsIFtfdm0uX3YoInUiKV0pXSwgMSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIsIGFuZCB0aGUgYnJlYWR0aCBvZiBsZXR0ZXJzIGxpa2UgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImkiLCBbX2MoImtrIiwgW192bS5fdigibyIpXSldLCAxKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBtdXN0IGhhdmUgdW5pZm9ybSBhcHBlYXJhbmNlLiAiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgVGhlIHNwYWNpbmcgb2YgbGV0dGVyIGVsZW1lbnRzIHNob3VsZCBiZSBjb25zdGFudC4gTGV0dGVycyBhbmQgdGhlIHNwYWNpbmcgYmV0d2VlbiB0aGUgbGV0dGVycyBzaG91bGQgYmUgdW5pZm9ybSBhbmQgd2hlbiBmb3JtaW5nIGEgd29yZCwgbGV0dGVycyBzaG91bGQgYmUgd3JpdHRlbiBjbG9zZSB0b2dldGhlciB0byBlbnN1cmUgbGVnaWJpbGl0eS4gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIExlZ2liaWxpdHkgb2Ygd29yZHMgaXMgYWZmZWN0ZWQgYnkgZXhjZXNzaXZlbHkgc21hbGwgc3BhY2VzLiBTdWNjZXNzaXZlIGxpbmVzIG9mIHdyaXRpbmcgbXVzdCBhbHNvIGJlIHByb3Blcmx5IHNwYWNlZCBmb3IgZ29vZCBsZWdpYmlsaXR5LiAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgR29vZCBzcGFjaW5nIGluIHdyaXRpbmcgcmVxdWlyZXMgY29uc2Npb3VzIGF0dGVudGlvbiBhbmQgcmVndWxhciBwcmFjdGljZSB1bnRpbCBpdCBiZWNvbWVzIGEgaGFiaXQuICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBIYXZlIGEgcGxhbiBmb3IgeW91ciBjaGFsa2JvYXJkIHdvcmsgYW5kIGRvIG5vdCB3cml0ZSBhbGwgb3ZlciB0aGUgYm9hcmQuIE9ubHkgdXNlIHRoZSBjaGFsa2JvYXJkIHRvIHJlY29yZCBpbXBvcnRhbnQgaW5mb3JtYXRpb24gdG8gZW1waGFzaXplIHRoZSBrZXkgcG9pbnRzIGluIHRoZSBsZXNzb24uICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBVc2UgYSBwb2ludGVyIHRvIGRpcmVjdCB0aGUgc3R1ZGVudHMnIGF0dGVudGlvbiB0byBzcGVjaWZpYyBpdGVtcyB0aGF0IHlvdSBoYXZlIHdyaXR0ZW4gb24gdGhlIGNoYWxrYm9hcmQuICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBVc2UgbWVjaGFuaWNhbCBsZXR0ZXJpbmcgZ3VpZGVzIHN1Y2ggYXMgcnVsZXJzLCBjb2xvdXJlZCBjaGFsaywgb3IgdGVtcGxhdGVzIChyZWFkaWx5IGRlc2lnbmVkIHNoYXBlcykuICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBBbHdheXMgd2FsayB0byB0aGUgYmFjayBvZiB5b3VyIGNsYXNzIGFuZCBjb25maXJtIHRoYXQgd2hhdCB5b3UgaGF2ZSB3cml0dGVuIG9uIHRoZSBib2FyZCBpcyBsZWdpYmxlIGVub3VnaCBhbmQgd2VsbCBvcmdhbml6ZWQuICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgIF92bS5fbSgyMSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiaDMiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaDMtcmVzcG9uc2l2ZSB0ZXh0LWp1c3RpZnkiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJpdGVtLTMtNiIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiNC4zLjYgV2hpdGVib2FyZCIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX20oMjIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImgzIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImgzLXJlc3BvbnNpdmUgdGV4dC1qdXN0aWZ5IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiaXRlbS0zLTciIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjQuMy43IERlc2lnbmluZyBvdmVyaGVhZCB0cmFuc3BhcmVuY2llcyIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1sLTUgdGV4dC1qdXN0aWZ5IiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBQcm9jZWR1cmUiKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIEl0IGlzIGFkdmlzYWJsZSB0byBmb2xsb3cgYSBwcmFjdGljYWwgcHJvY2VkdXJlIHdoZW4gZGVzaWduaW5nIG92ZXJoZWFkIHRyYW5zcGFyZW5jaWVzLiBUaGUgcHJvY2VkdXJlIGluY2x1ZGVzOiAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBGb2xsb3cgdGhlIGRlc2lnbiBwcmluY2lwbGVzIHByZXNlbnRlZCB0byB5b3UgdW5kZXIgdGhlIHN1Yi10b3BpYyBvbiBkZXNpZ25pbmcgdmlzdWFscy4gIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBBc3NlbWJsZSB0aGUgZWxlbWVudHMuIFdoZW4geW91IGFyZSBjaG9vc2luZyBlbGVtZW50cywgcmVtZW1iZXIgdGhhdCB2aWV3ZXJzIHdpbGwgc3RvcCByZWFkaW5nIHRleHQgb25jZSB0aGV5IGtub3cgd2hhdCBpdCBzYXlzLCBidXQgd2lsbCBjb250aW51ZSBsb29raW5nIGF0IGlsbHVzdHJhdGlvbnMsIGVzcGVjaWFsbHkgd2hlbiB0aGV5IGFyZSB0YWxraW5nIGFib3V0IHRoZW0uIFRoZXJlZm9yZSwgdXNlIG1vcmUgZ3JhcGhpY2FsIGVsZW1lbnRzIHRoYW4gdGV4dCBpbiB5b3VyIHRyYW5zcGFyZW5jaWVzIGFuZCBzdXBwbHkgdmVyYmFsIGV4cGxhbmF0aW9ucyB5b3Vyc2VsZi4gSW5jbHVkZSB0ZXh0IGZvciBrZXkgaWRlYXMgb25seS4gSWYgeW91IGFyZSB1c2luZyB3cml0ZS1vbiB0cmFuc3BhcmVuY2llcywgbWFrZSBzdXJlIHRoYXQgeW91IGxlYXZlIGVub3VnaCBtYXJnaW5zIGZvciB0aGUgZnJhbWUuICIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICIgQ2hvb3NlIGJhY2tncm91bmQgYW5kIHVuZGVybHlpbmcgcGF0dGVybi4gVGhlIHRpdGxlIGFyZWEgc2hvdWxkIGJlIGF0IHRoZSB0b3Agd2hlcmUgdmlld2VycyBiZWdpbiB0byBzY2FuIHRoZSBkaXNwbGF5LiBDb250ZW50IGFyZWEgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMSBvciAyIGltYWdlcyBhdCBtb3N0IGZvciBncmFwaGljYWwgZGlzcGxheXMgYW5kIGF0IG1vc3QgNiBidWxsZXQgcG9pbnRzIGZvciB0ZXh0IGRpc3BsYXkuIElmIHlvdSBhcmUgdXNpbmcgY29tcHV0ZXIgZ2VuZXJhdGVkIHRyYW5zcGFyZW5jaWVzLCB5b3UgY291bGQgc2VsZWN0IGEgdGVtcGxhdGUgZm9yIHRoZSB1bmRlcmx5aW5nIHBhdHRlcm4uICIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAiIEFycmFuZ2UgdGhlIGVsZW1lbnRzLiBTaW5jZSB0aGUgZWxlbWVudHMgaW4gYSB0cmFuc3BhcmVuY3kgc2hvdWxkIGJlIGZhaXJseSBsYXJnZSBpbiBvcmRlciB0byBwcm9qZWN0IHdlbGwsIHRoZSBjaGFsbGVuZ2UgaXMgdG8gZml0IHRoZSBlbGVtZW50cyBpbnRvIHRoZSBhdmFpbGFibGUgc3BhY2UuIEluIGNhc2UgeW91IGhhdmUgaW5mb3JtYXRpb24gdGhhdCBjb3VsZCBiZSBwcmVzZW50ZWQgaW4gYSBjZXJ0YWluIHNlcXVlbmNlLCB5b3UgbWlnaHQgY29uc2lkZXIgZGVzaWduaW5nICIKICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW19jKCJpIiwgW192bS5fdigib3ZlcmxheXMiKV0pXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAiIHdoZXJlIHRoZSBib3R0b20gb3IgdGhlIGZpcnN0IHRyYW5zcGFyZW5jeSBzZXJ2ZXMgYXMgdGhlIGJhc2UgYW5kIGFueSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGJ1aWxkcyBvbiB0byBpdC4gIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiIENoZWNrIGFuZCByZXZpc2UuIFByYWN0aWNlIHlvdXIgdHJhbnNwYXJlbmNpZXMgYW5kIGNoZWNrIG9uIHZpc2liaWxpdHkgb2YgeW91ciBlbGVtZW50cy4gIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiaDMiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaDMtcmVzcG9uc2l2ZSB0ZXh0LWp1c3RpZnkiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJpdGVtLTMtOCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiNC4zLjggRGVzaWduIG9mIFBvd2VyIFBvaW50IHByZXNlbnRhdGlvbnMiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtbC01IHRleHQtanVzdGlmeSIgfSwgWwogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICIgSXQgaXMgaW1wb3J0YW50IHRvIGtub3cgaG93IHlvdSBjYW4gZGVzaWduIFBvd2VyIFBvaW50IHByZXNlbnRhdGlvbnMgbm93YWRheXMgc2luY2UgdGhlIHdvcmxkIGhhcyBiZWNvbWUgZGlnaXRhbGl6ZWQuIFRoZSBmb2xsb3dpbmcgcG9pbnRzIHdpbGwgaGVscCB5b3UgZ2V0IG9yZ2FuaXplZC4gIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygia2siLCBbX3ZtLl92KCIxLiBQbGFuIHlvdXIgY29udGVudCBmaXJzdCIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBNYW55IHBlb3BsZSBzdGFydCB0aGUgcHJvY2VzcyBvZiBjcmVhdGluZyBhIHByZXNlbnRhdGlvbiBpbiBQb3dlclBvaW50IGJ5IGVudGVyaW5nIHRleHQgb24gdGhlIHNsaWRlcy4gVGhpcyBpcyBub3QgYSBnb29kIGlkZWEuIFRoZSBjb250ZW50IHNob3VsZCBkcml2ZSB0aGUgZGVzaWduLiBTbyB0aGUgbW9zdCBpbXBvcnRhbnQgcmVjb21tZW5kYXRpb24gaXMgdG8gcGxhbiB5b3VyIGNvbnRlbnQgZmlyc3QuIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEFsd2F5cyBzdGFydCB5b3VyIHByZXNlbnRhdGlvbiBvbiBwYXBlciBvciB3b3JkIHByb2Nlc3NvciAtIGRyYXcgeW91ciBpZGVhcyBhbmQgbGluayByZWxhdGlvbnNoaXBzIGJldHdlZW4gY29uY2VwdHMuIEFzayB5b3Vyc2VsZiB0aGVzZSBpbXBvcnRhbnQgcXVlc3Rpb25zIGJlZm9yZSBjcmVhdGluZyB5b3VyIHByZXNlbnRhdGlvbi4iCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX20oMjMpCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiMi4gVXNlIGEgcGxhaW4gYmFja2dyb3VuZCBhbmQgcmVtb3ZlIGFueSB1bm5lY2Vzc2FyeSBkZXRhaWwiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgV2hlbiBpdCBjb21lcyB0byBzbGlkZSBkZXNpZ24sIHlvdSBzaG91bGQgbm90IHRoaW5rIG9mIGRlY29yYXRpb24sIGJ1dCBvZiBjb21tdW5pY2F0aW9uLiBFdmVyeXRoaW5nIHlvdSBhZGQgdG8geW91ciBzbGlkZXMgc2hvdWxkIGFkZCB2YWx1ZSB0byB0aGUgbWVzc2FnZSB5b3UgYXJlIGNvbW11bmljYXRpbmcuIFJlbW92aW5nIGV4dHJhbmVvdXMgaW5mb3JtYXRpb24gZnJvbSBhIHNjcmVlbiBhY3R1YWxseSBpbmNyZWFzZXMgbGVhcm5pbmcuIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFtfdm0uX3YoIjMuIE9uZSBpZGVhIHBlciBzbGlkZSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFVzZSBlYWNoIHNsaWRlIHRvIGV4cHJlc3Mgb25lIGlkZWEuIFlvdSBjYW4gY29tcGxldGVseSB0cmFuc2Zvcm0geW91ciBwcmVzZW50YXRpb24gZnJvbSBib3JpbmcgYnVsbGV0cyB0byBoaWdoIGltcGFjdCB2aXN1YWxzIGJ5IHB1dHRpbmcgb25lIHBvaW50IG9uIGEgc2xpZGUuIFNvbWV0aGluZyBhcyBzaW1wbGUgYXMgaGF2aW5nIG9ubHkgb25lIG1haW4gaWRlYSBwZXIgc2xpZGUgbWFrZXMgYSBiaWcgZGlmZmVyZW5jZS4gRmV3ZXIgd29yZHMgb24gZWFjaCBzbGlkZSB3aWxsIGF0dHJhY3QgbW9yZSBhdHRlbnRpb24gYW5kIGNyZWF0ZSBhIGxhc3RpbmcgaW1wYWN0LiIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygia2siLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgNC4gU3VwcG9ydCB0aGUgaGVhZGxpbmUgd2l0aCBncmFwaGljIGV2aWRlbmNlIikKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEluc3RlYWQgb2YgYnVsbGV0cywgc3VwcG9ydCB5b3VyIHBvaW50cyB3aXRoIGdyYXBoaWMgZXZpZGVuY2UuIFRoaXMgY2FuIGluY2x1ZGUgIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoInBob3RvcywgaW1hZ2VzLCBjaGFydHMgYW5kIGRpYWdyYW1zIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIuIFNheSB0aGUgd29yZHMgYW5kIHB1dCB0aGUgdmlzdWFscyBvbiB5b3VyIHNsaWRlcy4gU3VwcG9ydCB5b3VyIHBvaW50cyB3aXRoIGNyZWF0aXZlIGFuZCByZWxldmFudCBpbWFnZXMuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fbSgyNCksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFtfdm0uX3YoIjUuIFlvdSBkb24ndCBhbHdheXMgbmVlZCBhIHNsaWRlIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgTm90IGV2ZXJ5IHBvaW50IGluIHlvdXIgcHJlc2VudGF0aW9uIG5lZWRzIGEgc2xpZGUuIFlvdSBvbmx5IG5lZWQgYSB2aXN1YWwgYWlkIGluIGEgcHJlc2VudGF0aW9uIGlmIHlvdSB3b3VsZCBuZWVkIG9uZSBpbiBjb252ZXJzYXRpb24uIFNsaWRlcyBzaG91bGQgYmUgcHJvamVjdGVkIG9ubHkgd2hlbiB0aGV5IHNlcnZlIHRoZSBwcmVzZW50YXRpb24uIFdoZW4geW91IGFyZSBub3Qgc2hvd2luZyBhIHNsaWRlLCBpbnNlcnQgYSBwbGFpbiBibGFjayBzbGlkZSBpbnRvIHlvdXIgc2xpZGVzaG93LiIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBGb3IgZXhhbXBsZSB5b3UgY2FuIHVzZSBmbGlwIGNoYXJ0cyB3aXRoIG9yIHdpdGhvdXQgUG93ZXJQb2ludDsgZmxpcCBjaGFydHMgY2FuIGJlIHVzZWQgdG8gc2tldGNoIG91dCBhbiBpZGVhLCBnZXQgaW5wdXQgZnJvbSB0aGUgYXVkaWVuY2Ugb3IgcHJvdmlkZSBhIGdyb3VwIGFjdGl2aXR5IHRvIGtlZXAgYSBwcmVzZW50YXRpb24gbGl2ZWx5LiBJbiB0aGlzIGNhc2UsIHRoZXJlIGlzIG1vdmVtZW50LCB0aGVyZSBpcyBpbnRlcmFjdGlvbiwgdGhlcmUgaXMgcHJvYmxlbSBzb2x2aW5nLCBhbmQgdGhlIGFjdGl2aXR5IGlzIHNwb250YW5lb3VzIGFuZCBjcmVhdGVkIG9uIHRoZSBzcG90LiIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygia2siLCBbX3ZtLl92KCI2LiBQdXQgZGV0YWlsIGluIHRoZSBoYW5kb3V0cyIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIENyZWF0ZSBoYW5kb3V0cyB0aGF0IGFyZSBkaXN0cmlidXRlZCBhZnRlciB0aGUgcHJlc2VudGF0aW9uLiBZb3VyIGhhbmRvdXRzIGFyZSB0aGUgcmVwb3NpdG9yeSBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24uICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImgzIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImgzLXJlc3BvbnNpdmUgdGV4dC1qdXN0aWZ5IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiaXRlbS0zLTkiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjQuMy45IERlc2lnbmluZyBhdWRpbyBtZWRpYSAiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl9tKDI1KSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJoMyIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoMy1yZXNwb25zaXZlIHRleHQtanVzdGlmeSIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIml0ZW0tMy0xMCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiNC4zLjEwIERlc2lnbmluZyBhIFBPRENBU1QiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtbC01IHRleHQtanVzdGlmeSIgfSwgWwogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICIgQSBwb2RjYXN0IGlzIGFuIGF1ZGlvIGJsb2cgcG9zdCBjcmVhdGVkIGJ5IHJlY29yZGluZyB5b3VyIHZvaWNlIG9yIG90aGVyIHNvdW5kLCB1cGxvYWRpbmcgdGhlIHJlY29yZGluZyB0byB0aGUgSW50ZXJuZXQsIGFuZCBwdWJsaXNoaW5nIGl0IG9uIHlvdXIgYmxvZy4gVGhlIGZpcnN0IHN0ZXAgdGhlcmVmb3JlIGlzIGZvciB5b3UgdG8gaGF2ZSBjcmVhdGVkIGEgYmxvZy4gVmlzaXRvcnMgdG8geW91ciBibG9nIHNpbXBseSBzZWxlY3QgYSBsaW5rIG9uIHlvdXIgYmxvZywgdHVybiBvbiB0aGVpciBjb21wdXRlciBzcGVha2VycyBhbmQgbGlzdGVuIHRvIHlvdXIgcG9kY2FzdCAob3IgYXVkaW8gYmxvZyBwb3N0KSByYXRoZXIgdGhhbiByZWFkaW5nIHlvdXIgcG9zdC4gIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygia2siLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJXaGF0IHlvdSBuZWVkIGluIG9yZGVyIHRvIGNyZWF0ZSBhIFBvZGNhc3QiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF92bS5fbSgyNikKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uX20oMjcpLAogICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgIF92bS5fbSgyOCkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImgyLXJlc3BvbnNpdmUgdGV4dC1qdXN0aWZ5IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiaXRlbS00IiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCI0LjQgVXRpbGl6aW5nIE1hdGVyaWFscyBkdXJpbmcgSW5zdHJ1Y3Rpb24iKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl9tKDI5KSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJoMyIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoMy1yZXNwb25zaXZlIHRleHQtanVzdGlmeSIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIml0ZW0tNC0xIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCI0LjQuMSBQcmludGVkIG1hdGVyaWFscyIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1sLTUgdGV4dC1qdXN0aWZ5IiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEluIHRoaXMgc2VjdGlvbiB3ZSBhcmUgZ29pbmcgdG8gZGlzY3VzcyBob3cgd2UgY2FuIHV0aWxpemUgcHJpbnRlZCBtYXRlcmlhbHMgZWZmZWN0aXZlbHkgZHVyaW5nIGluc3RydWN0aW9uLiBBcyB3ZSBtZW50aW9uZWQgaW4gVW5pdCAyLCBwcmludGVkIG1hdGVyaWFscyBhcmUgYW1vbmcgdGhlIG1vc3QgY29tbW9ubHkgdXNlZCBmb3JtIG9mIGluc3RydWN0aW9uYWwgbWF0ZXJpYWxzIGluIG1vc3QgY2xhc3Nyb29tcy4gSW4gc3BpdGUgb2YgdGhlIHJlY2VudCBwdWJsaWMgZmFzY2luYXRpb24gd2l0aCBuZXcgZWxlY3Ryb25pYyBtZWRpYSwgaXQgaXMgdW5saWtlbHkgdGhhdCBwcmludGVkIG1hdGVyaWFscyB3aWxsIGV2ZXIgYmUgZWxpbWluYXRlZCBhcyBhIHZlaGljbGUgb2YgaW5zdHJ1Y3Rpb24gYW5kIGl0IHdpbGwgYWx3YXlzIGhhdmUgYW4gaW1wb3J0YW50IHJvbGUgdG8gcGxheSBpbiBpbnN0cnVjdGlvbi4gQWRtaXR0ZWRseSwgdGhlIGN1cnJlbnQgc3ByZWFkaW5nIHRyZW5kIHRvd2FyZHMgZWxlY3Ryb25pYyBjb21tdW5pY2F0aW9uIChlLW1haWwgc3lzdGVtcywgRGF0YWJhc2UgTmV0d29ya3MsIGFuZCBXb3JsZCBXaWRlIFdlYiBIeXBlcm1lZGlhIHN1Y2ggYXM7IFBvcnRhYmxlIERvY3VtZW50IEZvcm1hdHMgKFBERiksIGFuZCBIeXBlciBUZXh0IE1haWwgTGFuZ3VhZ2UgKEh0bWwpLCBoYXZlIGp1c3QgYWRkZWQgc2V2ZXJhbCBuZXcgbWVkaWEgb2YgdHJhbnNtaXNzaW9uIGZvciBwcmludGVkIG1lc3NhZ2VzIGFuZCB0aGV5IGhhdmUgYWxzbyBhZGRlZCB0byB0aGUgYW1vdW50IG9mIHJlYWRpbmcgdGhhdCBhIHR5cGljYWwgcGVyc29uIGNhbiBjb3BlIHdpdGggKFJvbWlzem93c2tpLCAxOTg4OjEyOCkuIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFRoZSByb2xlIG9mIHByaW50ZWQgbWF0ZXJpYWxzIGlzIGJlaW5nIGVuaGFuY2VkIGJ5IGluZm9ybWF0aW9uIHJldm9sdXRpb24gYW5kIHRoZSBkYXlzIG9mIHByaW50ZWQgbWVkaWEgYXJlIGZhciBmcm9tIGJlaW5nIG92ZXIuIEhvd2V2ZXIsIHRoaXMgZG9lcyBub3Qgc3VnZ2VzdCB0aGF0IHByaW50ZWQgbWF0ZXJpYWxzIGFyZSB1c2VkIGVmZmVjdGl2ZWx5IGFuZCBlZmZpY2llbnRseSBkdXJpbmcgaW5zdHJ1Y3Rpb24uIEluLWZhY3QsIHF1aXRlIG9mdGVuIGluc3RydWN0b3JzIGFidXNlIHByaW50ZWQgbWF0ZXJpYWxzIGR1cmluZyBpbnN0cnVjdGlvbi4gVGhlIGFidXNlIG9mIHByaW50ZWQgbWF0ZXJpYWxzIHJlc3VsdHMgZnJvbSB0aGUgZWFzZSB3aXRoIHdoaWNoIHByaW50ZWQgbWF0ZXJpYWxzIGNhbiBiZSBvYnRhaW5lZCwgcmVwcm9kdWNlZCBhbmQgY2lyY3VsYXRlZCB3aGljaCBvZnRlbiBsZWFkcyB0byB0aGVpciBleGNlc3NpdmUgYW5kIGluYXBwcm9wcmlhdGUgdXNlIGluIHRoZSBpbnN0cnVjdGlvbmFsIHByb2Nlc3MuIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEl0IGlzIHN0cm9uZ2x5IHJlY29tbWVuZCB0aGF0IHlvdSB1c2UgcHJpbnRlZCBtYXRlcmlhbHMgY29ycmVjdGx5IGR1cmluZyBpbnN0cnVjdGlvbi4gVGVhY2hlcnMgbmVlZCB0byBmb2xsb3cgdGhlIGNvcnJlY3QgcHJvY2VkdXJlIGZvciB1dGlsaXppbmcgaW5zdHJ1Y3Rpb25hbCBtYXRlcmlhbHMuIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIFRoZSBmb2xsb3dpbmcgdHlwZXMgb2YgcHJpbnRlZCBtYXRlcmlhbHM7ICIpLAogICAgICAgICAgICAgICAgICBfYygia2siLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiB0ZXh0IGJvb2tzLCBoYW5kb3V0cywgYXNzaWdubWVudCBzaGVldHMsIGluZGl2aWR1YWxpemVkIHN0dWR5IG1hdGVyaWFscywgd29yZCBwcm9jZXNzZWQgZG9jdW1lbnRzLCBhbmQgd29yayBzaGVldHMgIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiLiBMZXQgdXMgY29uc2lkZXIgZWFjaCBvZiB0aGVzZSB0eXBlcyBpbiBtb3JlIGRldGFpbC4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUgbWwtNSIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW192bS5fdigiVGV4dCBib29rcyIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIC0gVGhlc2UgYXJlIHZlcnNhdGlsZSBhbmQgcHJvdmlkZSByYW5kb20gYWNjZXNzIHRvIHRoZSBtZXNzYWdlIHRoYXQgaXQgY29udGFpbnMgYW5kIHVzZXJzIGFyZSBhYmxlIHRvIGNvbnRyb2wgdGhlIHByb2Nlc3MgYnkgd2hpY2ggdGhleSBnYWluIHRoZSBpbmZvcm1hdGlvbiB0aGF0IHRoZXkgc2Vlay4gVGV4dCBib29rcyBhcmUgcmVsYXRpdmVseSBjaGVhcCBjb21wYXJlZCB0byBvdGhlciB0eXBlcyBvZiBtZWRpYS4gVGhleSBhcmUgYWxzbyBkdXJhYmxlLCBhbmQgZWFzaWx5IGFjY2Vzc2libGUuIFRoZXkgYXJlIHBvcnRhYmxlLCBhbmQgZmFpcmx5IGVjb25vbWljYWwgdG8gYnV5IGFuZCBtYWludGFpbi4gQXMgd2UgbWVudGlvbmVkIGluIFVuaXQgMiwgdGV4dCBib29rcyBjYW4gYmUgdXNlZCBlaXRoZXIgYXMgYmFzaWMgdGV4dCBvciBhcyBjaGllZiBzb3VyY2VzIG9mIGluZm9ybWF0aW9uIGZvciBhIHBhcnRpY3VsYXIgY2xhc3MgbGV2ZWwgYW5kIHN1YmplY3QsIGFzIGEgY29yZS1iYXNpYyB0ZXh0IHdpdGggdHdvIG9yIG1vcmUgb3RoZXIgdGl0bGVzIGNvbXBsZW1lbnRpbmcgZWFjaCBvdGhlciwgb3IgYXMgc3VwcGxlbWVudGFyeSBhbmQgZW5yaWNoaW5nIHNvdXJjZSBvZiBpbmZvcm1hdGlvbiBmb3IgYSBwYXJ0aWN1bGFyIHN1YmplY3QgYW5kIGNsYXNzIGxldmVsLiIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygia2siLCBbX3ZtLl92KCJIYW5kb3V0cyIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIC0gY29tcHJpc2Ugb2YgdGhlIGRpZmZlcmVudCB0eXBlcyBvZiBpbmZvcm1hdGlvbi1wcm92aWRpbmcgbWF0ZXJpYWxzIHRoYXQgYXJlIGdpdmVuIG91dCB0byBzdHVkZW50cyB1c3VhbGx5IGluIGNvbm5lY3Rpb24gd2l0aCBhIHRhdWdodCBsZXNzb24gb3IgcHJvZ3JhbW1lLiBUaGV5IGluY2x1ZGU7IHNldHMgb2Ygbm90ZXMgKGNvbXBsZXRlIG9yIGluIHNrZWxldG9uIGZvcm0pLCB0YWJsZXMsIGRpYWdyYW1zLCBtYXBzLCBvciBhbnkgb3RoZXIgaWxsdXN0cmF0aW9ucyBvciBzdXBwb3J0IG1hdGVyaWFscy4gSGFuZG91dHMgY2FuIGJlIHVzZWQgZm9yIGEgd2lkZSByYW5nZSBvZiBwdXJwb3NlcyBzdWNoIGFzOyBjb21wbGV0ZSBzZXRzIG9mIG5vdGVzIGZvciBzcGVjaWZpYyBhcmVhcyBvZiB0aGUgY3VycmljdWx1bSBvciB0b3BpYywgZGVzaWduZWQgdG8gYmUgZ2l2ZW4gdG8gc3R1ZGVudHMgdG8gc2F2ZSB0aGVtIGZyb20gaGF2aW5nIHRvIHRha2Ugbm90ZXMgZHVyaW5nIHRoZSBsZXNzb24uIEZvciBleGFtcGxlLCBoYW5kb3V0cyBjb3VsZCBjb21wcmlzZSBvZiBza2VsZXRvbiBub3RlcyB3aXRoIGJsYW5rIHNwYWNlcyBnaXZlbiB0byBzdHVkZW50cyB0byBjb21wbGV0ZSBkdXJpbmcgdGhlIGxlc3NvbiBvciBhIHNob3J0ZXIgZG9jdW1lbnQgdXN1YWxseSBvbmUgc2hlZXQgdGhhdCBpcyBnaXZlbiB0byBzdHVkZW50cyB0byBzYXZlIHRoZW0gZnJvbSBoYXZpbmcgdG8gY29weSBjb21wbGljYXRlZCBkaWFncmFtcywgbWFwcywgc2V0cyBvZiBkYXRhIG9yIGFzc2lzdCB3aGVuIGlsbHVzdHJhdGluZyBzcGVjaWZpYyBjb25jZXB0IG9yIGlkZWEuIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFtfdm0uX3YoIkFzc2lnbm1lbnQgc2hlZXRzIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgLSBjb21wcmlzZSBvZiBtYXRlcmlhbHMgZ2l2ZW4gdG8gc3R1ZGVudHMgZGVzY3JpYmluZyB0YXNrcyB0byBiZSBjYXJyaWVkIG91dC4gVGhleSBpbmNsdWRlOyBwcm9ibGVtIGRlc2NyaXB0aW9uIHNoZWV0cywgcmVhZGluZyBsaXN0cywgbGFib3JhdG9yeSByZWNvcmRpbmcgc2hlZXRzLCBicmllZmluZyBzaGVldHMgZm9yIHByb2plY3RzIGFuZCBzZW1pbmFycywgZXRjLiIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygia2siLCBbX3ZtLl92KCJJbmRpdmlkdWFsaXplZCBzdHVkeSBtYXRlcmlhbHMiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiAtIGNvbXByaXNlIG9mIHRoZSBkaWZmZXJlbnQgdGV4dHVhbCBtYXRlcmlhbHMgdGhhdCBhcmUgdXNlZCBpbiBjb25uZWN0aW9uIHdpdGggaW5kaXZpZHVhbGl6ZWQgbGVhcm5pbmcgc3VjaCBhcyBzdHVkeSBndWlkZXMsIG1vZHVsZXMsIHN0cnVjdHVyZWQgbm90ZXMsIHRleHR1YWwgc3VwcG9ydCBtYXRlcmlhbHMgZm9yIG1lZGlhdGVkIGxlYXJuaW5nIHN5c3RlbXMsIGV0Yy4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl9tKDMwKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW192bS5fdigiUmVzb3VyY2UgbWF0ZXJpYWxzIGZvciBncm91cCBleGVyY2lzZXMiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiAtIGNvbXByaXNlIG9mIHRoZSB2YXJpb3VzIHByaW50ZWQgbWF0ZXJpYWxzIHRoYXQgYXJlIHVzZWQgaW4gY29ubmVjdGlvbiB3aXRoIGdyb3VwIGxlYXJuaW5nIGV4ZXJjaXNlcy4gRm9yIGV4YW1wbGU7IGJhY2tncm91bmQgcmVhZGluZyBtYXRlcmlhbCwgaW5zdHJ1Y3Rpb24gc2hlZXRzLCBkYXRhIHNoZWV0cywgZXRjLiIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygia2siLCBbX3ZtLl92KCJXb3Jrc2hlZXRzIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgLSBpbXBsaWVzIGEgZGV2aWNlIGJ5IHdoaWNoIHRoZSB0ZWFjaGVyIGhlbHBzIHRoZSBzdHVkZW50cyB0byB3b3JrIGFzIGZhciBhcyBwb3NzaWJsZSB0byBoaXMvaGVyIGZ1bGwgY2FwYWNpdHkuIEEgd29ya3NoZWV0IGlzIG5vdCBtZXJlbHkgYW4gaW5zdHJ1Y3Rpb24gc2hlZXQgd2l0aCBvbmUgb3IgbW9yZSBwcmVjaXNlIGluc3RydWN0aW9ucywgYnV0IGl0IGFsc28gaW5jbHVkZXMgcXVlc3Rpb25zIHRoYXQgZXZlbiB0aG91Z2ggZGVtYW5kaW5nIHRoZXkgZW5jb3VyYWdlIHN0dWRlbnRzIHRvIHRoaW5rIGZvciB0aGVtc2VsdmVzIGFib3V0IHRoZSByZXN1bHRzIG9mIHRoZWlyIHdvcmsgYW5kIHRoZXJlYWZ0ZXIgZHJhdyBjb25jbHVzaW9ucy4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl9tKDMxKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJoMyIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoMy1yZXNwb25zaXZlIHRleHQtanVzdGlmeSIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIml0ZW0tNC0yIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICI0LjQuMiBBZHZhbnRhZ2VzIGFuZCBkaXNhZHZhbnRhZ2VzIG9mIHVzaW5nIGRpZmZlcmVudCB0eXBlcyBvZiBwcmludGVkIG1hdGVyaWFscyAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1sLTUgdGV4dC1qdXN0aWZ5IiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFRoZXJlIGFyZSBib3RoIGFkdmFudGFnZXMgYW5kIGRpc2FkdmFudGFnZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSB1c2Ugb2YgcHJpbnRlZCBtYXRlcmlhbHMgZHVyaW5nIGluc3RydWN0aW9uLiIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygia2siLCBbX3ZtLl92KCJBZHZhbnRhZ2VzIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl9tKDMyKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LAogICAgICAgICAgICAgICAgW19jKCJrayIsIFtfdm0uX3YoIkRpc2FkdmFudGFnZXMiKV0pLCBfdm0uX20oMzMpXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImgzIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImgzLXJlc3BvbnNpdmUgdGV4dC1qdXN0aWZ5IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiaXRlbS00LTMiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjQuNC4zIEFwcGxpY2F0aW9uIG9mIHByaW50ZWQgbWF0ZXJpYWxzICIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1sLTUgdGV4dC1qdXN0aWZ5IiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFRoZSBtb3N0IGNvbW1vbiBhcHBsaWNhdGlvbiBvZiBwcmludGVkIG1hdGVyaWFscyBpcyB0aGUgcHJlc2VudGF0aW9uIG9mIGNvbnRlbnQgaW5mb3JtYXRpb24gKEhlaW5pY2ggZXQgYWwuIDE5OTY6MTA4KS4gU3R1ZGVudHMgYXJlIGdpdmVuIHJlYWRpbmcgYXNzaWdubWVudHMgYW5kIGhlbGQgYWNjb3VudGFibGUgZm9yIHRoZSBtYXRlcmlhbCBkdXJpbmcgY2xhc3MgZGlzY3Vzc2lvbiBhbmQgb24gdGVzdHMuIFRlYWNoZXItbWFkZSBoYW5kb3V0cyBjYW4gYWxzbyBjb21wbGVtZW50IGEgdGVhY2hlcidzIHByZXNlbnRhdGlvbiBvciBiZSB1c2VkIGJ5IHN0dWRlbnRzIGFzIHRoZXkgc3R1ZHkgaW5kZXBlbmRlbnRseS4iCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgU3R1ZGVudHMgbWF5IGFsc28gdXNlIHByaW50ZWQgbWF0ZXJpYWxzIHRvIGF1Z21lbnQgZWl0aGVyIHRoZSBpbmZvcm1hdGlvbiBwcmVzZW50ZWQgYnkgdGhlIHRlYWNoZXIgb3Igb3RoZXIgZm9ybXMgb2YgbWVkaWEuIFN0dWRlbnRzIGZyZXF1ZW50bHkgYWxzbyByZWZlciB0byBzdXBwbGVtZW50YXJ5IHByaW50ZWQgbWF0ZXJpYWxzIHN1Y2ggYXMgYm9va3MgYW5kIGpvdXJuYWxzIGZyb20gdGhlIGxpYnJhcnkgb3IgbWVkaWEgY2VudHJlIHRvIGxvY2F0ZSBpbmZvcm1hdGlvbiBvbiBzcGVjaWZpYyB0b3BpY3Mgbm90IGNvdmVyZWQgaW4gdGhlaXIgdGV4dGJvb2suIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEFwcGxpY2F0aW9uIG9mIHByaW50ZWQgbWF0ZXJpYWxzIHNob3VsZCBiZSBsaW5rZWQgdG8gdHlwZXMgb2YgbGVhcm5pbmcgYW5kIHRoZSB2YXJpb3VzIGxlYXJuaW5nIGRvbWFpbnMsIG5hbWVseTsiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFtfdm0uX3YoIiBjb2duaXRpdmUsIGFmZmVjdGl2ZSBhbmQgcHN5Y2hvbW90b3IuIildKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBVbmRlciBjb2duaXRpdmUgbGVhcm5pbmcsIHByaW50ZWQgbWF0ZXJpYWxzIGNvdWxkIHNvbWV0aW1lcyAoYW1vbmdzdCBtYW55IG90aGVyIHRoaW5ncykgYmUgdXNlZCB0bzogIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfdm0uX20oMzQpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBVbmRlciBwc3ljaG9tb3RvciBsZWFybmluZywgcHJpbnRlZCBtYXRlcmlhbHMgY2FuIGJlIHVzZWQgdG86ICIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX3ZtLl9tKDM1KSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVW5kZXIgYWZmZWN0aXZlIGxlYXJuaW5nLCBwcmludGVkIG1hdGVyaWFscyBjYW4gYmUgdXNlZCB0bzogIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfdm0uX20oMzYpCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiBXaGVuIHNlbGVjdGluZyB0aGUgcHJpbnRlZCBtYXRlcmlhbHMsIGNvbnNpZGVyIHRoZSBkZXNpcmVkIHR5cGUgb2YgbGVhcm5pbmcgc28gdGhhdCB5b3Ugc2VsZWN0IG1hdGVyaWFscyB0aGF0IHdpbGwgYnJpbmcgb3V0IHRoZSB0eXBlIG9mIGxlYXJuaW5nIG91dGNvbWVzIHRoYXQgeW91IHdpc2ggdG8gYWNoaWV2ZS4gIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgIF92bS5fbSgzNykKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImgyLXJlc3BvbnNpdmUgdGV4dC1qdXN0aWZ5IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiaXRlbS01IiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICI0LjUgVXRpbGl6aW5nIE90aGVyIFR5cGVzIG9mIEluc3RydWN0aW9uYWwgTWF0ZXJpYWxzIGR1cmluZyBJbnN0cnVjdGlvbiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fbSgzOCksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiaDMiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaDMtcmVzcG9uc2l2ZSB0ZXh0LWp1c3RpZnkiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJpdGVtLTUtMSIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiNC41LjEgVHlwZXMgb2Ygbm9uLXByaW50IG1lZGlhIGF2YWlsYWJsZSBmb3IgdGVhY2hpbmcgYW5kIGxlYXJuaW5nIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtbC01IHRleHQtanVzdGlmeSIgfSwgWwogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICIgSW4gVW5pdCAyIHdlIGlkZW50aWZpZWQgZGlmZmVyZW50IHR5cGVzIG9mIG1lZGlhIG90aGVyIHRoYW4gcHJpbnQuIERvIHlvdSBzdGlsbCByZW1lbWJlciB0aGVtPyBJbiBjYXNlIHlvdSBoYXZlIGZvcmdvdHRlbiwgcGxlYXNlIGdvIGJhY2sgdG8gdGhlIHVuaXQgdG8gcmVtaW5kIHlvdXJzZWxmIHRoZSB2YXJpb3VzIHR5cGVzIG9mIG5vbi1wcmludCBtZWRpYSB0aGF0IHdlIG1lbnRpb25lZC4gSGF2ZSB5b3UgaWRlbnRpZmllZCB0aGUgZm9sbG93aW5nIGNhdGVnb3JpZXMgb2Ygbm9uLXByaW50IG1lZGlhPyAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl9tKDM5KSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImtrIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJBZHZhbnRhZ2VzIGFuZCBkaXNhZHZhbnRhZ2VzIG9mIG5vbi1wcm9qZWN0ZWQgbWVkaWEgIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBUaGVyZSBhcmUgYm90aCBhZHZhbnRhZ2VzIGFuZCBkaXNhZHZhbnRhZ2VzIGFzc29jaWF0ZWQgd2l0aCB1c2luZyBub24tcHJvamVjdGVkIG1lZGlhLiBUaGVzZSBhcmUgZW51bWVyYXRlZCBiZWxvdzogIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl9tKDQwKSwKICAgICAgICAgICAgICBfdm0uX20oNDEpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygia2siLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIkFkdmFudGFnZXMgYW5kIGxpbWl0YXRpb25zIG9mIGNvbXB1dGVyIGltYWdlIHByb2plY3Rpb24iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBUaGUgZm9sbG93aW5nIGFyZSB0aGUgYWR2YW50YWdlcyBvZiBjb21wdXRlciBpbWFnZSBwcm9qZWN0aW9uOiAiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF92bS5fbSg0MikKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uX20oNDMpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImgzIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImgzLXJlc3BvbnNpdmUgdGV4dC1qdXN0aWZ5IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiaXRlbS01LTIiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIjQuNS4yIEhvdyB0byBzZWxlY3QgYW5kIHVzZSBkaWZmZXJlbnQgdHlwZXMgb2Ygbm9uLXByaW50IG1lZGlhICIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWwtNSB0ZXh0LWp1c3RpZnkiIH0sIFsKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiIFNlbGVjdGluZyB0aGUgYmVzdCBtZWRpdW0gb3IgbWVkaWEgZm9yIGluc3RydWN0aW9uYWwgcHVycG9zZXMgaXMgbm90IGFuIGVhc3kgam9iLiBUaGlzIGlzIGR1ZSB0byB0aGUgZmFjdCB0aGF0IGNob2ljZXMgYXJlIGNvbXBsZXggYW5kIGRpZmZpY3VsdCBiZWNhdXNlIHRoZXkgYXJlIGJhc2VkIG9uIGEgY29tYmluYXRpb24gb2YgaW50ZXJyZWxhdGVkIGZhY3RvcnMgc3VjaCBhczogdGhlIGFiaWxpdGllcyBhbmQgbGVhcm5pbmcgbmVlZHMgb2YgdGhlIHN0dWRlbnRzOyB0aGUgbmF0dXJlIG9mIHRoZSBzdWJqZWN0IG1hdHRlciwgdGhlIGV4cGVjdGVkIGxlYXJuaW5nIG91dGNvbWVzLCB0aGUgcmFuZ2Ugb2YgbWVkaWEgYXZhaWxhYmxlLCBhcyB3ZWxsIGFzIG1ha2luZyBhIGNob2ljZSBmcm9tIHRoZSB2YXJpb3VzIGFsdGVybmF0aXZlIG1lZGlhIGF2YWlsYWJsZS4gSG93ZXZlciwgdGhlcmUgYXJlIHNvbWUgZ3VpZGVsaW5lcyB5b3UgY291bGQgbWFrZSBwcm9wZXIgc2VsZWN0aW9uLiAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl9tKDQ0KSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW192bS5fdigiR2VuZXJhbCBwcmluY2lwbGVzIG9mIG1lZGlhIHV0aWxpemF0aW9uIildKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEJyb3duIGV0IGFsLiAoMTk3MzoyNykgcHJvcG9zZWQgc29tZSBnZW5lcmFsIHByaW5jaXBsZXMgaW4gbWVkaWEgdXNlIHdoaWNoIGFyZSB1c2VmdWwgaW4gbWVkaWEtc2VsZWN0aW9uIGFuZCBkZWNpc2lvbi1tYWtpbmcuIFRoZXNlIHByaW5jaXBsZXMgc2hvdWxkIGd1aWRlIHVzIGFzIHdlIHNlbGVjdCBhbmQgdXNlIG1lZGlhLiBUaGVzZSBwcmluY2lwbGVzIGluY2x1ZGUgdGhhdDogIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfdm0uX20oNDUpCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiaDQiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaDQtcmVzcG9uc2l2ZSB0ZXh0LWp1c3RpZnkiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJpdGVtLTUtMi0xIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICI0LjUuMi4xIFNlbGVjdGluZyBhbmQgdXNpbmcgZGlmZmVyZW50IHR5cGVzIG9mIGluc3RydWN0aW9uYWwgbWF0ZXJpYWxzIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtbC01IHRleHQtanVzdGlmeSIgfSwgWwogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgICAgICAgICAgICBfYygib2wiLCBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiIFRoZXJlIGFyZSBzZXZlcmFsIHBvaW50cyB0byBjb25zaWRlciB3aGVuIHNlbGVjdGluZyBhbmQgdXNpbmcgZGlmZmVyZW50IGluc3RydWN0aW9uYWwgbWF0ZXJpYWxzLiBUaGUgZGlzY3Vzc2lvbiB0aGF0IGZvbGxvd3Mgd2lsbCBhZGRyZXNzIHRoYXQuICIKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygia2siLCBbX3ZtLl92KCJUaHJlZSAtZGltZW5zaW9uYWwgbWF0ZXJpYWxzIildKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiIERvIHlvdSBzdGlsbCByZW1lbWJlciB0aGF0IHdlIGRpZCB0b3VjaCB1cG9uIHRocmVlLSBkaW1lbnNpb25hbCBtZWRpYSBlYXJsaWVyIG9uPyBXcml0ZSBkb3duIHdoYXQgeW91IGNhbiByZWNhbGwuIFRocmVlLWRpbWVuc2lvbmFsIG1hdGVyaWFscyBpbmNsdWRlOyBtb2RlbHMsIHNwZWNpbWVucywgbW9jay11cHMsIGRpb3JhbWFzLCBhbmQgZXhoaWJpdHMuIExpa2UgYWxsIG90aGVyIGluc3RydWN0aW9uYWwgbWF0ZXJpYWxzLCB0aHJlZS1kaW1lbnNpb25hbCB0ZWFjaGluZyBtYXRlcmlhbHMgd2lsbCBub3QgYmUgZWZmZWN0aXZlIHVubGVzcyB0aGV5IGFyZSB1c2VkIHByb3Blcmx5IGFzIHBhcnQgb2YgYSB3ZWxsLXRob3VnaHQtb3V0IHRlYWNoaW5nIHN0cmF0ZWd5LiBZb3UgbmVlZCB0byBmb2xsb3cgc29tZSBiYXNpYyBndWlkZWxpbmVzIGluIHRoZWlyIHVzZS4gVGhlIGZvbGxvd2luZyBndWlkZWxpbmVzIGFyZSBuZWNlc3Nhcnk6ICIKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oNDYpCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW192bS5fdigiQ29tbXVuaXR5IHJlc291cmNlcyIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBEaWQgeW91IGtub3cgdGhhdCB0aGUgY29tbXVuaXR5IGhhcyBhIHdpZGUgdmFyaWV0eSBvZiByZXNvdXJjZXMgeW91IGNvdWxkIHV0aWxpemUgZm9yIHRlYWNoaW5nIGFuZCBsZWFybmluZz8gQ29tbXVuaXR5IHJlc291cmNlcyBpbmNsdWRlOyBwbGFjZXMgd2l0aGluIHRoZSBjb21tdW5pdHksIHBlb3BsZSwgYW5kIGFjdGl2aXRpZXMgYW5kIG9iamVjdHMgdGhhdCBhcmUgZm91bmQgd2l0aGluIHRoZSBjb21tdW5pdHkuICIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJoNCIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoNC1yZXNwb25zaXZlIHRleHQtanVzdGlmeSIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIml0ZW0tNS0yLTIiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjQuNS4yLjIgSG93IHRvIHV0aWxpemUgY29tbXVuaXR5IHJlc291cmNlcyBpbiB0ZWFjaGluZyIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX20oNDcpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImg0IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImg0LXJlc3BvbnNpdmUgdGV4dC1qdXN0aWZ5IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiaXRlbS01LTItMyIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiNC41LjIuMyBUd28tZGltZW5zaW9uYWwgdmlzdWFscyAiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl9tKDQ4KSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJoNCIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoNC1yZXNwb25zaXZlIHRleHQtanVzdGlmeSIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIml0ZW0tNS0yLTQiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjQuNS4yLjQgRGlzcGxheXMiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl9tKDQ5KSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJoNCIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoNC1yZXNwb25zaXZlIHRleHQtanVzdGlmeSIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIml0ZW0tNS0yLTUiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjQuNS4yLjUgVXRpbGl6aW5nIGF1ZGlvIG1hdGVyaWFscyAiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtbC01IHRleHQtanVzdGlmeSIgfSwgWwogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICIgTGlrZSBhbGwgb3RoZXIgbWVkaWEsIGJlZm9yZSBzZWxlY3RpbmcgYW5kIHVzaW5nIGF1ZGlvIG1hdGVyaWFscywgeW91IHNob3VsZCBoYXZlIGFuYWx5emVkIHlvdXIgYXVkaWVuY2UgYW5kIHN0YXRlZCB0aGUgb2JqZWN0aXZlcyBhY2NvcmRpbmcgdG8gdGhlIEFTU1VSRSBtb2RlbCAoSGVpbmljaCBldCBhbC4sIDE5OTYpLiBBZnRlciB0aGF0LCB5b3UgYXJlIHJlYWR5IHRvIHNlbGVjdCwgbW9kaWZ5LCBvciBkZXNpZ24geW91ciBhdWRpbyBtYXRlcmlhbHMuIFRoZSBuZXh0IHN0ZXAgYWZ0ZXIgc2VsZWN0aW5nIHRoZSBhdWRpbyBtYXRlcmlhbHMgaXMgdG8gdXNlIHRoZW0gd2l0aCB5b3VyIGNsYXNzLiAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIFdoZW4gdXRpbGl6aW5nIGF1ZGlvIG1hdGVyaWFscywgZm9sbG93IHRoZSAiKSwKICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW19jKCJpIiwgW192bS5fdigiZml2ZSBQJ3MiKV0pXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIG5hbWVseTsgIiksCiAgICAgICAgICAgICAgICAgIF92bS5fbSg1MCkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uX20oNTEpLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGFibGUtcmVzcG9uc2l2ZSBtZW1lIiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInRhYmxlIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRhYmxlICIsIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNzAlIiB9IH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygidGhlYWQiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0aCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBzY29wZTogImNvbCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDcml0ZXJpYSBmb3IgcHJldmlld2luZyBhdWRpbyBtYXRlcmlhbHMiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHNjb3BlOiAiY29sIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW19jKCJrayIsIFtfdm0uX3YoIlllcyIpXSldLAogICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHNjb3BlOiAiY29sIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW19jKCJrayIsIFtfdm0uX3YoIk5vIildKV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJ0Ym9keSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygia2siLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiMS4gSXMgdGhlIGF1ZGlvIG1hdGVyaWFsIHJlbGV2YW50IHRvIHRoZSBjdXJyaWN1bHVtPyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInRkIiksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygia2siLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiMi4gSXMgaXQgYWNjdXJhdGUgYW5kIGRvZXMgaXQgaGF2ZSBjdXJyZW50IGluZm9ybWF0aW9uPyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIpLAogICAgICAgICAgICAgICAgICAgICAgICBfYygidGQiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjMuIElzIHRoZSBsYW5ndWFnZSBjbGVhciBhbmQgYXBwcm9wcmlhdGUgZm9yIHRoZSBsZXZlbD8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIpLAogICAgICAgICAgICAgICAgICAgICAgICBfYygidGQiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjQuIEFyZSB0aGUgYXVkaW8gbWF0ZXJpYWxzIG1vdGl2YXRpb25hbCBhbmQgaW50ZXJlc3Rpbmc/IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygidGQiKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInRkIikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAidGQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCI1LiBEb2VzIHRoZSBtYXRlcmlhbCBlbmdhZ2UgbGVhcm5lcnM/IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIpLAogICAgICAgICAgICAgICAgICAgICAgICBfYygidGQiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjYuIElzIHRoZSBhdWRpbyBhdCBhIHJlYXNvbmFibGUgcGFjaW5nIGZvciB0aGUgbGVhcm5lcnM/IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygidGQiKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInRkIikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAidGQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI3LiBJcyB0aGUgbWF0ZXJpYWwgb2YgZ29vZCBzb3VuZCB0ZWNobmljYWwgcXVhbGl0eT8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIpLAogICAgICAgICAgICAgICAgICAgICAgICBfYygidGQiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjguIElzIHRoZSBhdWRpbyBtYXRlcmlhbCBjbGVhcmx5IG9yZ2FuaXplZD8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIpLAogICAgICAgICAgICAgICAgICAgICAgICBfYygidGQiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIjkuIERvZSB0aGUgbWF0ZXJpYWwgaGF2ZSBhIHVzZXIgZ3VpZGU/IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIpLAogICAgICAgICAgICAgICAgICAgICAgICBfYygidGQiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIjEwLiBBcmUgdGhlcmUgZm9sbG93LXVwIGFjdGl2aXRpZXM/IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIpLAogICAgICAgICAgICAgICAgICAgICAgICBfYygidGQiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjExLiBEbyBJIGhhdmUgYSBiYWNrLXVwIHBsYW4gaW4gY2FzZSB0aGVyZSBhcmUgdGVjaG5pY2FsIGNoYWxsZW5nZXM/ICggZS5nLiBmdWxseSBjaGFyZ2VkIGJhdHRlcmllcykiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIpLAogICAgICAgICAgICAgICAgICAgICAgICBfYygidGQiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl9tKDUyKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJoNCIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoNC1yZXNwb25zaXZlIHRleHQtanVzdGlmeSIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIml0ZW0tNS0yLTYiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjQuNS4yLjYgU2VsZWN0aW5nIGFuZCB1c2luZyBzdGlsbCBwcm9qZWN0aW9uIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fbSg1MyksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiaDQiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaDQtcmVzcG9uc2l2ZSB0ZXh0LWp1c3RpZnkiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJpdGVtLTUtMi03IiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCI0LjUuMi43IFV0aWxpemluZyBtb3Rpb24gbWVkaWEiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl9tKDU0KSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJoNCIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoNC1yZXNwb25zaXZlIHRleHQtanVzdGlmeSIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIml0ZW0tNS0yLTgiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjQuNS4yLjggQ29tcHV0ZXItYmFzZWQgbXVsdGltZWRpYSBhbmQgV2ViLU1lZGlhIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWwtNSB0ZXh0LWp1c3RpZnkiIH0sIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgQ29tcHV0ZXItYmFzZWQgaHlwZXJtZWRpYSBjYW4gYmUgYXBwbGllZCBpbiBhbGwgYXJlYXMgb2YgdGhlIGN1cnJpY3VsdW0gZm9yIGFueSBsZWFybmluZyBnb2FsIHRoYXQgaXMgc3VpdGVkIHRvIGluZGl2aWR1YWwgb3Igc21hbGwgZ3JvdXAgZXhwbG9yYXRpb24gb2YgYSBib2R5IG9mIGluZm9ybWF0aW9uLiBUZWFjaGVycyBjYW4gZWl0aGVyIGFkYXB0IGV4aXN0aW5nIG1hdGVyaWFscyBvciBjcmVhdGUgbmV3IG1hdGVyaWFscyB0byBmaWxsIGEgbmVlZCBvZiB0aGVpciBvd24gc3R1ZGVudHMuIEp1c3QgbGlrZSB3aXRoIG90aGVyIG1lZGlhLCB0byBzZWxlY3QgYW5kIHVzZSBjb21wdXRlci1iYXNlZCBtdWx0aW1lZGlhLCB5b3UgbmVlZCB0byBzdGFydCBieSBhbmFseXppbmcgdGhlIGF1ZGllbmNlIHNvIHRoYXQgd2hhdGV2ZXIgbWF0ZXJpYWxzIHlvdSBzZWxlY3QgYXJlIGFibGUgdG8gbWVldCB0aGUgbGVhcm5pbmcgbmVlZHMgb2YgdGhlIHN0dWRlbnRzLiBRdWVzdGlvbnMgeW91IHNob3VsZCBhc2sgeW91cnNlbGYgYXJlOiAiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgV2h5IGRvIHlvdSBuZWVkIHRvIHVzZSB0aGUgY29tcHV0ZXI/IFdoYXQgdHlwZSBvZiBzb2Z0d2FyZSBhcmUgeW91IHBsYW5uaW5nIHRvIHVzZT8gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFRoZSBuZXh0IHN0ZXAgaXMgdG8gc3BlY2lmeSB5b3VyIGluc3RydWN0aW9uYWwgZ29hbCBhbmQgZm9ybXVsYXRlIHRoZSBleHBlY3RlZCBsZWFybmluZyBvdXRjb21lcy4gV2hhdCBkbyB5b3Ugd2FudCB0byBhY2hpZXZlIGZyb20gdGhlIENvbXB1dGVyLUJhc2VkIE11bHRpbWVkaWEgaW4gdGVybXMgb2YgbGVhcm5pbmcgb3V0Y29tZXM/IgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEN1cnJlbnRseSB0aGUgYnV6eiB3b3JkIHdoZW4gaXQgY29tZXMgdG8gd2ViIGxlYXJuaW5nIGlzIEUtbGVhcm5pbmcgb3Igc29tZXRpbWVzIGNhbGxlZCBPbmxpbmUgTGVhcm5pbmcuIFRocm91Z2ggY29tcHV0ZXJzIGFuZCBvdGhlciBnYWRnZXRzIChpbmNsdWRpbmcgbW9iaWxlIGRldmljZXMpIG9uZSBpcyBhYmxlIHRvIGxlYXJuIHdoaWxlIGF3YXkgZnJvbSB0aGUgaW5zdHJ1Y3RvciBvciBmYWNpbGl0YXRvci4gWW91IG1heSBoYXZlIGhhZCBleHBlcmllbmNlIG9uIHRoaXMgdGhyb3VnaCB0aGlzIGNvdXJzZS4gQmVsb3cgd2UgYnJpZWZseSBsb29rIGF0IEUtbGVhcm5pbmcuIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFtfdm0uX3YoIldoYXQgaXMgZS1sZWFybmluZz8iKV0pLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgRS1sZWFybmluZyBoYXMgY29tZSB0byBkZWZpbmUgYW55IGRpc3NlbWluYXRpb24gb2YgZWR1Y2F0aW9uYWwga25vd2xlZGdlIG92ZXIgdGhlIEludGVybmV0LiBUaGlzIG1ha2VzIGUtbGVhcm5pbmcgYSBzdWJzZXQgb2YgdGVjaG5vbG9neS1iYXNlZCB0cmFpbmluZy4gSXQgYWxzbyBpbmNvcnBvcmF0ZXMgYSBudW1iZXIgb2YgbGVhcm5pbmcgYWN0aXZpdGllcyBjb25kdWN0ZWQgb24gdGhlIEludGVybmV0LCBvZiB3aGljaCBtb2JpbGUgbGVhcm5pbmcgaXMgb25lIHBhcnQuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctZmx1aWQiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9sZWFybi5wbmciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIlJlc3BvbnNpdmUgaW1hZ2UiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICBfYygiaSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiR3JhcGhpYyBzaG93aW5nIGNhcGFiaWxpdGllcyBvZiBFLWxlYXJuaW5nIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIikKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImtrIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiRGlmZmVyZW50aWF0aW5nIGUtbGVhcm5pbmcgZnJvbSBtb2JpbGUgbGVhcm5pbmciKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAnIEUtbGVhcm5pbmcgY2FuIGJlIHJlYWwtdGltZSBvciBzZWxmLXBhY2VkLCBhbHNvIGtub3duIGFzICJ5bmNocm9ub3VzIiBvciAiYXN5bmNocm9ub3VzIiBsZWFybmluZy4gQWRkaXRpb25hbGx5LCBlLWxlYXJuaW5nIGlzIGNvbnNpZGVyZWQgdG8gYmUgInRldGhlcmVkIiAoY29ubmVjdGVkIHRvIHNvbWV0aGluZykgYW5kIHByZXNlbnRlZCBpbiBhIGZvcm1hbCBhbmQgc3RydWN0dXJlZCBtYW5uZXIuIEluIGNvbnRyYXN0LCBtb2JpbGUgbGVhcm5pbmcgaXMgb2Z0ZW4gc2VsZi1wYWNlZCwgdW4tdGV0aGVyZWQgYW5kIGluZm9ybWFsIGluIGl0cyBwcmVzZW50YXRpb24uICcKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGFibGUtcmVzcG9uc2l2ZSBtZW1lIiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInRhYmxlIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRhYmxlICIsIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNTAlIiB9IH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygidGhlYWQiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0aCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBzY29wZTogImNvbCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfYygia2siLCBbX3ZtLl92KCJFLUxlYXJuaW5nIildKV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAidGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgc2NvcGU6ICJjb2wiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX2MoImtrIiwgW192bS5fdigiTS1MZWFybmluZyIpXSldLAogICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX20oNTUpCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiIEJlY2F1c2UgbW9iaWxlIGRldmljZXMgaGF2ZSB0aGUgcG93ZXIgdG8gbWFrZSBsZWFybmluZyBldmVuIG1vcmUgd2lkZWx5IGF2YWlsYWJsZSBhbmQgYWNjZXNzaWJsZSwgbW9iaWxlIGRldmljZXMgYXJlIGNvbnNpZGVyZWQgYnkgbWFueSB0byBiZSBhIG5hdHVyYWwgZXh0ZW5zaW9uIG9mIGUtbGVhcm5pbmcgKEVsbGlzLCAyMDAzKS4gV2UgaGF2ZSBjb21lIHRvIHRoZSBlbmQgb2YgdGhlIHVuaXQuIEJlZm9yZSB5b3UgcHJvY2VlZCBnbyB0aHJvdWdoIHRoZSBzdW1tYXJ5IGJlbG93IHRvIHJlbWluZCB5b3Ugb2Ygd2hhdCB3ZSBoYXZlIGRpc2N1c3NlZC4gIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fbSg1NiksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygiaHIiKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJub3RlIG5vdGUtc2Vjb25kYXJ5IG1lbWUgdGV4dC1qdXN0aWZ5IiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJibG9ja3F1b3RlIiwgeyBzdGF0aWNDbGFzczogImJsb2NrcXVvdGUgYnEtc2Vjb25kYXJ5IiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fbSg1NyksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQW5kZXJzb24sIFIuSC4gKDE5ODMpLiAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZWxlY3RpbmcgYW5kIERldmVsb3BpbmcgTWVkaWEgZm9yIEluc3RydWN0aW9uIikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIuIDIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzdXAiLCBbX3ZtLl92KCJuZCIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICIgRWRpdGlvbi4gTmV3IFlvcms6IFZhbiBOb3N0cmFuZCBSZWluaG9sZCBDb21wYW55LiIKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiIEJyb3duLCBKLlcuLCBMZXdpcywgUi5CLiwgJiBIYXJjbGVyb2FkLCBGLkYuICgxOTczKS4gQVYgIgogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJJbnN0cnVjdGlvbiBUZWNobm9sb2d5IE1lZGlhIGFuZCBNZXRob2RzIikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIuIE5ldyBZb3JrOiBNY0dyYXctSGlsbCBCb29rIENvbXBhbnkuIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQnV0bGVyLCBLLkEuICgxOTg2KS4gIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygia2siLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJMZWFybmluZyBhbmQgVGVhY2hpbmcgU3R5bGU6IEluIFRoZW9yeSBhbmQgaW4gUHJhY3RpY2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgMiIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoInN1cCIsIFtfdm0uX3YoIm5kIildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIGVkLiBDb2x1bWJpYSwgQ1Q6IExlYXJuZXIncyBEaW1lbnNpb24uIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgRWxsaW5ndG9uLCBILiAoMTk4NSkuICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIiBQcm9kdWNpbmcgVGVhY2hpbmcgTWF0ZXJpYWxzOiBhIEhhbmRib29rIGZvciBUZWFjaGVycyBhbmQgVHJhaW5lcnMgIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiLiBMb25kb246IEtvZ2FuIFBhZ2UgTHRkLiIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEVyaWNrc29uLCBDLlcuSC4sICYgQ3VybCwgRC5ILiAoMTk3MikuICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIkZ1bmRhbWVudGFscyBvZiBUZWFjaGluZyB3aXRoIEF1ZGlvdmlzdWFsIFRlY2hub2xvZ3kiCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIuIDIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzdXAiLCBbX3ZtLl92KCJuZCIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICIgRWRpdGlvbi4gTmV3IFlvcms6IE1hY21pbGxhbiBQdWJsaXNoaW5nIENvLiwgSW5jLiIKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgRWxsaXMsIEsuICgyMDAzKS4gIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygia2siLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiTW92aW5nIGludG8gTS1MZWFybmluZy4gVHJhaW5pbmciKV0pCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBHYWduZSwgUi4gKDE5ODUpLiAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJUaGUgQ29uZGl0aW9ucyBvZiBMZWFybmluZy4iKV0pCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiICg0IiksCiAgICAgICAgICAgICAgICAgICAgICBfYygic3VwIiwgW192bS5fdigidGgiKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgZWQuKS4gTmV3IFlvcms6IEhvbHQsIFJpbmVoYXJ0IGFuZCBXaW5zdG9uLiIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBHYWduZSwgUi5NLjsgQnJpZ2dzLCBMLkouOyAmIFdhZ2VyLCBXLlcuICgxOTkyKS4gIgogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFtfdm0uX3YoIlByaW5jaXBsZXMgb2YgSW5zdHJ1Y3Rpb25hbCBEZXNpZ24iKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgKDQiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzdXAiLCBbX3ZtLl92KCJ0aCIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICIgZWQuKS4gRm9ydCBXb3J0aCwgVFg6IEhhcmNvdXJ0IEJyYWNlIEpldmFub3ZpY2ggQ29sbGVnZSBQdWJsaXNoZXJzLiIKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgR2FyZG5lciwgSC4gKDE5OTMpLiAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIk11bHRpcGxlIEludGVsbGlnZW5jZXM6IFRoZSBUaGVvcnkgaW4gUHJhY3RpY2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIi4gTmV3IFlvcms6IEJhc2ljIEJvb2tzLiIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBIZWluaWNoLCBSLjsgTW9sZW5kYSwgTS47IFJ1c2VsbCwgSi5ELjsgJiBTbWFsZGlubywgUy5FICgxOTk2KS4gIgogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICIgSW5zdHJ1Y3Rpb25hbCBNZWRpYSBhbmQgVGVjaG5vbG9naWVzIGZvciBMZWFybmluZyAiCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIuIDUiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzdXAiLCBbX3ZtLl92KCJ0aCIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBFZGl0aW9uLiBOZXcgSmVyc2V5OiBQcmVudGljZSBIYWxsLCBJbmMuIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgSG91Z2h0b24sIEguQS47IFdpbGxvd3MsIEQuTS4gKGVkcy4sIDE5ODcpLiAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJUaGUgUHN5Y2hvbG9neSBvZiBJbGx1c3RyYXRpb24sIildKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIi4gVm9sLiAyLiBOZXcgWW9yazogVmVybGFnLiIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEtlbXAsIEouRS47IERheXRvbiwgRC5LICgxOTg1KS4gIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygia2siLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFBsYW5uaW5nIGFuZCBQcm9kdWNpbmcgSW5zdHJ1Y3Rpb25hbCBNZWRpYSAiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICIuIDV0aCBlZGl0aW9uLiBOZXcgWW9yazogSGFycGVyICYgUm93LCBQdWJsaXNoZXJzLiIKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiIE5ld2J5LCBULkouOyBTdGVwaWNoLCBELkEuOyBMZWhtYW4sIEouRC47IFJ1c3NlbGwsIEouRC4gKDIwMDApLiAiCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIiBJbnN0cnVjdGlvbmFsIFRlY2hub2xvZ3kgZm9yIHRlYWNoaW5nIGFuZCBsZWFybmluZzogRGVzaWduaW5nIGluc3RydWN0aW9uLCBpbnRlZ3JhdGluZyBjb21wdXRlcnMsIGFuZCB1c2luZyBtZWRpYS4gIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIDIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzdXAiLCBbX3ZtLl92KCIgbmQgIildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIGVkLiBVcHBlciBTYWRkbGUgUml2ZXI6IE5ldyBKZXJzZXksIE1lcnJpbGwuIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiIE5ld2J5LCBULkouOyBTdGVwaWNoLCBELkEuOyBMZWhtYW4sIEouRC47ICYgUnVzc2VsbCwgSi5ELiAoMjAwNikuICIKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygia2siLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAiIEVkdWNhdGlvbmFsIFRlY2hub2xvZ3kgZm9yIFRlYWNoaW5nIGFuZCBMZWFybmluZy4gIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBVcHBlciBTYWRkbGUgUml2ZXIsIE5ldyBKZXJzZXk6IFBlYXJzb24gRWR1Y2F0aW9uLCBJbmMuLCIKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgUmVpc2VyLCBSLkEuOyBEaWNrLCBXLiAoMTk5NikuICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIiBJbnN0cnVjdGlvbmFsIFBsYW5uaW5nOiBBIGd1aWRlIGZvciB0ZWFjaGVycy4gIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEJvc3RvbjogQWxseW4gYW5kIEJhY29uLiIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFJvbWlzem9za2ksIEEuSi4gKDE5ODgpLiAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICIgVGhlIFNlbGVjdGlvbiBhbmQgVXNlIG9mIEluc3RydWN0aW9uYWwgTWVkaWE6IEZvciBpbXByb3ZlZCBjbGFzc3Jvb20gdGVhY2hpbmcgYW5kIGZvciBpbnRlcmFjdGl2ZSwgaW5kaXZpZHVhbGl6ZWQgaW5zdHJ1Y3Rpb24gIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiLiAyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygic3VwIiwgW192bS5fdigibmQiKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgRWRpdGlvbi4gTG9uZG9uOiBLb2dhbiBQYWdlIEx0ZC4iKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBSb3dudHJlZSwgRC4gKDE5NzQpLiAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIkVkdWNhdGlvbmFsIFRlY2hub2xvZ3kgaW4gQ3VycmljdWx1bSBEZXZlbG9wbWVudCIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiLiBMb25kb246IEhhcnBlciBhbmQgUm93LiIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBTbm93LCBSLiwgQ29ybm8sIEwuLCAmIEphY2tzb24sIEQuIElJSSAoMTk5NikuICIKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygia2siLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAiSW5kaXZpZHVhbCBEaWZmZXJlbmNlcyBpbiBhZmZlY3RpdmUgYW5kIGNvZ25pdGl2ZSBmdW5jdGlvbnMiCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIuIEluIEQuIEJlcmxpbmVyICYgUi4gQ2FsbGVlIChFZHMuKSwgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygia2siLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiSGFuZGJvb2sgb2YgRWR1Y2F0aW9uYWwgUHN5Y2hvbG9neSIpXSkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiIChwcC4yNDMtMzEwKS4gTmV3IFlvcms6IFNpbW9uICYgU2NodXN0ZXIgTWFjbWlsbGFuLiIKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgU3QuIENsb3VkIFN0YXRlIFVuaXZlcnNpdHkuICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImtrIiwgW192bS5fdigiRGV2ZWxvcGluZyBTdXBwb3J0IE1hdGVyaWFscyIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBbV2ViIFBhZ2VdICgxOTk3KS4gQXZhaWxhYmxlIGF0OiAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHA6Ly9scnMuc3RjbG91ZHN0YXRlLmVkdS9jaW0vY291cnNlcy9waW5lL2RldmVsb3AuaHRtbCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIGh0dHA6Ly9scnMuc3RjbG91ZHN0YXRlLmVkdS9jaW0vY291cnNlcy9waW5lL2RldmVsb3AuaHRtbCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIuIEFjY2Vzc2VkIGluIE1hcmNoLCAyMDAzLiIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBXaWtpcGVkaWEsIHRoZSBmcmVlIGVuY3ljbG9wZWRpYS4gUmV0cmlldmVkIGZyb20gIgogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3lzdGVtc190aGlua2luZyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3lzdGVtc190aGlua2luZyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgb24gMjB0aCBKdWx5LCAyMDA5LiIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFdpdHRpY2gsIFcuQS4sICYgU2NodWxsZXIsIEMuRi4gKDE5NzkpLiAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJrayIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJJbnN0cnVjdGlvbmFsIFRlY2hub2xvZ3k6IEl0cyBOYXR1cmUgYW5kIFVzZS4iKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiA2IiksCiAgICAgICAgICAgICAgICAgICAgICBfYygic3VwIiwgW192bS5fdigidGgiKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgRWRpdGlvbi4gTmV3IFlvcms6IEhhcnBlciAmIFJvdyBQdWJsaXNoZXJzICIpCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS00IGNvbC1sZy0zIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJuYXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2YmFyIG5hdmJhci1saWdodCBzdGlja3ktdG9wICBmbGV4LWNvbHVtbiBtdC00IiwKICAgICAgICAgIGF0dHJzOiB7IGlkOiAibmF2YmFyLWV4YW1wbGUzIiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJuYXZiYXItYnJhbmQiLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiVW5pdCA0IikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoIm5hdiIsIHsgc3RhdGljQ2xhc3M6ICJuYXYgbmF2LXBpbGxzIGZsZXgtY29sdW1uIiB9LCBbCiAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIiwgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTEiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiNC4xIEludHJvZHVjdGlvbiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibmF2IiwgeyBzdGF0aWNDbGFzczogIm5hdiBuYXYtcGlsbHMgZmxleC1jb2x1bW4iIH0sIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayBtbC0zIG15LTEiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2l0ZW0tMS0xIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiIFVuaXQgT3V0Y29tZXMiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIG1sLTMgbXktMSIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS0xLTIiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJUZXJtaW5vbG9neSIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIiwgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICI0LjIgVGhlIFByb2Nlc3MgZm9yIGRlc2lnbmluZyBJbnN0cnVjdGlvbmFsIE1lZGlhIGFuZCBNYXRlcmlhbHMiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoIm5hdiIsIHsgc3RhdGljQ2xhc3M6ICJuYXYgbmF2LXBpbGxzIGZsZXgtY29sdW1uIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2LWxpbmsgbWwtMyBteS0xIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTItMSIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIjQuMi4xIFByb2Nlc3MgZm9yIGRlc2lnbmluZyBpbnN0cnVjdGlvbmFsIG1lZGlhICIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIiwgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTMiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICI0LjMgSG93IHRvIERlc2lnbiwgUGxhbiBhbmQgUHJvZHVjZSBEaWZmZXJlbnQgVHlwZXMgb2YgSW5zdHJ1Y3Rpb25hbCBNYXRlcmlhbHMiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoIm5hdiIsIHsgc3RhdGljQ2xhc3M6ICJuYXYgbmF2LXBpbGxzIGZsZXgtY29sdW1uIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2LWxpbmsgbWwtMyBteS0xIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTMtMSIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIjQuMy4xIFByb2Nlc3Mgb2YgdmlzdWFsIGRlc2lnbiAiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIG1sLTMgbXktMSIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS0zLTIiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCI0LjMuMiBWaXN1YWwgcGxhbm5pbmcgdG9vbHMiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIG1sLTMgbXktMSIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS0zLTMiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCI0LjMuMyBFeGFtcGxlcyBvZiB2aXN1YWxzIHRoYXQgeW91IGNvdWxkIGRlc2lnbiIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoIm5hdiIsIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIG1sLTUgbXktMSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTMtMy0xIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkFzc2lnbm1lbnQgNC4xIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2LWxpbmsgbWwtMyBteS0xIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTMtNCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIjQuMy40IERlc2lnbmluZyB0ZXh0ICIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoIm5hdiIsIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIG1sLTUgbXktMSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTMtMy0yIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkFjdGl2aXR5IDQuMSIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIG1sLTMgbXktMSIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS0zLTUiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCI0LjMuNSBDaGFsa2JvYXJkIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygibmF2IiwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2LWxpbmsgbWwtNSBteS0xIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2l0ZW0tMy0zLTMiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiQXNzaWdubWVudCA0LjIiKV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayBtbC0zIG15LTEiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2l0ZW0tMy02IiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiNC4zLjYgV2hpdGVib2FyZCIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2LWxpbmsgbWwtMyBteS0xIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTMtNyIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIjQuMy43IERlc2lnbmluZyBvdmVyaGVhZCB0cmFuc3BhcmVuY2llcyAiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIG1sLTMgbXktMSIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS0zLTgiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCI0LjMuOCBEZXNpZ24gb2YgUG93ZXIgUG9pbnQgcHJlc2VudGF0aW9ucyIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2LWxpbmsgbWwtMyBteS0xIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTMtOSIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIjQuMy45IERlc2lnbmluZyBhdWRpbyBtZWRpYSIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2LWxpbmsgbWwtMyBteS0xIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTMtMTAiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCI0LjMuMTAgRGVzaWduaW5nIGEgUE9EQ0FTVCIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoIm5hdiIsIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIG1sLTUgbXktMSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTMtMy00IiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkFzc2lnbm1lbnQgNC4zIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIiwgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiNC40IFV0aWxpemluZyBNYXRlcmlhbHMgZHVyaW5nIEluc3RydWN0aW9uIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJuYXYiLCB7IHN0YXRpY0NsYXNzOiAibmF2IG5hdi1waWxscyBmbGV4LWNvbHVtbiIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIG1sLTMgbXktMSIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS00LTEiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCI0LjQuMSBQcmludGVkIG1hdGVyaWFscyIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2LWxpbmsgbWwtMyBteS0xIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTQtMiIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICI0LjQuMiBBZHZhbnRhZ2VzIGFuZCBkaXNhZHZhbnRhZ2VzIG9mIHVzaW5nIGRpZmZlcmVudCB0eXBlcyBvZiBwcmludGVkIG1hdGVyaWFscyAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIG1sLTMgbXktMSIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS00LTMiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCI0LjQuMyBBcHBsaWNhdGlvbiBvZiBwcmludGVkIG1hdGVyaWFscyAiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJuYXYiLCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayBtbC01IG15LTEiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS00LTMtMSIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJBY3Rpdml0eSA0LjIiKV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWxpbmsiLCBhdHRyczogeyBocmVmOiAiI2l0ZW0tNSIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIjQuNSBVdGlsaXppbmcgT3RoZXIgVHlwZXMgb2YgSW5zdHJ1Y3Rpb25hbCBNYXRlcmlhbHMgZHVyaW5nIEluc3RydWN0aW9uIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJuYXYiLCB7IHN0YXRpY0NsYXNzOiAibmF2IG5hdi1waWxscyBmbGV4LWNvbHVtbiIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIG1sLTMgbXktMSIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS01LTEiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiNC41LjEgVHlwZXMgb2Ygbm9uLXByaW50IG1lZGlhIGF2YWlsYWJsZSBmb3IgdGVhY2hpbmcgYW5kIGxlYXJuaW5nIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayBtbC0zIG15LTEiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2l0ZW0tNS0yIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIjQuNS4yIEhvdyB0byBzZWxlY3QgYW5kIHVzZSBkaWZmZXJlbnQgdHlwZXMgb2Ygbm9uLXByaW50IG1lZGlhIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygibmF2IiwgeyBzdGF0aWNDbGFzczogIm5hdiBuYXYtcGlsbHMgZmxleC1jb2x1bW4iIH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIG1sLTUgbXktMSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTUtMi0xIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiNC41LjIuMSBTZWxlY3RpbmcgYW5kIHVzaW5nIGRpZmZlcmVudCB0eXBlcyBvZiBpbnN0cnVjdGlvbmFsIG1hdGVyaWFscyIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayBtbC01IG15LTEiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS01LTItMiIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIjQuNS4yLjIgSG93IHRvIHV0aWxpemUgY29tbXVuaXR5IHJlc291cmNlcyBpbiB0ZWFjaGluZyIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayBtbC01IG15LTEiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS01LTItMyIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCI0LjUuMi4zIFR3by1kaW1lbnNpb25hbCB2aXN1YWxzICIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIG1sLTUgbXktMSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpdGVtLTUtMi00IiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjQuNS4yLjQgRGlzcGxheXMiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayBtbC01IG15LTEiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS01LTItNSIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCI0LjUuMi41IFV0aWxpemluZyBhdWRpbyBtYXRlcmlhbHMgIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2LWxpbmsgbWwtNSBteS0xIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2l0ZW0tNS0yLTYiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiNC41LjIuNiBTZWxlY3RpbmcgYW5kIHVzaW5nIHN0aWxsIHByb2plY3Rpb24iKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayBtbC01IG15LTEiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS01LTItNyIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCI0LjUuMi43IFV0aWxpemluZyBtb3Rpb24gbWVkaWEiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayBtbC01IG15LTEiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS01LTItOCIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCI0LjUuMi44IENvbXB1dGVyLWJhc2VkIG11bHRpbWVkaWEgYW5kIFdlYi1NZWRpYSIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS02IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlVuaXQgc3VtbWFyeSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjaXRlbS03IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlJlZmVyZW5jZXMiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgIF92bS5fdigKICAgICAgICAiIFNvIGZhciB3ZSBoYXZlIGRpc2N1c3NlZCB0aGUgdmFyaW91cyB0eXBlcyBvZiBpbnN0cnVjdGlvbmFsIG1lZGlhIHRoYXQgd2UgY291bGQgdXNlIGluIG91ciB0ZWFjaGluZywgYnV0IHRoaW5rIGZvciBhIG1vbWVudCBhYm91dCB5b3VyIG93biBjbGFzc3Jvb20gd2hlcmUgeW91IGhhdmUgYmVlbiB0ZWFjaGluZyBmb3Igc28gbWFueSB5ZWFycyBhbmQgbWFueSBvZiB0aGVzZSBtZWRpYSB0aGF0IGFyZSBhdmFpbGFibGUuIEFuc3dlciBob25lc3RseSwgIgogICAgICApLAogICAgICBfYygiaSIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiICdIb3cgbXVjaCBvZiBtZWRpYSBtYXRlcmlhbHMgaGF2ZSB5b3UgdXNlZCBvdmVyIHRoZSBwYXN0IGZldyB5ZWFycz8gV2h5IGhhdmUgeW91IG5vdCB1c2VkIG90aGVyIG1lZGlhPyAiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sIFsKICAgICAgX3ZtLl92KAogICAgICAgICIgSWYgeW91IHRoaW5rIGhhcmQgYWJvdXQgdGhlIHJlYXNvbiB3aHkgeW91IGhhdmUgbm90IHVzZWQgc29tZSBvZiB0aGUgbWVkaWEsIHRoZSBtYWluIHJlYXNvbiBpcyB0aGF0IHNvbWUgbWVkaWEgYXJlIG5vdCByZWFkaWx5IGF2YWlsYWJsZS4gU28sIGlmIHlvdSB3ZXJlIGEgbGl0dGxlIGNyZWF0aXZlLCB5b3UgY291bGQgZGVzaWduIGFuZCBwcm9kdWNlIHlvdXIgb3duIGluc3RydWN0aW9uYWwgbWVkaWEgdG8gbWVldCB5b3VyIGluc3RydWN0aW9uYWwgbmVlZHMuIEFzIGEgdGVhY2hlciB1bmRlcmdvaW5nIGZ1cnRoZXIgdHJhaW5pbmcsIHlvdSBuZWVkIHRvIHNlZSB5b3Vyc2VsZiBhcyBhIHByb2Zlc3Npb25hbCB0ZWFjaGVyIGZvY3VzZWQgb24gYnVpbGRpbmcgc2tpbGxzIGZvciB0aGUgZnV0dXJlLiBJIGFtIHN1cmUgeW91IHdvdWxkIGxpa2UgdG8gbWFrZSBhIGRpZmZlcmVuY2UgaW4gdGhlIHdheSB5b3Ugd2lsbCB0ZWFjaCBhZnRlciBmdXJ0aGVyaW5nIHlvdXIgdHJhaW5pbmcsIGFuZCBub3QgY29udGludWUgdGVhY2hpbmcgdGhlIHdheSB5b3UgaGF2ZSBhbHdheXMgZG9uZSBpbiB0aGUgcGFzdC4iCiAgICAgICksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoCiAgICAgICAgIiBJbiB0aGlzIHVuaXQsIHlvdSBhcmUgbm90IGV4cGVjdGVkIHRvIGJlY29tZSBhIHNraWxsZWQgaW5zdHJ1Y3Rpb25hbCB0ZWNobm9sb2dpc3Qgb3IgYSBtZWRpYSBzcGVjaWFsaXN0IGJ5IG1ha2luZyB5b3VyIG93biB0ZWFjaGluZyBtYXRlcmlhbHMuIFRoaXMgd291bGQgYmUgdW5yZWFsaXN0aWMgZ2l2ZW4gdGhlIGxpbWl0ZWQgdHJhaW5pbmcgeW91IHdpbGwgaGF2ZSBhY3F1aXJlZCBhdCB0aGUgZW5kIG9mIHRoaXMgY291cnNlIGFuZCB0aGUgbGltaXRlZCBmYWNpbGl0aWVzIGF2YWlsYWJsZSBpbiB0aGUgc2Nob29scyB3aGVyZSB5b3UgdGVhY2guIEFkbWl0dGVkbHkgdGhlIGluc3RydWN0aW9uYWwgbWF0ZXJpYWxzIGFyZSB2ZXJ5IHNjYXJjZSBpbiBvdXIgY2xhc3Nyb29tcyB5ZXQgd2UgYWxsIHdhbnQgdG8gaW1wcm92ZSB0aGUgd2F5IHdlIGhlbHAgb3VyIHN0dWRlbnRzIGxlYXJuIGJ5IGVucmljaGluZyB0aGUgbGVhcm5pbmcgZW52aXJvbm1lbnQgd2l0aCBhcHByb3ByaWF0ZSBpbnN0cnVjdGlvbmFsIG1lZGlhIGFuZCBtYXRlcmlhbHMuIFRoZXJlZm9yZSwgd2UgaGF2ZSB0byBiZSBjcmVhdGl2ZSBhcyB0ZWFjaGVycyBpbiBvcmRlciB0byBtYWtlIG91ciBpbnN0cnVjdGlvbmFsIGVudmlyb25tZW50IG1vcmUgaW50ZXJlc3RpbmcgYW5kIG1vdGl2YXRpbmcuICIKICAgICAgKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7IHN0YXRpY0NsYXNzOiAibm90ZSBub3RlLWluZm8gdGV4eS1qdXN0aWZ5IG1lbWUgdGV4dC1qdXN0aWZ5IiB9LAogICAgICBbCiAgICAgICAgX2MoImJsb2NrcXVvdGUiLCB7IHN0YXRpY0NsYXNzOiAiYmxvY2txdW90ZSBicS1pbmZvIiB9LCBbCiAgICAgICAgICBfYygiaDUiLCB7IGF0dHJzOiB7IGlkOiAiaXRlbS0xLTEiIH0gfSwgWwogICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtcGFwZXItcGxhbmUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiBVbml0IE91dGNvbWVzIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgVXBvbiBjb21wbGV0aW9uIG9mIHRoaXMgdW5pdCB5b3Ugd2lsbCBiZSBhYmxlIHRvOiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljU3R5bGU6IHsgImxpc3Qtc3R5bGUtdHlwZSI6ICJzcXVhcmUiIH0gfSwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgImlkZW50aWZ5IHRoZSBkZXNpZ24gcHJvY2VzcyB0byBmb2xsb3cgaW4gY3JlYXRpbmcgeW91ciBvd24gaW5zdHJ1Y3Rpb25hbCBtYXRlcmlhbHMiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJkZXNpZ24sIHBsYW4gYW5kIHByb2R1Y2UgZGlmZmVyZW50IGluc3RydWN0aW9uYWwgbWF0ZXJpYWxzLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImg1IiwgeyBhdHRyczogeyBpZDogIml0ZW0tMS0yIiB9IH0sIFsKICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLWNoZWNrLXNxdWFyZSIgfSwgW192bS5fdigiIFRlcm1pbm9sb2d5IildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtbC01IHRleHQtanVzdGlmeSIgfSwgWwogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgSW5zdHJ1Y3Rpb25hbCBkZXNpZ24gaXMgdGhlIGNvbXBvbmVudCBvZiB0aGUgcHJvY2VzcyB0aGF0IGhlbHBzIHlvdSB0byB0aGluayBzdHJhdGVnaWNhbGx5IGFib3V0IHRoZSB0ZWFjaGluZyBhbmQgbGVhcm5pbmcgZXhwZXJpZW5jZSB5b3UgYXJlIHRhcmdldGluZy4gSXQgaGVscHMgeW91IHRvIGFydGljdWxhdGUgZXZlcnkgZXNzZW50aWFsIGluZ3JlZGllbnQgaW4gdGhlIHRlYWNoaW5nLWxlYXJuaW5nIHByb2Nlc3MuIEl0IHBhaW50cyB0aGUgYmlnZ2VyLXBpY3R1cmUgdmVyc2lvbiBvZiBpbnN0cnVjdGlvbiB0aGF0IHJlc3VsdHMgaW4gYSBjb21wbGV0ZSBhbmQgcHJlY2lzZSBibHVlcHJpbnQgb2Ygd2hhdCBzaG91bGQgaGFwcGVuIGFuZCBob3cuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBEZXNpZ25pbmcgaW5zdHJ1Y3Rpb25hbCBtYXRlcmlhbHMgZGVhbHMgd2l0aCBjcmVhdGl2ZSB0aGlua2luZyBhbmQgYW4gYW5hbHlzaXMgb2YgaG93IHRoZSBjcmVhdGl2ZSB0aGlua2luZyBwcm9jZXNzIGlzIHN1Y2Nlc3NmdWxseSB1c2VkLiBXaGF0IGlzIGFsc28gcmV2ZWFsZWQgaXMgdGhlIGZhY3QgdGhhdCBtb3N0IG9mdGVuIHRocmVlIHN0ZXBzIGFyZSBmb2xsb3dlZC4gVGhlc2Ugc3RlcHMgaW5jbHVkZTogIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgICAgX2MoIm9sIiwgWwogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoIkRlc2lyZTogIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJZb3UgbmVlZCB0byBoYXZlIGFuIGluaXRpYWwgbW90aXZhdGlvbiB0byB3YW50IHRvIHNvbHZlIGEgcHJvYmxlbSB3aXRoIHdoaWNoIHlvdSBhcmUgY29uY2VybmVkICIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiUHJlcGFyYXRpb246ICIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiR2F0aGVyIGluZm9ybWF0aW9uIHJlbGF0aXZlIHRvIHRoZSBwcm9ibGVtIGFzIHJldmVhbGVkIGJ5IHRoZSBwbGFubmluZyBzdGFnZXMgb2YgYXVkaWVuY2UgaWRlbnRpZmljYXRpb24sIG9iamVjdGl2ZSBzdGF0ZW1lbnQsIGFuZCBjb250ZW50IGxpc3RpbmcuICIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiTWFuaXB1bGF0aW9uOiAiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlBsYXkgd2l0aCBhIG51bWJlciBvZiBpZGVhcyB0byBkZXZpc2Ugb25lIG9yIG1vcmUgcG9zc2libGUgc29sdXRpb25zIG9yIHRvIGZpbmQgYSBuZXcgcGF0dGVybiBvZiB0cmVhdGluZyB0aGUgY29udGVudCB0aGF0IGRpZmZlcnMgZnJvbSB0aGF0IHdoaWNoIGhhcyBiZWVuIGZhbWlsaWFyIChLZW1wICYgRGF5dG9uLCAxOTg1KS4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgSW4gZGVzaWduaW5nIHlvdXIgb3duIGluc3RydWN0aW9uYWwgbWVkaWEsIHlvdSB3aWxsIGJlIGd1aWRlZCBieSB0aHJlZSBtYWluIHF1ZXN0aW9uczogIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIGZvbnQtaXRhbGljIiB9LCBbCiAgICAgICAgX2MoIm9sIiwgWwogICAgICAgICAgX2MoImxpIiwgW192bS5fdigiV2hlbiBkbyBJIHVzZSBtZWRpYT8gIildKSwKICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIldoYXQgd2lsbCB0aGUgbWVkaWEgZG8gZm9yIHRoZSBzdHVkZW50cz8iKV0pLAogICAgICAgICAgX2MoImxpIiwgW192bS5fdigiSG93IGRvIEkgcHJlcGFyZSBmb3IgdGhlIHVzZSBvZiB0aGlzIG1lZGlhPyIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJub3RlIG5vdGUtc2Vjb25kYXJ5IHRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBBcyB5b3UgYW5zd2VyIGVhY2ggb2YgdGhlIGFib3ZlIHF1ZXN0aW9ucywgeW91IHdpbGwgYmUgZ3VpZGVkIGluIHlvdXIgZGVzaWduIG9mIHRoZSByaWdodCBpbnN0cnVjdGlvbmFsIG1lZGlhIHRvIHVzZSBpbiBvcmRlciB0byBtZWV0IHlvdXIgaW5zdHJ1Y3Rpb25hbCBnb2FsLiAiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sIFsKICAgICAgX2MoImkiLCBbX3ZtLl92KCJTdGFydCB0aGUgcHJvY2VzcyB3aXRoIGFuIGlkZWEuIildKSwKICAgICAgX3ZtLl92KAogICAgICAgICIgQW4gaWRlYSwgYSBwcm9ibGVtIHNpdHVhdGlvbiwgb3IgYSBsZWFybmluZyBuZWVkIGlkZW50aWZpZWQgd2l0aGluIGFuIGluc3RydWN0aW9uYWwtZGVzaWduIHBsYW4gZm9yIGEgdG9waWMgb3IgdW5pdCBvZiBzdHVkeSBzaG91bGQgYmUgdGhlIHN0YXJ0aW5nIHBvaW50IGZvciB0aGUgZGV2ZWxvcG1lbnQgb2YgeW91ciBpbnN0cnVjdGlvbmFsIG1lZGlhLiBBbiBpZGVhIGluZGljYXRlcyBhbiBhcmVhIG9mIGludGVyZXN0IGJ1dCB0aGUgbW9yZSB1c2VmdWwgaWRlYXMgYXJlIHRob3NlIGNvbmNlaXZlZCBpbiB0ZXJtcyBvZiBhIG5lZWQgcmVsYXRpbmcgdG8gYSBzcGVjaWZpYyB0YXJnZXQgZ3JvdXAuIEluIG91ciBjYXNlIGFzIHRlYWNoZXJzLCBvdXIgc3R1ZGVudHMnIG5lZWQgZm9yIGNlcnRhaW4gaW5mb3JtYXRpb24gb3IgZm9yIGEgc2tpbGwsIG9yIHRoZSBuZWVkIGVzdGFibGlzaCBhIGRlc2lyZWQgYXR0aXR1ZGUuICIKICAgICAgKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUgZm9udC1pdGFsaWMiIH0sIFsKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk1vdGl2YXRlIGFuIGludGVyZXN0IG9yIGEgZGVncmVlIG9mIGFjdGlvbiIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiUHJlc2VudCBpbmZvcm1hdGlvbjsiKV0pLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlByb3ZpZGUgaW5zdHJ1Y3Rpb24uICIpXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibm90ZSBub3RlLXNlY29uZGFyeSB0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICBfdm0uX3YoIiBPbmNlIHlvdSBoYXZlIGZvcm11bGF0ZWQgYW4gaWRlYSwgIiksCiAgICAgIF9jKCJpIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgeW91IG5lZWQgdG8gYnVpbGQgb24gdGhhdCBpZGVhIGJ5IHRyYW5zbGF0aW5nIHRoZSBnZW5lcmFsIGlkZWEgaW50byBjbGVhci1jdXQgYW5kIHNwZWNpZmljIHN0YXRlbWVudCBvZiBvbmUgb3IgbW9yZSBvYmplY3RpdmVzIGZvciB0aGUgcGxhbm5lZCBsZWFybmluZyB3aXRoaW4gYW4gaW5zdHJ1Y3Rpb25hbCBjb250ZXh0LiAiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sIFsKICAgICAgX3ZtLl92KAogICAgICAgICIgbGVhcm4gaW4gYSBwYXJ0aWN1bGFyIGxlc3Nvbi4gVGhpcyBpcyBzdGF0ZWQgaW4gdGVybXMgb2YgaW5zdHJ1Y3Rpb25hbC9sZWFybmluZyBvYmplY3RpdmVzLiBJbnN0cnVjdGlvbmFsL2xlYXJuaW5nIG9iamVjdGl2ZXMgcHJvdmlkZSBjbGVhciBndWlkYW5jZSB0aGF0IGFsbG93cyBhbiBvcmRlcmx5IHByZXNlbnRhdGlvbiBvZiBjb250ZW50IGxlYWRpbmcgdG8gbGVhcm5pbmcuIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigKICAgICAgICAiIFRvIHByb3ZpZGUgZm9yIHRoZSBkZXNpcmVkIGxlYXJuaW5nLCBvYmplY3RpdmVzIGFyZSBzdGF0ZWQgdG8gaW5kaWNhdGUgdGhlIG91dGNvbWVzIG9mIHRoZSBsZWFybmluZy4gT2JqZWN0aXZlcyBhcmUgZ3JvdXBlZCBpbnRvIHRocmVlIGJyb2FkIGNhdGVnb3JpZXMsIG5hbWVseTsgY29nbml0aXZlIHdoaWNoIGZvY3VzZXMgb24ga25vd2xlZGdlIGFuZCBpbmZvcm1hdGlvbiBhbmQgaXMgcmVwcmVzZW50ZWQgYnkgdGhpbmtpbmcgYW5kIG90aGVyIGludGVsbGVjdHVhbCBza2lsbHMsIHBzeWNob21vdG9yIHdoaWNoIGZvY3VzZXMgb24gcGVyZm9ybWFuY2Ugc2tpbGxzLCBhbmQgYWZmZWN0aXZlIHdoaWNoIGZvY3VzZXMgb24gYXR0aXR1ZGVzIGFuZCB2YWx1ZXMuIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigKICAgICAgICAiIERlcGVuZGluZyBvbiB0aGUgY29udGVudCB0byBiZSB0YXVnaHQsIHlvdSBmb3JtdWxhdGUgb2JqZWN0aXZlcyB0byBhZGRyZXNzIGVhY2ggb25lIG9mIHRoZSBicm9hZCBsZWFybmluZyBkb21haW5zLiBGb3IgZXhhbXBsZSwgeW91IG1pZ2h0IHN0YXRlIHlvdXIgaW5zdHJ1Y3Rpb25hbCBvYmplY3RpdmVzIHRvIGFkZHJlc3MgdGhlIGZvbGxvd2luZyBsZWFybmluZyBvdXRjb21lczogIgogICAgICApCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJIZWxwIGxlYXJuZXJzIHRvIGFwcGx5IGNlcnRhaW4gc3RlcHMgaW4gYSBnaXZlbiBwcm9jZXNzOyIpCiAgICAgICAgXSksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJIZWxwIGxlYXJuZXJzIHRvIHByYWN0aWNlIGEgY2VydGFpbiBza2lsbCBvciBhdHRpdHVkZSIpCiAgICAgICAgXSksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJIZWxwIGxlYXJuZXJzIHRvIHJlc3BvbmQgdG8gYSBjZXJ0YWluIHNvY2lhbCBuZWVkLiAiKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICBfdm0uX3YoCiAgICAgICAgIiBZb3VyIGRlc2lnbiBwcm9jZXNzIHNob3VsZCBhbHNvIGNvbnNpZGVyIHRoZSBhdWRpZW5jZSBvciB0aGUgbGVhcm5lci4gWW91IG5lZWQgdG8gYmUgYXdhcmUgb2YgdGhlIGxlYXJuZXIgY2hhcmFjdGVyaXN0aWNzIHN1Y2ggYXMgYWdlLCBlZHVjYXRpb25hbCBsZXZlbCwga25vd2xlZGdlIG9mIHRoZSBzdWJqZWN0IG1hdHRlciwgYXR0aXR1ZGVzIHRvd2FyZHMgdGhlIHN1YmplY3QsIGN1bHR1cmFsIGNvbnRleHQgb2YgdGhlIGxlYXJuZXJzLCB0aGUgbnVtYmVyIG9mIGxlYXJuZXJzIGluIGNsYXNzLCBhbmQgaW5kaXZpZHVhbCBkaWZmZXJlbmNlcyB3aXRoaW4gdGhlIGdyb3VwLiBBdWRpZW5jZSBjaGFyYWN0ZXJpc3RpY3MgaW5mbHVlbmNlIHlvdSBhcyB5b3UgY29uc2lkZXIgdGhlIGlkZWFzIHRvIGJlIHByZXNlbnRlZCwgbGV2ZWwgb2YgbGVhcm5lciBpbnZvbHZlbWVudCwgYW5kIGRlZ3JlZSBvZiBwYXJ0aWNpcGF0aW9uLiIKICAgICAgKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoCiAgICAgICAgIiBGaW5hbGx5LCBvYnRhaW4gYXNzaXN0YW5jZSBmcm9tIHBlcnNvbnMgd2hvIGhhdmUgc3BlY2lhbCBrbm93bGVkZ2UgYW5kIHNraWxscyByZWxhdGluZyB0byB0aGUgbWF0ZXJpYWxzIGJlaW5nIGRldmVsb3BlZCBvciBvbiBzaW1pbGFyIGRldmVsb3BlZCBtYXRlcmlhbHMuIFN1Y2ggcGVvcGxlIG1pZ2h0IGluY2x1ZGUgY29tcHV0ZXIgZXhwZXJ0cywgY29tbXVuaWNhdGlvbiBzcGVjaWFsaXN0cywgb3IgaW5zdHJ1Y3Rpb25hbCBkZXNpZ25lcnMuIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigKICAgICAgICAiIFBsZWFzZSBub3RlIHRoYXQganVzdCBsaWtlIHRoZXJlIGlzIG5vIHNpbmdsZSByZWNpcGUgdG8gY3JlYXRpbmcgZWZmZWN0aXZlIGluc3RydWN0aW9uLCB0aGVyZSBhcmUgZGlmZmVyZW50IHdheXMgb2YgY3JlYXRpbmcgbGVhcm5pbmcgZXhwZXJpZW5jZXMuIEhvd2V2ZXIsIHRoZSBmb2xsb3dpbmcgcHJvY2VkdXJlIGNvdWxkIGd1aWRlIHlvdSBpbiB0aGlzIHByb2Nlc3MuIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIikKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgUmVmZXIgcmVwZWF0ZWRseSB0byB5b3VyIGluc3RydWN0aW9uYWwgcGxhbi4gVGhlIGxlc3NvbiBwbGFuIGNvbnRhaW5zIHRoZSBkaXJlY3Rpb24gYW5kIGFjdGl2aXRpZXMgdGhhdCB5b3UgaGF2ZSBkZXRlcm1pbmVkIHlvdXIgc3R1ZGVudHMgbmVlZC4gIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBXaXRoaW4gdGhlIHBsYW4sIGxvb2sgY2xvc2VseSBhdCB0aGUgb3ZlcmFsbCBsZWFybmluZyBvYmplY3RpdmVzIGFuZCB0aGUga2V5IGFjdGl2aXRpZXMgdGhhdCBuZWVkIHRvIG9jY3VyIHNvIHRoYXQgc3R1ZGVudHMgbWVldCB0aGVtLiBBc2sgeW91cnNlbGYgdGhlIHF1ZXN0aW9uOiAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImkiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiICdXaGF0IG5lZWRzIHRvIGJlIGNvbnN0cnVjdGVkIHNvIHRoYXQgdGhlIGFjdGl2aXRpZXMgYXJlIHN1Y2Nlc3NmdWw/JyAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgRm9yIGV4YW1wbGUsICIpLAogICAgICAgICAgX2MoImkiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiICdEbyBteSBzdHVkZW50cyBuZWVkIHNvbWUgZXhwbGFuYXRpb24sIGd1aWRlZCBwcmFjdGljZSBvciBzb21lIG9ic2VydmF0aW9uPycgIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiIFJlZmxlY3Qgb24gd2hhdCB5b3Uga25vdyBvciBoYXZlIHNlZW4uIEZvciBpbnN0YW5jZSwgIiksCiAgICAgICAgICBfYygiaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgQ2FuIEkgdGFsayB0byBhIHRlYWNoZXIgd2hvIGhhcyB0YXVnaHQgc2ltaWxhciBjb25jZXB0cyBiZWZvcmU/ICIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIiBQdXQgeW91cnNlbGYgaW4gdGhlIGxlYXJuZXJzJyBzaG9lcy4gIiksCiAgICAgICAgICBfYygiaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgV2hhdCB3b3VsZCBJIHdhbnQgdG8gZXhwZXJpZW5jZSBpbiBvcmRlciB0byBlZmZlY3RpdmVseSBsZWFybiB0aGUgbWF0ZXJpYWxzPyAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIE91dGxpbmUgdGhlIG1hdGVyaWFscy4gSGF2ZSBzdHVkZW50cyByZXZpZXcgd2hhdCB5b3UgaGF2ZSB0aG91Z2h0LiAiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiIENvbnN0cnVjdCBhIGRyYWZ0IHNldCBvZiB0aGUgbWF0ZXJpYWxzLiAiKV0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBSZXZpZXcgdGhlIG1hdGVyaWFscyB0byBlbnN1cmUgdGhhdCB5b3UgbWFrZSBhbGwgbmVlZGVkIGNoYW5nZXMgKEtlbXAgJiBEYXl0b24sIDE5ODUpLiAiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWwtNSIgfSwgWwogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgTm93IHRoYXQgd2Uga25vdyB0aGUgcHJvY2VzcyBmb3IgZGVzaWduaW5nIHlvdXIgb3duIGluc3RydWN0aW9uYWwgbWVkaWEsIGxldCB1cyBub3cgZGlzY3VzIGhvdyB5b3UgY2FuIGRlc2lnbiwgcGxhbiBhbmQgcHJvZHVjZSBkaWZmZXJlbnQgdHlwZXMgb2YgaW5zdHJ1Y3Rpb25hbCBtYXRlcmlhbHMuIFBsZWFzZSBub3RlIHRoYXQgd2UgY2Fubm90IGRpc2N1c3MgaG93IHRvIGRlc2lnbiwgcGxhbiBhbmQgcHJvZHVjZSBhbGwgdGhlIGRpZmZlcmVudCB0eXBlcyBvZiBtZWRpYSB0aGF0IHdlIGRpc2N1c3NlZCBpbiBVbml0IDIuIEluc3RlYWQsIHdlIHdpbGwgcGljayBvbiBhIGZldyB0eXBlcyBpbnN0cnVjdGlvbmFsIG1lZGlhIG1hdGVyaWFscyB0aGF0IHlvdSBhcmUgbGlrZWx5IHRvIHByb2R1Y2UgaW4geW91ciBvd24gbG9jYWwgY29udGV4dC4gTGV0IHVzIHN0YXJ0IHdpdGggdGhlIHZpc3VhbHMuICIKICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICBfdm0uX3YoCiAgICAgICAgIiBEZXNpZ25pbmcgYSB2aXN1YWwgZGlzcGxheSBiZWdpbnMgd2l0aCBnYXRoZXJpbmcgb3IgcHJvZHVjaW5nIHRoZSBpbmRpdmlkdWFsIHBpY3RvcmlhbCBhbmQgdGV4dCBlbGVtZW50cyB0aGF0IHdpbGwgYmUgdXNlZCBpbiB0aGUgZGlzcGxheS4gQXQgdGhpcyBzdGFnZSwgaXQgaXMgYXNzdW1lZCB0aGF0IHlvdSBoYXZlIGFscmVhZHkgZGV0ZXJtaW5lZCB0aGUgc3R1ZGVudHMnIG5lZWRzIGFuZCBpbnRlcmVzdHMgcmVnYXJkaW5nIHRoZSB0b3BpYyB0byBiZSB0YXVnaHQgYW5kIGhhdmUgZGVjaWRlZCBvbiB0aGUgb2JqZWN0aXZlcyB0byBiZSBhY2hpZXZlZCB0aHJvdWdoIHRoZSB2aXN1YWxzIHRoYXQgeW91IGFyZSBwbGFubmluZyB0byBwcmVzZW50IHdoZXRoZXIgdmlhIGEgYnVsbGV0aW4gYm9hcmQsIG92ZXJoZWFkIHRyYW5zcGFyZW5jaWVzLCBQb3dlclBvaW50IHByZXNlbnRhdGlvbiwgcHJpbnRlZCBoYW5kb3V0cywgb3Igb3RoZXIgY29tcHV0ZXIgc2NyZWVuIGRpc3BsYXlzLiIKICAgICAgKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigKICAgICAgICAiIEluIHlvdXIgdmlzdWFsIGRlc2lnbiwgeW91IG5lZWQgdG8gY29uc2lkZXIgaG93IHlvdSB3aWxsIGFjaGlldmUgdGhlIHZpc3VhbCBkZXNpZ24gZ29hbCwgd2hpY2ggZW5jb21wYXNzZXM7ICIKICAgICAgKSwKICAgICAgX2MoImkiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBlbnN1cmluZyBsZWdpYmlsaXR5LCBoZWxwaW5nIHRoZSB2aWV3ZXIgdG8gcXVpY2tseSBzZWUgeW91ciBtZXNzYWdlLCBhbmQgZm9jdXNpbmcgYXR0ZW50aW9uIG9uIGtleSBwb2ludHMgKEhlaW5pY2ggZXQgYWw7IDE5OTY6NzQpLiAiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sIFsKICAgICAgX3ZtLl92KCIgVGhlIGtleSBkZXNpZ24gc3VnZ2VzdGlvbnMgdG8gY29uc2lkZXIgaW5jbHVkZTogIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX2MoImkiLCBbX3ZtLl92KCJWaXN1YWwgZWxlbWVudHMiKV0pXSksCiAgICAgICAgX2MoImxpIiwgW19jKCJpIiwgW192bS5fdigiVmVyYmFsIGVsZW1lbnRzIildKV0pLAogICAgICAgIF9jKCJsaSIsIFtfYygiaSIsIFtfdm0uX3YoIkVsZW1lbnRzIHRoYXQgYWRkIGFwcGVhbC4iKV0pXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgIF9jKCJpIiwgW192bS5fdigiUmVhbGlzdGljIildKSwKICAgICAgX3ZtLl92KAogICAgICAgICIgdmlzdWFscyBzaG93IHRoZSBhY3R1YWwgb2JqZWN0IHVuZGVyIHN0dWR5LiBUaGUgZGVncmVlIG9mIHJlYWxpc20gY2FuIGJlIGhlaWdodGVuZWQgYnkgdXNlIG9mIHJlYWxpc3RpYyBjb2xvdXJzLCB3aGljaCBpcyBvbmUgb2YgdGhlIG1ham9yIHB1cnBvc2VzIHRoYXQgY29sb3VyIHNlcnZlcy4gVGhlIHJlYWxpc3RpYyB2aXN1YWwgaXMgdGhlIGNsb3Nlc3QgaXQgdGhpbmcgdG8gdGhlIG9yaWdpbmFsLiIKICAgICAgKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJiciIpLAogICAgICBfYygiaSIsIFtfdm0uX3YoIkFuYWxvZ2ljIildKSwKICAgICAgX3ZtLl92KAogICAgICAgICIgdmlzdWFscyBjb252ZXkgYSBjb25jZXB0IG9yIHRvcGljIGJ5IHNob3dpbmcgc29tZXRoaW5nIGVsc2UgYW5kIGltcGx5aW5nIGEgc2ltaWxhcml0eS4gVGVhY2hpbmcgYWJvdXQgZWxlY3RyaWNpdHkgZmxvdyBieSBzaG93aW5nIHdhdGVyIGZsb3dpbmcgaW4gc2VyaWVzIGFuZCBwYXJhbGxlbCBwaXBlcyBpcyBhbiBleGFtcGxlIG9mIHVzaW5nIGFuYWxvZ2ljIHZpc3VhbHMuIFN1Y2ggdmlzdWFscyBoZWxwIHRoZSBsZWFybmVyIHRvIGludGVycHJldCBuZXcgaW5mb3JtYXRpb24gaW4gbGlnaHQgb2YgcHJpb3Iga25vd2xlZGdlIGFuZCBpbiB0aGF0IHdheSBmYWNpbGl0YXRpbmcgbGVhcm5pbmcuIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJpIiwgW192bS5fdigiT3JnYW5pemF0aW9uYWwiKV0pLAogICAgICBfdm0uX3YoCiAgICAgICAgIiB2aXN1YWxzIGluY2x1ZGUgZmxvd2NoYXJ0cywgZ3JhcGhzLCBtYXBzLCBjbGFzc2lmaWNhdGlvbiBjaGFydHMsIGV0Yy4gVGhleSBhcmUgbWFpbmx5IHVzZWQgdG8gc2hvdyByZWxhdGlvbnNoaXBzIGFtb25nIGNvbmNlcHRzIG9yIHBvaW50cyBpbiB0ZXh0dWFsIG1hdGVyaWFsLiAiCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoIlN1cnByaXNlIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIi4gQ29uc2lkZXIgd2hhdCBncmFicyBhdHRlbnRpb24uIFlvdSB3aWxsIG5lZWQgdG8gcHJvdmlkZSBub3ZlbCBzdGltdWxpIGV2ZXJ5IHRpbWUgaW4gb3JkZXIgdG8gc3VzdGFpbiB0aGUgYXR0ZW50aW9uIG9mIHRoZSB2aWV3ZXJzLiAiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCIgVGV4dHVyZSAiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLSBtb3N0IHZpc3VhbHMgYXJlIHR3by1kaW1lbnNpb25hbCBidXQgeW91IGNvdWxkIGFkZCBhIHRoaXJkIGRpbWVuc2lvbiB3aXRoIHRoZSB1c2Ugb2YgdGV4dHVyZSBvciBhY3R1YWwgbWF0ZXJpYWxzLiBGb3IgZXhhbXBsZSwgeW91IGNvdWxkIHVzZSBjZXJlYWwgZ3JhaW5zIHRvIGRlc2lnbiBhIG1hcCBvZiBTd2F6aWxhbmQgdGhhdCB3aWxsIGFwcGVhciBsaWtlIGl0IGhhcyBhIHRoaXJkIGRpbWVuc2lvbi4gIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiSW50ZXJhY3Rpb24gIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIi4gVmlld2VycyBjYW4gYmUgYXNrZWQgdG8gcmVzcG9uZCB0byB2aXN1YWwgZGlzcGxheXMgYnkgbWFuaXB1bGF0aW5nIG1hdGVyaWFscyBvbiB0aGUgZGlzcGxheSB0byBhbnN3ZXIgcXVlc3Rpb25zIHJhaXNlZCBieSB0aGUgZGlzcGxheS4gRm9yIGV4YW1wbGUsIHlvdSBjYW4gcHJlcGFyZSBhIHZpc3VhbCBkaXNwbGF5IHRvIHNob3cgZGlmZmVyZW50IHBhcnRzIG9yIGNvbXBvbmVudHMsIGFuZCB0aGVuIHByZXBhcmUgc29tZSBjYXJkcyB3aXRoIG5hbWVzIGZvciBzdHVkZW50cyB0byBhbGlnbiB0aGUgY29ycmVjdCBwYXJ0IG9yIGNvbXBvbmVudCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBuYW1lLiAiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibm90ZSBub3RlLXdhcm5pbmciIH0sIFsKICAgICAgX2MoImJsb2NrcXVvdGUiLCB7IHN0YXRpY0NsYXNzOiAiYmxvY2txdW90ZSBicS13YXJuaW5nIiB9LCBbCiAgICAgICAgX2MoImg1IiwgeyBhdHRyczogeyBpZDogIml0ZW0tMy0zLTEiIH0gfSwgWwogICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLW1lZGFsIiB9LCBbX3ZtLl92KCJBc3NpZ25tZW50IDQuMSIpXSkKICAgICAgICBdKSwKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSBmb250LWl0YWxpYyIgfSwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIEZvbGxvd2luZyB0aGUgZGVzaWduIHByb2Nlc3MgdGhhdCBoYXMgYmVlbiBwcmVzZW50ZWQgdG8geW91IGluIHRoaXMgdW5pdCwgZGVzaWduIGEgcG9zdGVyIGJhc2VkIG9uIGEgdG9waWMgZnJvbSBvbmUgb2YgeW91ciB0ZWFjaGluZyBzdWJqZWN0cy4gUHJlc2VudCB0aGUgcG9zdGVyIHRvIHlvdXIgdHV0b3IvbGVjdHVyZXIgZm9yIG1hcmtpbmcuICIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtbC01IHRleHQtanVzdGlmeSIgfSwgWwogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgVGhlIHByb2Nlc3MgZm9yIGRlc2lnbmluZyB0ZXh0IGlzIHNpbWlsYXIgdG8gdGhhdCBvZiBkZXNpZ25pbmcgdmlzdWFscy4gT25jZSB5b3UgaGF2ZSBjcmVhdGVkIHlvdXIgbWVzc2FnZSwgeW91IHdpbGwgbmVlZCB0byBhc3NlbWJsZSB0aGUgZWxlbWVudHMuIFJlbWVtYmVyIHRoYXQgdGV4dCBpcyBkZXNpZ25lZCB1c2luZyB3b3JkIHByb2Nlc3NpbmcgZnJvbSB5b3VyIGNvbXB1dGVyLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgSnVzdCBsaWtlIGluIHZpc3VhbHMsIGNob29zZSB0aGUgYmFja2dyb3VuZCBhbmQgdW5kZXJseWluZyBwYXR0ZXJuLiBEbyBub3Qgc2tpbXAgb24gdGhlIHBhZ2UgbWFyZ2lucywgYXMgcGFnZXMgdGhhdCBhcmUgdG9vIGZ1bGwsIHRvbyBkZW5zZSwgY2x1dHRlcmVkIG9yIHRvbyBkaXNvcmdhbml6ZWQgYXJlIGRpc2NvdXJhZ2luZyB0byByZWFkZXJzLiBSZW1lbWJlciB0aGF0IHBhcmFncmFwaHMgYXJlIGFsaWduZWQgYXQgdGhlIGxlZnQgbWFyZ2luLCBub3QgYXQgdGhlIHJpZ2h0IG1hcmdpbiBvciBhdCBib3RoIG1hcmdpbnM7IHRoZSBsZWZ0IG1hcmdpbiBhbGlnbm1lbnQgcHJvdmlkZXMgYmVzdCByZWFkYWJpbGl0eS4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIE5leHQsIGFycmFuZ2UgdGhlIGVsZW1lbnRzLiBVc2Ugc3BhY2UgYnkgbW92aW5nIGVsZW1lbnRzIGNsb3NlciB0b2dldGhlciBvciBmdXJ0aGVyIGFwYXJ0IGJlZm9yZSB1c2luZyBzdHlsZXMgbGlrZSBib2xkLCBpdGFsaWMsIG9yIHVuZGVybGluZWQgdGV4dC4gVXNlIHRleHQgc3R5bGVzIHRvIHJlaW5mb3JjZSB0aGUgdW5kZXJseWluZyBwYXR0ZXJuIG9mIHRoZSBkb2N1bWVudC4gRm9yIGV4YW1wbGUsIG1ha2Ugc3ViaGVhZGluZ3MgYm9sZCBhbmQgbm90aGluZyBlbHNlIGJvbGQuIE5vdGUgdGhhdCBvbiBhIHZlcnRpY2FsIGRpbWVuc2lvbiwgeW91IG5lZWQgdG8gZGVjaWRlIG9uIHRoZSBzcGFjaW5nIGJldHdlZW4gbGluZXMgb2YgdGV4dCwgYmV0d2VlbiB0aGUgdGl0bGUgYW5kIG90aGVyIHRleHQsIGFuZCBiZXR3ZWVuIHRleHQgYW5kIHN1YmhlYWRpbmdzLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgTm90ZSB0aGF0IHRpdGxlcyBtYXkgYmUgYWxpZ25lZCB3aXRoIHRoZSBsZWZ0IG1hcmdpbiBvciBjZW50cmVkIG9uIHRoZSBwYWdlLiBJZiB5b3UgY2VudHJlIHRoZSB0aXRsZSwgdGFrZSBjYXJlIHRoYXQgaXQgbG9va3MgY2VudHJlZCBhbmQgbm90IHNpbXBseSBtaXNhbGlnbmVkLiBUaGUgc3ViaGVhZGluZ3Mgc2hvdWxkIGJlIGFsaWduZWQgd2l0aCBlYWNoIG90aGVyLCBpZiB0aGV5IGFyZSBjZW50cmVkIGVhY2ggb25lIGFwcGVhcnMgdG8gYmUgYWxpZ25lZCBkaWZmZXJlbnRseSBhbmQgdGhlIHZpZXdlciBtYXkgaGF2ZSB0cm91YmxlIGlkZW50aWZ5aW5nIHRoZW0uIEFsbCByZWd1bGFyIHRleHQgc2hvdWxkIGJlIGFsaWduZWQgYXQgdGhlIHNhbWUgbWFyZ2luIGV4Y2VwdCBmb3IgbGlzdHMgYW5kIGJsb2NrIHF1b3RhdGlvbnMuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBBZnRlciB3b3JkIHByb2Nlc3NpbmcgeW91IG5lZWQgdG8gY2hlY2sgYW5kIHJldmlzZSB0aGUgdGV4dC4gQ2hlY2sgd2hldGhlciB0aGUgdGl0bGVzIGFuZCBzdWJoZWFkaW5ncyB0YWtlIHVwIG1vcmUgdGhhbiBvbmUgbGluZSBhbmQgbWFrZSBzdXJlIHRoYXQgdGhlIHBocmFzZXMgb24gZWFjaCBsaW5lIG1ha2Ugc2Vuc2UuIE1vdmUgYmxvY2tzIG9mIHRleHQgY2xvc2UgdG8gdGhlaXIgc3ViaGVhZGluZ3MgYW5kIGF3YXkgZnJvbSBvdGhlciB0ZXh0IG9uIHRoZSBwYWdlLiBVc2Ugb2Ygc3BhY2UgaGVscHMgdGhlIHZpZXdlciBtYWtlIHNlbnNlIG9mIHRoZSBwYWdlIGVhc2lseSBhbmQgcXVpY2tseS4gQWx3YXlzIHNwZWxsLWNoZWNrIHlvdXIgd29yayBhbmQgZW5zdXJlIHRoYXQgd29yZHMgdGhhdCB3aWxsIG1ha2Ugc2Vuc2UgdG8gYSByZWFkZXIgYW5kIGZhY2lsaXRhdGUgdW5kZXJzdGFuZGluZy4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJiciIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5vdGUgbm90ZS1wcmltYXJ5IiB9LCBbCiAgICAgICAgX2MoImJsb2NrcXVvdGUiLCB7IHN0YXRpY0NsYXNzOiAiYmxvY2txdW90ZSBicS1wcmltYXJ5IiB9LCBbCiAgICAgICAgICBfYygiaDUiLCB7IGF0dHJzOiB7IGlkOiAiaXRlbS0zLTMtMiIgfSB9LCBbCiAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS10b29scyIgfSwgW192bS5fdigiIEFjdGl2aXR5IDQuMSIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IGZvbnQtaXRhbGljIG1lbWUiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgUHJhY3RpY2UgZGVzaWduaW5nIHRleHQgYnkgdGFraW5nIHNvbWUgY29udGVudCBmcm9tIGEgdGV4dGJvb2sgaW4gb25lIG9mIHlvdXIgdGVhY2hpbmcgc3ViamVjdHMgYW5kIGNvbnZlcnQgaXQgaW50byBhIHdvcmQgZG9jdW1lbnQuIE1ha2Ugc3VyZSB0aGF0IHRoZSB0ZXh0IHJ1bnMgdG8gYSBudW1iZXIgb2YgcGFnZXMuIENvbnNpZGVyIHRoZSBkZXNpZ24gcHJpbmNpcGxlcyB0aGF0IGhhdmUgYmVlbiBwcmVzZW50ZWQgdG8geW91IGFib3ZlLiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIGZvbnQtaXRhbGljIiB9LCBbCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgV2hhdCBwYXJ0IG9mIG15IGxlc3NvbiBpcyBpbXBvcnRhbnQgZW5vdWdoIHRvIGJlIHBsYWNlZCBvbiB0aGUgY2hhbGtib2FyZD8gIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBXaGF0IGFzcGVjdHMgb2YgdGhlIGxlc3NvbiBhcmUgbGlrZWx5IHRvIGJlIHVuY2xlYXIgdG8gc29tZSBvZiB0aGUgc3R1ZGVudHM/ICIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgV2hhdCBkaWFncmFtcy9kcmF3aW5ncy9maWd1cmVzIG9yIHN0YXRpc3RpY3MgY2FuIEkgdXNlIG9uIHRoZSBjaGFsa2JvYXJkIHRvIGlsbHVzdHJhdGUgdGhlIGNvbnRlbnQ/ICIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgSG93IGNhbiBJIGNhcGl0YWxpemUgb24gdGhlIGltbWVkaWF0ZSBmZWVkYmFjayBmcm9tIHRoZSBjaGFsa2JvYXJkPyAiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIEhvdyBjYW4gSSBpbnZvbHZlIHRoZSBzdHVkZW50cyBpbiBkZXZlbG9waW5nIGNoYWxrYm9hcmQgd29yaz8gIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5vdGUgbm90ZS13YXJuaW5nIHRleHQtanVzdGlmeSIgfSwgWwogICAgICBfYygiYmxvY2txdW90ZSIsIHsgc3RhdGljQ2xhc3M6ICJibG9ja3F1b3RlIGJxLXdhcm5pbmciIH0sIFsKICAgICAgICBfYygiaDUiLCB7IGF0dHJzOiB7IGlkOiAiaXRlbS0zLTMtMyIgfSB9LCBbCiAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtbWVkYWwiIH0sIFtfdm0uX3YoIkFzc2lnbm1lbnQgNC4yIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIChQR0NFIFNUVURFTlRTKSAiKSwKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSBmb250LWl0YWxpYyIgfSwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIFVzaW5nIHRoZSBjaGFsa2JvYXJkcyBsb2NhdGVkIG91dHNpZGUgQmxvY2sgQyBpbiB0aGUgRmFjdWx0eSBvZiBFZHVjYXRpb24sIGluZGl2aWR1YWxseSBwcmFjdGljZSB3cml0aW5nIG9uIHRoZSBjaGFsa2JvYXJkIGJ5IHdyaXRpbmcgYSBwYXNzYWdlIGJhc2VkIG9uIGNvbnRlbnQgZnJvbSBvbmUgb2YgeW91ciB0ZWFjaGluZyBzdWJqZWN0cy4gQWxzbyBkcmF3IGFuIGlsbHVzdHJhdGlvbiBmb3IgdGhlIHNhbWUgY29udGVudCB0aGF0IHlvdSB3aWxsIGhhdmUgd3JpdHRlbi4gVXNlIGNvbG91ciBpZiBuZWNlc3NhcnkuIE9uY2UgeW91IGFyZSBzYXRpc2ZpZWQgdGhhdCB5b3UgaGF2ZSBkb25lIGVub3VnaCBwcmFjdGljZSwgYXNrIHRoZSBjb3Vyc2UgbGVjdHVyZXIgdG8gZ3JhZGUgeW91ciB3b3JrLiAiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWwtNSB0ZXh0LWp1c3RpZnkiIH0sIFsKICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnIFRoZSBXaGl0ZWJvYXJkIGlzIGEgbmV3IGdlbmVyYXRpb24gZm9ybSBvZiB0aGUgY2hhbGtib2FyZC4gSXQgaXMgY2FsbGVkIHdoaXRlYm9hcmQgYXMgaXQgaXMgbm9ybWFsbHkgd2hpdGUuIE9uZSBvZiB0aGUgcmVhc29ucyBiZWluZyB0aGF0IG5vdCBvbmx5IGNhbiBvbmUgd3JpdGUgb24gaXQsIGJ1dCBpdCBjYW4gYWxzbyBiZSB1c2VkIGFzIGEgc2NyZWVuIGZvciBwcm9qZWN0aW9uIHB1cnBvc2VzLiBTcGVjaWFsIG1hcmtlciBwZW5zIGFyZSB1c2VkIHRvIHdyaXRlIG9uIHRoZSB3aGl0ZWJvYXJkIGFuZCBjYW4gZWFzaWx5IGJlIGVyYXNlZC4gT25lIHNob3VsZCBuZXZlciB1c2UgYSBQZXJtYW5lbnQgTWFya2VyIG9uIHRoZSB3aGl0ZSBib2FyZCBhcyBpdCBjYW5ub3QgYmUgZWFzaWx5IGVyYXNlZC4gTWF0ZXJpYWxzIGNhbiBhbHNvIGJlIHBpbm5lZCBvbiB0aGUgd2hpdGVib2FyZCBmb3IgZGlzcGxheSB0byB0aGUgbGVhcm5lcnMuIEJlbG93IHdlIHdpbGwgbm93IGxvb2sgYXQgYW5vdGhlciB0eXBlIG9mIHdoaXRlYm9hcmQga25vd24gYXMgIlNtYXJ0IEJvYXJkIi4nCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFRoZSBTbWFydCBCb2FyZCBpcyBhbiBpbnRlcmFjdGl2ZSB3aGl0ZWJvYXJkIHRoYXQgdXNlcyB0b3VjaCBkZXRlY3Rpb24gZm9yIHVzZXIgaW5wdXQgKGZvciBleGFtcGxlIHNjcm9sbGluZyBhbmQgcmlnaHQgbW91c2UtY2xpY2spIGluIHRoZSBzYW1lIHdheSBhcyBub3JtYWwgUEMgaW5wdXQgZGV2aWNlcyBzdWNoIGFzIG1pY2Ugb3Iga2V5Ym9hcmRzLiBBIHByb2plY3RvciBpcyB1c2VkIHRvIGRpc3BsYXkgYSBjb21wdXRlcidzIHZpZGVvIG91dHB1dCBvbnRvIHRoZSB3aGl0ZWJvYXJkLCB3aGljaCB0aGVuIGFjdHMgYXMgYSBodWdlIHRvdWNoc2NyZWVuLiAiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciIgfSwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCIsCiAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9wYy5wbmciKSwgYWx0OiAiUmVzcG9uc2l2ZSBpbWFnZSIgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFRoZSBTbWFydCBib2FyZCB1c3VhbGx5IGNvbWVzIHdpdGggNCBkaWdpdGFsIHdyaXRpbmcgdXRlbnNpbHMgdGhhdCB1c2UgZGlnaXRhbCBpbmsgcmVwbGFjaW5nIHRoZSB0cmFkaXRpb25hbCB3aGl0ZWJvYXJkIG1hcmtlcnMuIFRoZSBkaWdpdGFsIGluayB3b3JrcyBieSB1c2luZyBhbiBhY3RpdmUgZGlnaXRpemVyIHRoYXQgY29udHJvbHMgdGhlIFBDIGlucHV0IGluZm9ybWF0aW9uIGZvciB3cml0aW5nIGNhcGFiaWxpdGllcyBzdWNoIGFzIGRyYXdpbmcgb3IgaGFuZHdyaXRpbmcuICIKICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygib2wiLCBbCiAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIldoYXQgaXMgdGhlIHB1cnBvc2Ugb2YgbXkgcHJlc2VudGF0aW9uPyAiKV0pLAogICAgICBfYygibGkiLCBbCiAgICAgICAgX3ZtLl92KCJXaGF0IGRvIEkgd2FudCBteSBhdWRpZW5jZSB0byBkbyBiZWNhdXNlIG9mIHRoZSBwcmVzZW50YXRpb24/ICIpCiAgICAgIF0pLAogICAgICBfYygibGkiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldoYXQgbWVzc2FnZSBkbyBJIHdhbnQgdG8gZGVsaXZlciB0aGF0IHdpbGwgaGVscCBtZSBhY2hpZXZlIHRoYXQgcHVycG9zZT8iCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIiwKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9iYXIucG5nIiksIGFsdDogIlJlc3BvbnNpdmUgaW1hZ2UiIH0KICAgICAgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWwtNSB0ZXh0LWp1c3RpZnkiIH0sIFsKICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIEF1ZGlvIG1lZGlhIG1hdGVyaWFscyBjYW4gZWFzaWx5IGJlIGRlc2lnbmVkIGFuZCBwcm9kdWNlZCBieSBib3RoIHRoZSB0ZWFjaGVyIGFuZCBzdHVkZW50cyBzaW5jZSBhbGwgdGhhdCB5b3UgbmVlZCBpcyBhbiBhdWRpbyB0YXBlIHJlY29yZGVyIGFuZCBibGFuayBhdWRpb3RhcGUuIEF1ZGlvIG1lZGlhIGNhbiBiZSBlZmZlY3RpdmUgZHVyaW5nIGluc3RydWN0aW9uIGVzcGVjaWFsbHkgdG8gYWNoaWV2ZSBtb3RpdmF0aW9uYWwsIGluZm9ybWF0aW9uYWwgb3IgaW5zdHJ1Y3Rpb25hbCBwdXJwb3NlcyBvZiB0ZWFjaGluZyBhbmQgbGVhcm5pbmcuIEF1ZGlvIG1lZGlhIGlzIGVmZmVjdGl2ZSBpbiB0ZWFjaGluZyBtYW55IG9mIHRoZSBzdWJqZWN0cyBvZmZlcmVkIGluIHRoZSBzY2hvb2wgY3VycmljdWx1bS4gRm9yIGV4YW1wbGUsIHRlYWNoaW5nIG9mIGxpdGVyYXR1cmUgZWl0aGVyIGluIEVuZ2xpc2gsIEZyZW5jaCBvciBBZnJpY2FuIGxhbmd1YWdlcyBsaWtlIHNpU3dhdGkuIEF1ZGlvIG1lZGlhIGlzIGFsc28gYXBwcm9wcmlhdGUgaW4gRW5nbGlzaCBMYW5ndWFnZSwgZXNwZWNpYWxseSBpbiBkcmFtYS4gWW91IGNhbiBhbHNvIHVzZSBhdWRpbyBtZWRpYSB0byBpbmRpdmlkdWFsaXplIGluc3RydWN0aW9uIHBhcnRpY3VsYXJseSB3aGVuIHlvdSBoYXZlIHNsb3cgbGVhcm5lcnMgaW4geW91ciBjbGFzcyBvciB3aGVuIHlvdSBhcmUgdGVhY2hpbmcgY29tcGxleCB0b3BpY3MgdGhhdCBzdHVkZW50cyBoYXZlIGRpZmZpY3VsdGllcyB1bmRlcnN0YW5kaW5nIC4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFRvIGRlc2lnbiBhbmQgcHJvZHVjZSBhdWRpbyBtYXRlcmlhbHMsIHRoZSBmb2xsb3dpbmcgcHJvY2VkdXJlIHdpbGwgYmUgZm9sbG93ZWQ6ICIKICAgICAgICApLAogICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgRm9ybXVsYXRlIGFuIGluc3RydWN0aW9uYWwgZ29hbC4gRGVjaWRlIHdoYXQgeW91IHdhbnQgdG8gYWNoaWV2ZSBieSB1c2luZyBhdWRpbyBtZWRpYS4gSXMgaXQgZm9yIG1vdGl2YXRpb24sIGluZm9ybWF0aW9uIHNoYXJpbmcgb3IgZm9yIGluc3RydWN0aW9uPyAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBGb3JtdWxhdGUgdGhlIGluc3RydWN0aW9uYWwgb2JqZWN0aXZlcyB0aGF0IHdpbGwgZm9ybSB0aGUgYmFzaXMgb2YgdGhlIGF1ZGlvIHByb2dyYW1tZSB0byBiZSBwcm9kdWNlZC4gV2hhdCBkbyB5b3Ugd2FudCB0byBhY2hpZXZlPyAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBTZWxlY3QgdGhlIGNvbnRlbnQgdG8gYmUgcHJlc2VudGVkIGFuZCBkZWNpZGUgb24gdGhlIHNjb3BlIG9mIGNvbnRlbnQgY292ZXJhZ2UuIEl0IGlzIHJlY29tbWVuZGVkIHRoYXQgYW4gaWRlYWwgYXVkaW8gcHJvZ3JhbW1lIHNob3VsZCBvbmx5IHJ1biBmb3IgZmlmdGVlbiAoMTUpIG1pbnV0ZXMuIFRoZXJlZm9yZSwgaWYgeW91IGhhdmUgYSBsb3Qgb2YgY29udGVudCB0byBiZSBjb3ZlcmVkIHByZXBhcmUgYSBzZXJpZXMgb2YgYXVkaW8gcHJvZ3JhbW1lcy4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgUHJlcGFyZSBhIHJlY29yZGluZyBzY3JpcHQuIEEgc2NyaXB0IGlzIGFuIG91dGxpbmUgZGVzY3JpcHRpb24gb2YgdGhlIGNvbnRlbnQgdG8gYmUgcHJlc2VudGVkIGFuZCBwcmVwYXJlZCBpbiBhIGZvcm1hdCB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgcmVhZGluZyBhcyBvcHBvc2VkIHRvIHRhbGtpbmcuIEEgc2NyaXB0IGlkZW50aWZpZXMgZXZlbiB0aGUgcHJlc2VudGVycyBvciB0aGUgcGVvcGxlIHdobyB3aWxsIGJlIGludm9sdmVkIGluIHRoZSBwcmVzZW50YXRpb24gb2YgY29udGVudCBhbmQgdGhlIGFjdHVhbCBjb250ZW50IHRoYXQgdGhleSByZWFkLiBBcyB5b3UgcHJlcGFyZSBhIHJlY29yZGluZyBzY3JpcHQsIGNvbnNpZGVyIGhvdyB5b3Ugd2lsbCBpbnZvbHZlIHRoZSBsZWFybmVycyBpbiBtZWFuaW5nZnVsIGxlYXJuaW5nIGFjdGl2aXRpZXMuIFJlbWVtYmVyIHRoYXQgYXVkaW8gbWVkaWEgYXBwZWFscyBvbmx5IHRvIHRoZSBzZW5zZSBvZiBoZWFyaW5nOyB0aGVyZWZvcmUgdG8gY2FwdGl2YXRlIHRoZSBzdHVkZW50cycgYXR0ZW50aW9uIHJlcXVpcmVzIHRoYXQgdGhleSBnZXQgZW5nYWdlZCBpbiBzb21lIGFjdGl2aXRpZXMgYXMgdGhleSBsaXN0ZW4gdG8gdGhlIHJlY29yZGVkIG1hdGVyaWFscy4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgVG8gY2FwdGl2YXRlIHRoZSBhdHRlbnRpb24gb2YgdGhlIGxpc3RlbmVycywgbWFrZSBzdXJlIHRoYXQgeW91IHByb3ZpZGUgdmFyaWV0eSB0aHJvdWdoIGFwcHJvcHJpYXRlIHNvdW5kIGVmZmVjdHMsIG11c2ljLCBzaG9ydCBkaWFsb2d1ZSBhbmQgdm9pY2VzIG9mIGV4cGVydHMgaW4geW91ciBmaWVsZC4gQWxsIHRoZXNlIG1pZ2h0IGJlIGluY2x1ZGVkIGluIHRoZSBzY3JpcHQgdGhhdCB5b3UgcHJlcGFyZSBzaW5jZSBhbGwgcHJlc2VudGVycyBuZWVkIHRvIGtub3cgaW4gYWR2YW5jZSB3aGF0ZXZlciB0aGV5IHdpbGwgYmUgcmVxdWlyZWQgdG8gc2F5IGR1cmluZyB0aGUgcmVjb3JkaW5nLiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBCZSBjcmVhdGl2ZSBpbiB5b3VyIHNjcmlwdCB3cml0aW5nIGFuZCBiZSBjb252ZXJzYXRpb25hbC4gU2luY2UgYXVkaW8gbWVkaWEgaXMgbWVhbnQgZm9yIGxpc3RlbmluZywgY29udmVyc2Ugd2l0aCB0aGUgYXVkaWVuY2UgYXMgeW91IHdvdWxkIG5vcm1hbGx5IGNvbnZlcnNlIHdpdGggYSBmcmllbmQuIEV4cGxvcmUgdGhlIGNvbnRlbnQgd2l0aCB0aGUgc3R1ZGVudHMgcmF0aGVyIHRoYW4gbGVjdHVyaW5nIHRvIHRoZW0uICIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEFzIHlvdSBwcmVzZW50IHRoZSBtYXRlcmlhbHMsIGRpcmVjdCB0aGUgc3R1ZGVudHMnIGF0dGVudGlvbiB0byB3aGF0ZXZlciB3aWxsIGJlIGRpc2N1c3NlZCBiZWZvcmUgZGlzY3Vzc2luZyBpdC4gSW5mb3JtIHRoZSBzdHVkZW50cyB3aGF0IHRvIHBheSBhdHRlbnRpb24gdG8gYXMgdGhleSBsaXN0ZW4gdG8gdGhlIGF1ZGlvdGFwZS4gRm9yIGV4YW1wbGUsIGlmIHRoZXkgaGF2ZSB0byByZWZlciB0byBhIGNlcnRhaW4gZGlhZ3JhbSwgaW5zdHJ1Y3QgdGhlbSB3aGF0IHRvIGxvb2sgZm9yIG9yIG9ic2VydmUgYW5kIGdpdmUgdGhlbSB0aW1lIGR1cmluZyB0aGUgcHJlc2VudGF0aW9uIHRvIGRvIGV4YWN0bHkgdGhhdC4gVGhpcyBtZWFucyB0aGF0IHlvdSB3aWxsIG5lZWQgdG8gcGF1c2Ugb2NjYXNpb25hbGx5IGZvciBzdHVkZW50cyB0byBjYXJyeSBvdXQgc3BlY2lmaWMgdGFza3Mgb3IgYWN0aXZpdGllcyB0aGF0IHlvdSB3aWxsIGlkZW50aWZ5IGZvciB0aGVtLiBXaGVuIHlvdSBwYXVzZSB0aGUgdGFwZSwgcHJvdmlkZSBhIG11c2ljIGludGVybHVkZSBmb3Igc3R1ZGVudHMgdG8ga25vdyB0aGF0IHRoZSBwcmVzZW50YXRpb24gaXMgc3RpbGwgY29udGludWluZy4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgV2hlbiB0aGUgcHJlc2VudGF0aW9uIGVuZHMsIGl0IGlzIHVzZWZ1bCB0byBzdW1tYXJpemUgdGhlIGtleSBwb2ludHMgb3IgaWRlYXMgY292ZXJlZCBkdXJpbmcgdGhlIGxlc3Nvbi4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgRmluYWxseSBwcmVwYXJlIHNvbWUgZm9sbG93IC11cCBhY3Rpdml0aWVzIGZvciB0aGUgc3R1ZGVudHMgdG8gYXNzaXN0IGluIGxlYXJuaW5nIHRyYW5zZmVyIGFuZCB0byByZWluZm9yY2Ugd2hhdCB3aWxsIGhhdmUgYmVlbiBwcmVzZW50ZWQgIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygidWwiLCB7IHN0YXRpY1N0eWxlOiB7ICJsaXN0LXN0eWxlLXR5cGUiOiAic3F1YXJlIiB9IH0sIFsKICAgICAgX2MoImxpIiwgW192bS5fdigiIFBDIG1pY3JvcGhvbmUgIildKSwKICAgICAgX2MoImxpIiwgW192bS5fdigiIEF1ZGlvIHNvZnR3YXJlICIpXSksCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIEhvc3RpbmcgYWNjb3VudCB0byB1cGxvYWQgYW5kIHN0b3JlIHlvdXIgcG9kY2FzdCBmaWxlIChJbiB0aGlzIGNhc2UsIHlvdXIgQmxvZykgIgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgIF9jKCJpIiwgW192bS5fdigiU3RlcCAxOiBHZXQgYSBtaWNyb3Bob25lLiIpXSksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoCiAgICAgICAgIiBUbyByZWNvcmQgYSBwb2RjYXN0LCB5b3UgbmVlZCB0byBoYXZlIGEgbWljcm9waG9uZSB0aGF0IGlzIGNvbXBhdGlibGUgd2l0aCB5b3VyIGNvbXB1dGVyLiIKICAgICAgKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJiciIpLAogICAgICBfYygiaSIsIFtfdm0uX3YoIlN0ZXAgMjogR2V0IGF1ZGlvIHNvZnR3YXJlLiIpXSksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoCiAgICAgICAgIiBPbmNlIHlvdSBoYXZlIGEgbWljcm9waG9uZSwgeW91IG5lZWQgdG8gZ2V0IHNvZnR3YXJlIHRoYXQgYWxsb3dzIHlvdSB0byByZWNvcmQgYXVkaW8gdGhyb3VnaCB0aGF0IG1pY3JvcGhvbmUgYW5kIHNhdmUgaXQgb24geW91ciBjb21wdXRlcidzIGhhcmQgZHJpdmUuIEZyZWUgYXVkaW8gc29mdHdhcmUgY2FuIGJlIGRvd25sb2FkZWQgZnJvbSAiCiAgICAgICksCiAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiaHR0cDovL2F1ZGFjaXR5LnNvdXJjZWZvcmdlLm5ldC8iIH0gfSwgWwogICAgICAgIF92bS5fdigiaHR0cDovL2F1ZGFjaXR5LnNvdXJjZWZvcmdlLm5ldC8iKQogICAgICBdKSwKICAgICAgX3ZtLl92KAogICAgICAgICIgT25jZSBvbiB0aGUgd2Vic2l0ZSwgZm9sbG93IGluc3RydWN0aW9ucyB0byBkb3dubG9hZCB0aGUgc29mdHdhcmUuIE90aGVyd2lzZSBpZiB0aGUgc29mdHdhcmUgaXMgYXZhaWxhYmxlIG9uIHRoZSBlLWxlYXJuaW5nIHdlYnNpdGUsIHlvdSBjb3VsZCB0aGVuIHVzZSBpdC4iCiAgICAgICksCiAgICAgIF9jKCJiciIpLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImkiLCBbX3ZtLl92KCJTdGVwIDM6IFByZXBhcmUgeW91ciBwb2RjYXN0IGNvbnRlbnQuIildKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigKICAgICAgICAiIFRha2Ugc29tZSB0aW1lIHRvIHRoaW5rIGFib3V0IHdoYXQgeW91IGFyZSBnb2luZyB0byBzYXkgZHVyaW5nIHlvdXIgcG9kY2FzdC4gWW91IGNhbiBldmVuIHdyaXRlIGEgc2NyaXB0IGJhc2VkIG9uIGEgcGFydGljdWxhciB0b3BpYy4gSWYgaXQgaXMgYW4gYXNzaWdubWVudCwgdGhlbiB5b3VyIHJlY29yZGluZyBzaG91bGQgYmUgYmFzZWQgb24gdGhlIGFzc2lnbm1lbnQuIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJpIiwgW192bS5fdigiU3RlcCA0OiBSZWNvcmQgeW91ciBwb2RjYXN0LiIpXSksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoCiAgICAgICAgIiBUdXJuIG9uIHlvdXIgbWljcm9waG9uZSwgc3RhcnQgeW91ciBhdWRpbyBzb2Z0d2FyZSBhbmQgYmVnaW4gcmVjb3JkaW5nLiBTYXZlIHRoZSBmaWxlIHdoZW4geW91IGFyZSBkb25lLiIKICAgICAgKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJiciIpLAogICAgICBfYygiaSIsIFsKICAgICAgICBfdm0uX3YoIlN0ZXAgNTogVXBsb2FkIHlvdXIgcG9kY2FzdCBmaWxlIHRvIHlvdXIgb25saW5lIGhvc3QuIikKICAgICAgXSksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoCiAgICAgICAgIiBVcGxvYWQgeW91ciBwb2RjYXN0IGZpbGUgdG8geW91ciB3ZWIgaG9zdC4gSWYgeW91IHBsYW4gdG8gcmVjb3JkIGEgbG90IG9mIHBvZGNhc3RzIG9yIHlvdXIgYmxvZyBnZXRzIGEgbG90IG9mIHRyYWZmaWMsIHlvdSBtaWdodCB3YW50IHRvIGNyZWF0ZSBhIG5ldyBob3N0aW5nIGFjY291bnQgdG8gaG9sZCB5b3VyIHBvZGNhc3RzLCBzbyB5b3UgZG8gbm90IHJlYWNoIHlvdXIgYmxvZyBob3N0aW5nIGJhbmR3aWR0aCBsaW1pdHMgdG9vIHF1aWNrbHkuIEluc3RydWN0aW9ucyBmb3IgdXBsb2FkaW5nIHRoZSBwb2RjYXN0IG1heSBiZSBnaXZlbiBvbiB0aGUgZS1sZWFybmluZyB3ZWJzaXRlLiIKICAgICAgKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJiciIpLAogICAgICBfYygiaSIsIFtfdm0uX3YoIlN0ZXAgNjogR2V0IHRoZSBVUkwgb2YgeW91ciB1cGxvYWRlZCBwb2RjYXN0IGZpbGUuIildKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigKICAgICAgICAiIE9uY2UgeW91IHVwbG9hZCB5b3VyIHBvZGNhc3QgZmlsZSB0byB5b3VyIGhvc3RpbmcgYWNjb3VudCwgY29weSB0aGUgcG9kY2FzdCBVUkwgYW5kIGtlZXAgdGhhdCBVUkwgaGFuZHkgYXMgeW91IHdpbGwgaGF2ZSB0byBwYXN0ZSBpdCBpbiB5b3VyIGJsb2cuIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJpIiwgW192bS5fdigiU3RlcCA3OiBDcmVhdGUgYSBuZXcgYmxvZyBwb3N0LiIpXSksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoCiAgICAgICAgIiBPcGVuIHlvdXIgYmxvZ2dpbmcgYXBwbGljYXRpb24gYW5kIGNyZWF0ZSBhIG5ldyBibG9nIHBvc3QuIEdpdmUgaXQgYSB0aXRsZSBhbmQgYWRkIGFueSB0ZXh0IHlvdSB3b3VsZCBsaWtlIHRvIGludHJvZHVjZSB5b3VyIHBvZGNhc3QuIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJpIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTdGVwIDg6IFBhc3RlIHRoZSBVUkwgZm9yIHlvdXIgcG9kY2FzdCBmaWxlIGludG8geW91ciBuZXcgYmxvZyBwb3N0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygiYnIiKSwKICAgICAgX3ZtLl92KAogICAgICAgICIgVXNpbmcgdGhlIFVSTCB5b3UgY29waWVkIGVhcmxpZXIgZm9yIHlvdXIgdXBsb2FkZWQgcG9kY2FzdCBmaWxlLCBwYXN0ZSB0aGF0IGluZm9ybWF0aW9uIGludG8geW91ciBuZXcgYmxvZyBwb3N0IGFzIG5ldyBtZWRpYSBvciBhIG5ldyBlbmNsb3N1cmUgbGluaywgZGVwZW5kaW5nIG9uIHRoZSBibG9nZ2luZyBhcHBsaWNhdGlvbiB5b3UgdXNlLiIKICAgICAgKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJiciIpLAogICAgICBfYygiaSIsIFtfdm0uX3YoIlN0ZXAgOTogUHVibGlzaCB5b3VyIG5ldyBibG9nIHBvc3QuIildKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigKICAgICAgICAiIFNlbGVjdCB0aGUgcHVibGlzaCBidXR0b24gaW4geW91ciBibG9nZ2luZyBhcHBsaWNhdGlvbiB0byBzZW5kIHlvdXIgbmV3IGJsb2cgcG9zdCB3aXRoIHlvdXIgcG9kY2FzdCBsaW5rIGluY2x1ZGVkIGxpdmUgb25saW5lLiIKICAgICAgKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJiciIpLAogICAgICBfYygiaSIsIFtfdm0uX3YoIlN0ZXAgMTA6IFRlc3QgeW91ciBwb2RjYXN0IGxpbmsuIildKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigKICAgICAgICAiIE9wZW4geW91ciBuZXcgbGl2ZSBibG9nIHBvc3QgYW5kIHNlbGVjdCB5b3VyIHBvZGNhc3QgbGluayB0byBlbnN1cmUgaXQgaXMgd29ya2luZyBjb3JyZWN0bHkuIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigKICAgICAgICAiIFRoZSBsYXN0IHRvb2wgb3Igc29mdHdhcmUgd2UgYXJlIGdvaW5nIHRvIGRpc2N1c3MgaW4gdGhpcyBtb2R1bGUgaXMgU2t5cGUuIFNreXBlIGlzIHVzZWQgYXMgYSBjb21tdW5pY2F0aW9uIHRvb2wgdGhyb3VnaCBzaG9ydCBtZXNzYWdlcywgYXVkaW8sIGFuZCB2aWRlbyBjYWxscy4gIgogICAgICApCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5vdGUgbm90ZS13YXJuaW5nIHRleHQtanVzdGlmeSIgfSwgWwogICAgICBfYygiYmxvY2txdW90ZSIsIHsgc3RhdGljQ2xhc3M6ICJibG9ja3F1b3RlIGJxLXdhcm5pbmciIH0sIFsKICAgICAgICBfYygiaDUiLCB7IGF0dHJzOiB7IGlkOiAiaXRlbS0zLTMtNCIgfSB9LCBbCiAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtbWVkYWwiIH0sIFtfdm0uX3YoIkFzc2lnbm1lbnQgNC4zIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgU2VsZWN0IGEgdG9waWMgZnJvbSBvbmUgb2YgeW91ciB0ZWFjaGluZyBzdWJqZWN0cyB3aGVyZSBhdWRpbyBtZWRpYSBjb3VsZCBiZSB1c2VkIGFuZCB0aGVuOiAiCiAgICAgICAgKSwKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSBmb250LWl0YWxpYyIgfSwgWwogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCIgRm9ybXVsYXRlIGFuIGluc3RydWN0aW9uYWwgZ29hbCAiKV0pLAogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCIgRm9ybXVsYXRlIHRoZSBpbnN0cnVjdGlvbmFsIG9iamVjdGl2ZXMuICIpXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIFByZXBhcmUgYSByZWNvcmRpbmcgc2NyaXB0IGZvciBhIHRlbiBtaW51dGUgcmVjb3JkaW5nIHdpdGggYXQgbGVhc3QgdGhyZWUgcHJlc2VudGVycy4gIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIEF0dGFjaCBzb21lIGZvbGxvdy11cCBhY3Rpdml0aWVzIHRvIGJlIGNhcnJpZWQgb3V0IGJ5IHRoZSBjbGFzcyBhZnRlciBsaXN0ZW5pbmcgdG8gdGhlIGF1ZGlvdGFwZS4gIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIFN1Ym1pdCB0aGUgYXNzaWdubWVudCBmb3IgZ3JhZGluZyB0byB0aGUgY291cnNlIGxlY3R1cmVyLiAiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtbC01IiB9LCBbCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBJbiB0aGlzIHNlY3Rpb24geW91IGFyZSBpbnRyb2R1Y2VkIHRvIHRoZSBkaWZmZXJlbnQgd2F5cyBvZiB1dGlsaXNpbmcgbWF0ZXJpYWxzIGR1cmluZyBpbnN0cnVjdGlvbi4gT25lIHRoaW5nIHRvIGtlZXAgaW4gbWluZCBhdCBhbGwgdGltZXMgaG93ZXZlciBpcyB0aGF0IGFwcHJvcHJpYXRlIG1hdGVyaWFscyBzZWxlY3RlZCBmb3IgYSBwYXJ0aWN1bGFyIHRhc2sgbXVzdCBiZSBiYXNlZCBvbiB0aGUgb2JqZWN0aXZlcyBvciB3aGF0IHlvdSB3b3VsZCBsaWtlIHlvdXIgbGVhcm5lcnMgdG8gYWNoaWV2ZSBhdCB0aGUgZW5kIG9mIHRoZSBsZXNzb24uIFdlIHdpbGwgZGlzY3VzcyBob3cgd2UgY2FuIG1ha2UgdXNlIG9mIHByaW50ZWQgbWF0ZXJpYWxzIGluIHRoZSBuZXh0IHNlY3Rpb24uICIKICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICBfdm0uX3YoCiAgICAgICAgIiBQcmludGVkIG1hdGVyaWFscyBjYW4gcGxheSB0aHJlZSBiYXNpYyByb2xlcyBpbiBpbmRpdmlkdWFsaXplZCBpbnN0cnVjdGlvbjogIgogICAgICApLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIFRoZXkgY2FuIGNvbnN0aXR1dGUgdGhlIGFjdHVhbCB2ZWhpY2xlIGJ5IHdoaWNoIHRoZSBpbnN0cnVjdGlvbiB0YWtlcyBwbGFjZS4gIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBUaGV5IGNhbiBiZSB1c2VkIHRvIHN0cnVjdHVyZSBhbmQvb3IgY29udHJvbCBvciBtYW5hZ2UgdGhlIGluc3RydWN0aW9uYWwgcHJvY2VzcyB3aXRoIHRoZSBtYWluIGluc3RydWN0aW9uIGJlaW5nIGNhcnJpZWQgb3V0IHZpYSBvdGhlciBtZWRpYSBlLmcuIHRleHQgYm9va3MuICIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgVGhleSBjYW4gYmUgdXNlZCB0byBzdXBwb3J0IG90aGVyIGluZGl2aWR1YWxpemVkIGxlYXJuaW5nIG1lZGlhIGJ5IHByb3ZpZGluZyB0aGUgcmVxdWlyZWQgc3VwcG9ydCBzdWNoIGFzIHdvcmtzaGVldHMgKEVsbGluZ3RvbiwgMTk4NSkuICIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sIFsKICAgICAgX3ZtLl92KCIgV29ya3NoZWV0cyBzZXJ2ZSB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uczogIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgRW5jb3VyYWdlIHN0dWRlbnRzIHRvIHRoaW5rIGZvciB0aGVtc2VsdmVzIGFib3V0IHRoZSByZXN1bHRzIG9mIHRoZWlyIGV4cGVyaW1lbnRhbCB3b3JrIGFuZCBkcmF3IHRoZWlyIG93biBjb25jbHVzaW9ucyBmcm9tIHRoZWlyIG93biBvYnNlcnZhdGlvbnMuICIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgQWxsb3cgc3R1ZGVudHMgdG8gd29yayBhdCB0aGVpciBvd24gcGFjZSBubyBtYXR0ZXIgaG93IHNsb3cgb3IgZmF0IHRoZXkgY291bGQgYmUuICIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgSGVscCB0aGUgdGVhY2hlciB0byBhdm9pZCBvcmFsIHJlcGV0aXRpb24gb2Ygcm91dGluZSBpbnN0cnVjdGlvbnMgYW5kIHF1ZXN0aW9ucy4gIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBFbmFibGUgc3R1ZGVudHMgd2hvIGhhdmUgYmVlbiBhYnNlbnQgZnJvbSBjbGFzcyB0byBjYXRjaCB1cC4gIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBIZWxwIGluIHN0cnVjdHVyaW5nIGFueSBmb3JtIG9mIHJlY29yZCBzdWNoIGFzIG51bWVyaWNhbCByZXN1bHRzLiAiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIEhlbHAgaW4ga2VlcGluZyBhbiBhY2N1cmF0ZSByZWNvcmQgb2Ygd2hhdCBzdHVkZW50cyBoYXZlIGFjdHVhbGx5IGxlYXJudCBpbiBhbnkgcGllY2Ugb2Ygd29yayBjYXJyaWVkIG91dCBieSB0aGVtLiAiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJ1bCIsIFsKICAgICAgX2MoImxpIiwgWwogICAgICAgIF9jKCJpIiwgW192bS5fdigiQXZhaWxhYmlsaXR5IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBQcmludGVkIG1lZGlhIGFyZSByZWFkaWx5IGF2YWlsYWJsZSBpbiBhIHZhcmlldHkgb2YgZm9ybWF0cy4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfYygiaSIsIFtfdm0uX3YoIkZsZXhpYmlsaXR5IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBQcmludGVkIG1hdGVyaWFscyBhcmUgYWRhcHRhYmxlIHRvIG1hbnkgcHVycG9zZXMgYW5kIHRoZXkgbWF5IGJlIHVzZWQgaW4gYW55IGVudmlyb25tZW50LiAiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImxpIiwgWwogICAgICAgIF9jKCJpIiwgW192bS5fdigiUG9ydGFiaWxpdHkiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuIFRoZXkgY2FuIGJlIGVhc2lseSBjYXJyaWVkIG9yIG1vdmVkIGZyb20gcGxhY2UgdG8gcGxhY2UgYW5kIGRvIG5vdCByZXF1aXJlIGFueSBlcXVpcG1lbnQgb3IgZWxlY3RyaWNpdHkuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygibGkiLCBbCiAgICAgICAgX2MoImkiLCBbX3ZtLl92KCIgVXNlciBmcmllbmRseSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gUHJvcGVybHkgZGVzaWduZWQgcHJpbnRlZCBtYXRlcmlhbHMgYXJlIGVhc3kgdG8gdXNlIGFuZCBkbyBub3QgcmVxdWlyZSBzcGVjaWFsIGVmZm9ydHMgdG8gbmF2aWdhdGUgdGhyb3VnaC4gU3R1ZGVudHMgY2FuIHN0b3AgYXQgYW55IHBvaW50IGluIHRoZSBtYXRlcmlhbCB0b2Rpc2N1c3Mgb3IgZXZlbiByZWZlciB0byBvdGhlciBzb3VyY2VzIHN1Y2ggYXMgZGljdGlvbmFyaWVzLCByZWZlcmVuY2UgdGV4dHMsIGV0Yy4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfYygiaSIsIFtfdm0uX3YoIkVjb25vbWljYWwiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuIFByaW50ZWQgbWF0ZXJpYWxzIGFyZSByZWxhdGl2ZWx5IGluZXhwZW5zaXZlIHRvIHByb2R1Y2UsIHB1cmNoYXNlIGFuZCBjYW4gYmUgcmUtdXNlZC4gVGV4dCBib29rcyBpbiBwYXJ0aWN1bGFyIGFyZSBpbmV4cGVuc2l2ZSBjb21wYXJlZCB0byBvdGhlciBmb3JtcyBvZiBtZWRpYSAoSGVpbmljaCwgZXQgYWwuOiAxMDcpLiAiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImxpIiwgWwogICAgICAgIF9jKCJpIiwgW192bS5fdigiSW5kaXZpZHVhbGl6YXRpb24gb2YgaW5zdHJ1Y3Rpb24iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuIFByaW50ZWQgbWF0ZXJpYWxzIGFsbG93IHN0dWRlbnRzIHRvIHByb2NlZWQgYXQgdGhlaXIgb3duIHBhY2UuIExlc3NvbiBtYXRlcmlhbHMgY2FuIGJlIGRlc2lnbmVkIGluIGEgdmFyaWV0eSBvZiB3YXlzIHRvIGFsbG93IGZvciBzZWxmLXBhY2VkIGluc3RydWN0aW9uIChBbmRlcnNvbiwgMTk4MykuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygibGkiLCBbCiAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJPcmdhbml6YXRpb24gb2YgaW5zdHJ1Y3Rpb24iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuIFByaW50ZWQgbWF0ZXJpYWxzLCBlc3BlY2lhbGx5IHRleHQgYm9va3MsIGhlbHAgdG8gb3JnYW5pemUgaW5zdHJ1Y3Rpb24gYnkgcHJvdmlkaW5nIGNvbW1vbiByZWFkaW5nIGV4cGVyaWVuY2VzLCBzdWdnZXN0ZWQgbGVhcm5pbmcgYWN0aXZpdGllcywgcmVjb21tZW5kZWQgcmVhZGluZ3MsIGFuZCBxdWVzdGlvbnMuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygibGkiLCBbCiAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJUdXRvcmlhbCBDb250cmlidXRpb24iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuIFRleHQgYm9va3MgaW4gcGFydGljdWxhciBoZWxwIHN0dWRlbnRzIHRvIHJlYWQgYmV0dGVyLCB0byBzdHVkeSBhbmQgdG8gd2VpZ2ggZXZpZGVuY2UgcHJlc2VudGVkLiBQcmludGVkIG1hdGVyaWFscyBhbHNvIGFsbG93IGZvciBjcm9zcy1yZWZlcmVuY2luZyBvZiBpbmZvcm1hdGlvbiBmcm9tIGRpZmZlcmVudCBzb3VyY2VzLiAiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImxpIiwgWwogICAgICAgIF9jKCJpIiwgW192bS5fdigiSW1wcm92ZSBJbnN0cnVjdGlvbiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gUHJpbnRlZCBtYXRlcmlhbHMgaGVscCB0byBpbXByb3ZlIHRlYWNoaW5nIHByYWN0aWNlcyBlc3BlY2lhbGx5IHRocm91Z2ggdGhlIHN1Z2dlc3Rpb25zIGNvbnRhaW5lZCBpbiB0ZWFjaGVycycgZWRpdGlvbnMgYW5kIGluIG1hbnVhbHMuICIKICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygidWwiLCBbCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfYygiaSIsIFtfdm0uX3YoIiBSZWFkaW5nIGxldmVsIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIC0gTW9zdCBwcmludGVkIG1hdGVyaWFscyBhcmUgd3JpdHRlbiBhdCBhIGNlcnRhaW4gcmVhZGluZyBsZXZlbC4gSXQgaXMgaW1wb3J0YW50IGFzIGEgdGVhY2hlciB0byByZW1lbWJlciB0aGF0IHNvbWUgb2YgdGhlIHN0dWRlbnRzIGluIG91ciBjbGFzc2VzIGFyZSBub24gLSByZWFkZXJzLCBwb29yIHJlYWRlcnMsIG9yIGxhY2sgYWRlcXVhdGUgbGl0ZXJhY3kgc2tpbGxzIGFuZCB0aGVyZWZvcmUgc29tZSByZWFkaW5nIG1hdGVyaWFscyBtaWdodCBiZSBhYm92ZSB0aGVpciByZWFkaW5nIGxldmVsLiAiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImxpIiwgWwogICAgICAgIF9jKCJpIiwgW192bS5fdigiIFByaW9yIGtub3dsZWRnZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiAtIFJlYWRlcnMgd2hvIGxhY2sgcHJlIC0gcmVxdWlzaXRlIGtub3dsZWRnZSBtaWdodCBzdHJ1Z2dsZSB0byBjb21wcmVoZW5kIHRoZSB0ZXh0ICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygibGkiLCBbCiAgICAgICAgX2MoImkiLCBbX3ZtLl92KCIgQWJ1c2Ugb2YgcHJpbnRlZCBtYXRlcmlhbHMiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgLSBQcmludGVkIG1hdGVyaWFscywgZXNwZWNpYWxseSB0ZXh0Ym9va3MsIGNhbiBlYXNpbHkgYmUgYWJ1c2VkLiBGb3IgZXhhbXBsZSwgd2hlbiB0ZWFjaGVycyByZXF1aXJlIHN0dWRlbnRzIHRvIG1lbW9yaXplIG1hbnkgZmFjdHMgYW5kIGRlZmluaXRpb25zIGZyb20gYSBwYXJ0aWN1bGFyIHRleHRib29rLCBvciB3aGVuIHRlYWNoZXJzIHVzZSBwYXJ0aWN1bGFyIHRleHRib29rcyBhcyB0aGUgb25seSBzb3VyY2Ugb2YgaW5mb3JtYXRpb24sIGFuZCBjYXJyeSB0aGVtIHRvIGNsYXNzIGluIG9yZGVyIHRvIHJlYWQgZnJvbSB0aGVtIGFuZCBtYWtlIG5vdGVzIGZyb20gdGhlbS4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfYygiaSIsIFtfdm0uX3YoIiBPbmUtd2F5IHByZXNlbnRhdGlvbiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi0gU29tZSBwcmludGVkIG1hdGVyaWFscyBhcmUgbm90IGludGVyYWN0aXZlIGFuZCB0aGV5IHRlbmQgdG8gYmUgdXNlZCBpbiBhIHBhc3NpdmUgd2F5IHdpdGhvdXQgY29tcHJlaGVuc2lvbi4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfYygiaSIsIFtfdm0uX3YoIiBDdXJyaWN1bHVtIHJpZ2lkaXR5IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIC0gU29tZSB0ZXh0Ym9va3MgZGljdGF0ZSB0aGUgY3VycmljdWx1bSByYXRoZXIgdGhhbiBiZWluZyB1c2VkIHRvIHN1cHBvcnQgdGhlIGl0LiBUZXh0IGJvb2tzIGFyZSBvZnRlbiB3cml0dGVuIHRvIGFjY29tbW9kYXRlIHRoZSBjdXJyaWN1bHVtIGd1aWRlbGluZXMgb2YgYSBwYXJ0aWN1bGFyIGNvdW50cnkuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygibGkiLCBbCiAgICAgICAgX2MoImkiLCBbX3ZtLl92KCIgVm9jYWJ1bGFyeSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiAtIFNvbWUgdGV4dHMgaW50cm9kdWNlIGEgbGFyZ2UgbnVtYmVyIG9mIHZvY2FidWxhcnkgdGVybXMgYW5kIGNvbmNlcHRzIGluIGEgc2hvcnQgYW1vdW50IG9mIHNwYWNlLiBUaGlzIHBsYWNlcyBhIGhlYXZ5IGNvZ25pdGl2ZSBidXJkZW4gb24gc3R1ZGVudHMgd2hpY2ggbWlnaHQgYmUgb3ZlcndoZWxtaW5nIGZvciBzb21lIHN0dWRlbnRzIChIZWluaWNoLCBldCBhbC46IDEwNy0xMDgpLiAiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImxpIiwgWwogICAgICAgIF9jKCJpIiwgW192bS5fdigiIFByZXNlbnRhdGlvbiBvZiBpbmZvcm1hdGlvbiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiAtIEJ5IHByZXNlbnRpbmcgdGhlIGluZm9ybWF0aW9uIGxvZ2ljYWxseSBhbmQgaW4gYSBwcmUtZGlnZXN0ZWQgZm9ybSwgcHJpbnRlZCBtYXRlcmlhbHMgZGVueSB0aGUgcmVhZGVyIHRoZSBhYmlsaXR5IHRvIHRoaW5rLCBvcmdhbml6ZSB0aGUgaW5mb3JtYXRpb24sIGFuZCBhcnJpdmUgYXQgaW5kZXBlbmRlbnQgY29uY2x1c2lvbnMuIEhlbmNlLCBwcmludGVkIG1hdGVyaWFscyBlc3BlY2lhbGx5IHRleHQgYm9va3MgZG8gbm90IHN0aW11bGF0ZSBpbnRlcmVzdCBvbiB0aGUgcGFydCBvZiB0aGUgdXNlciB0byBwdXJzdWUgYW55IG9mIHRoZSBpbmZvcm1hdGlvbiBwcmVzZW50ZWQgbXVjaCBmdXJ0aGVyLiAiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImxpIiwgWwogICAgICAgIF9jKCJpIiwgW192bS5fdigiIElnbm9yZSBpbnN0cnVjdGlvbmFsIGlubm92YXRpb25zIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIC0gUHJpbnRlZCBtYXRlcmlhbHMgcmlnaWRseSBwcmVzY3JpYmUgYW5kIHByZS1hcnJhbmdlIGFsbCBsZWFybmluZyBvdXRjb21lcyB3aGljaCBkZW55IHN0dWRlbnRzIHRoZSBhYmlsaXR5IHRvIGFwcGx5IGtub3dsZWRnZSBpbnRvIG5vdmVsIHNpdHVhdGlvbnMuIE1vc3QgcHJpbnRlZCBtYXRlcmlhbHMgZXNwZWNpYWxseSB0ZXh0IGJvb2tzIGRvIG5vdCBhaW0gdG93YXJkcyBpbnF1aXJ5LCBwcm9ibGVtLXNvbHZpbmcsIG9yIGNyaXRpY2FsIHRoaW5raW5nLiBBIHNpbmdsZSB0ZXh0IGJvb2tzIHVzZWQgaW4gYSBwYXJ0aWN1bGFyIGNsYXNzIGxldmVsIGlzIG5vdCBsaWtlbHkgdG8gbWVldCB0aGUgdmFyaWVkIGxlYXJuZXIgYWJpbGl0aWVzIGluIGEgdHlwaWNhbCBjbGFzcy4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfYygiaSIsIFtfdm0uX3YoIiBPdXQtZGF0ZWQgaW5mb3JtYXRpb24gIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLSBUaGUgcHJvY2VzcyBvZiBwdWJsaXNoaW5nIHByaW50ZWQgbWF0ZXJpYWxzIHBhcnRpY3VsYXJseSB0ZXh0IGJvb2tzIGlzIGxvbmcgYW5kIGludm9sdmluZywgc3VjaCB0aGF0IGJ5IHRoZSB0aW1lIGEgdGV4dCBib29rIGlzIHB1Ymxpc2hlZCwgbW9zdCBvZiB0aGUgaW5mb3JtYXRpb24gaXMgb2Jzb2xldGUuIFRoaXMgbWFrZXMgaXQgZGlmZmljdWx0IHRvIGtlZXAgdGhlIGluZm9ybWF0aW9uIGNvbnRhaW5lZCBpbiBwcmludGVkIG1hdGVyaWFsIGN1cnJlbnQgYW5kIHVwIHRvIGRhdGUuICIKICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygidWwiLCBbCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHByb3ZpZGUgZmFjdHVhbCBpbmZvcm1hdGlvbiBzdWNoIGFzIGJhc2ljIGZhY3RzLCBwcm9jZWR1cmVzIGFuZCBwcmluY2lwbGVzICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygibGkiLCBbCiAgICAgICAgX3ZtLl92KCIgdGVhY2ggcmVjb2duaXRpb24gYW5kIGRpc2NyaW1pbmF0aW9uIG9mIHJlbGV2YW50IHN0aW11bGkgIikKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIiBwcmVzZW50IHZvY2FidWxhcnkgIildKSwKICAgICAgX2MoImxpIiwgW192bS5fdigiIFByb3ZpZGUgZGlyZWN0aW9ucy4gIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInVsIiwgWwogICAgICBfYygibGkiLCBbX3ZtLl92KCIgdGVhY2ggc3RlcHMgaW4gcHN5Y2hvbW90b3Igc2tpbGxzICIpXSksCiAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIiBkZW1vbnN0cmF0ZSBwb3NpdGlvbnMgb2YgdGhpbmdzIGR1cmluZyBtb3Rpb24gIildKSwKICAgICAgX2MoImxpIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgdGVhY2ggdGhlIHZhcmlvdXMgcHN5Y2hvbW90b3Igc2tpbGxzIHN1Y2ggYXMgZHJhd2luZywgbWVhc3VyZW1lbnQsIGV0Yy4gIgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJ1bCIsIFsKICAgICAgX2MoImxpIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgcHJvdm9rZSBlbW90aW9uYWwgcmVzcG9uc2VzIGluIHRoZSBsZWFybmVyIHRocm91Z2ggZHJhbWEsIHZpc3VhbHMgZXRjLiAiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImxpIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgdGVhY2ggb24gcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIGF0dGl0dWRlcyAoQW5kZXJzb24sIDE5ODM6MTE1KS4gIgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibm90ZSBub3RlLXByaW1hcnkiIH0sIFsKICAgICAgX2MoImJsb2NrcXVvdGUiLCB7IHN0YXRpY0NsYXNzOiAiYmxvY2txdW90ZSBicS1wcmltYXJ5IiB9LCBbCiAgICAgICAgX2MoImg1IiwgeyBhdHRyczogeyBpZDogIml0ZW0tNC0zLTEiIH0gfSwgWwogICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLXRvb2xzIiB9LCBbX3ZtLl92KCIgQWN0aXZpdHkgNC4yIildKQogICAgICAgIF0pLAogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgQXBhcnQgZnJvbSB0aGUgZXhhbXBsZXMgZ2l2ZW4gYWJvdmUsIGRpc2N1c3MgYW5kIGlkZW50aWZ5IHdpdGggYW5vdGhlciBjb2xsZWFndWUgYWRkaXRpb25hbCB1c2VzIG9mIHByaW50ZWQgbWF0ZXJpYWxzIGluIGFjaGlldmluZyB0aGUgZGlmZmVyZW50IHR5cGVzIG9mIGxlYXJuaW5nIG91dGNvbWVzLiAiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWwtNSIgfSwgWwogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgSW4gdGhpcyBzZWN0aW9uIHdlIHdpbGwgZGlzY3VzcyBob3cgdG8gc2VsZWN0IGFuZCB1c2Ugb3RoZXIgdHlwZXMgb2YgbWVkaWEgYmVzaWRlcyBwcmludGVkIG1lZGlhLiBGcm9tIG91ciBkaXNjdXNzaW9uIGluIFVuaXQgMiwgeW91IHByb2JhYmx5IHN0aWxsIHJlbWVtYmVyIHRoYXQgd2UgaGF2ZSBtYW55IGRpZmZlcmVudCB0eXBlcyBvZiBtZWRpYSB0aGF0IHdlIGNvdWxkIHVzZSBkdXJpbmcgaW5zdHJ1Y3Rpb24uIFdoYXQgaXMgaW1wb3J0YW50IGlzIGJlaW5nIGFibGUgdG8gc2VsZWN0IHRoZSByaWdodCB0eXBlIG9mIG1lZGlhLCBhbmQgdXNpbmcgaXQgdG8gbWVldCBvdXIgaW5zdHJ1Y3Rpb25hbCBnb2FsLiBTaW5jZSB3ZSBjYW5ub3QgZGlzY3VzcyBob3cgdG8gc2VsZWN0IGFsbCB0aGUgZGlmZmVyZW50IHR5cGVzIG9mIG1lZGlhIHRoYXQgd2UgaWRlbnRpZmllZCBpbiBVbml0IDIsIHdlIHdpbGwgc2VsZWN0IGEgZmV3IHRvIHVzZSBhcyBleGFtcGxlcy4gIgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJOb24tcHJvamVjdGVkIG1lZGlhOyIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiTm9uLVByb2plY3RlZCBWaXN1YWxzOyIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiUHJvamVjdGVkIG1lZGlhOyIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQXVkaW8gbWVkaWE7IildKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNb3Rpb24gbWVkaWE7IildKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJDb21wdXRlci1iYXNlZCBtdWx0aW1lZGlhIGFuZCBoeXBlcm1lZGlhLiIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiV2ViLWJhc2VkIG1lZGlhICIpXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgIF9jKCJpIiwgW192bS5fdigiQWR2YW50YWdlcyAiKV0pLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIFRoZXkgYXJlIHJlYWRpbHkgYXZhaWxhYmxlIG9uIGFuIHVubGltaXRlZCByYW5nZSBvZiB0b3BpY3MuICIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgVGhleSBhcmUgZWFzeSB0byB1c2UgYW5kIGRvIG5vdCByZXF1aXJlIGFueSBzcGVjaWFsIGVxdWlwbWVudC4gIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBUaGV5IGFyZSBlYXN5IHRvIHByb2R1Y2UgbG9jYWxseSBhcyB5b3UgYW5kIHlvdXIgc3R1ZGVudHMgY291bGQgZHJhdyBzaW1wbGUgcGljdHVyZXMgb3IgZ3JhcGhpY3MgYW5kIHRha2UgcGhvdG9ncmFwaHMgeW91cnNlbHZlcy4gSW4gdG9kYXkncyBkaWdpdGFsIHdvcmxkLCB5b3VyIGxlYXJuZXJzIGNvdWxkIHRha2UgcGhvdG9ncmFwaHMgYmFzaWNhbGx5IGFueXdoZXJlIHVzaW5nIHRoZWlyIG1hcnQgcGhvbmVzIGFuZCBJLXBhZHMuICIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sIFsKICAgICAgX2MoImkiLCBbX3ZtLl92KCJEaXNhZHZhbnRhZ2VzICIpXSksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgVG8gc2VsZWN0IGFwcHJvcHJpYXRlIG5vbi1wcm9qZWN0ZWQgdmlzdWFscywgeW91IHNob3VsZCBiZSBza2lsbGVkIGVub3VnaCBpbiBtZWRpYSBzZWxlY3Rpb24gdXNpbmcgdGhlIHJlcXVpcmVkIGNyaXRlcmlhLiAiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIE1vc3Qgbm9uLXByb2plY3RlZCB2aXN1YWxzIGFyZSBvYnRhaW5lZCBmcm9tIHRleHRib29rcyBhbmQgbWFnYXppbmVzIGFuZCB0aGV5IHRlbmQgdG8gYmUgdG9vIHNtYWxsIHRvIGJlIHVzZWQgaW4gZnJvbnQgb2YgYSBjbGFzcyB1bmxlc3MgdGhleSBhcmUgZW5sYXJnZWQgb3IgcHJvamVjdGVkLiAiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIEludGVycHJldGF0aW9uIG9mIHZpc3VhbHMgcmVxdWlyZXMgc2tpbGwgYW5kIHRlYWNoZXJzIG5lZWQgdG8gdHJhaW4gc3R1ZGVudHMgaW4gdmlzdWFsIGxpdGVyYWN5IHRvIGJlIGFibGUgdG8gaW50ZXJwcmV0IHZpc3VhbHMgY29ycmVjdGx5LiAiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJ1bCIsIFsKICAgICAgX2MoImxpIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgSXQgZW5hYmxlcyB5b3UgdG8gcHJvamVjdCBhbnl0aGluZyB0aGF0IGFwcGVhcnMgb24geW91ciBjb21wdXRlciBtb25pdG9yLSBkYXRhLCB0ZXh0LCBvciB2aXN1YWxzLiAiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImxpIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgVGhlIGNvbXB1dGVyIGNhbiBzdG9yZSBhbiBpbmZpbml0ZSBudW1iZXIgb2YgdmlzdWFscyB3aGljaCBjYW4gYmUgcmV0cmlldmVkIGJ5IHNpbXBseSBwcmVzc2luZyBhIGtleS4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFRoZSBkaXNwbGF5IGNhbiBiZSBjaGFuZ2VkIGFuZCBtYWRlIGludGVyYWN0aXZlIGR1cmluZyB0aGUgc2hvdy4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFRoZXkgYXJlIGVhc3kgdG8gYWRhcHQgYW5kIG1hbmlwdWxhdGUgdG8gc3VpdCBkaWZmZXJlbnQgc2l0dWF0aW9ucy4gIgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgIF9jKCJpIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgQXMgbXVjaCBhcyB0aGVyZSBhcmUgYWR2YW50YWdlcywgdGhlcmUgYXJlIGFsc28gc29tZSBsaW1pdGF0aW9ucyBvZiBjb21wdXRlciBpbWFnZSBwcm9qZWN0aW9uLiBUaGVzZSBpbmNsdWRlIHRoZSBmb2xsb3dpbmcgIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgVGhlIHJvb20gbXVzdCBiZSBkYXJrZW5lZCBtb3JlIHRoYW4gZm9yIGNvbnZlbnRpb25hbCBvdmVyaGVhZCBwcm9qZWN0aW9uLiBJbiBhIGNsYXNzcm9vbSB3aXRoIGxhcmdlIHdpbmRvd3MgYW5kIG5vIGN1cnRhaW5zIG9yIGJsaW5kcywgdGhpcyBtYXkgcG9zZSBhIGNoYWxsZW5nZS4gIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBMb3cgcmVzb2x1dGlvbiBtYWtlcyBMQ0QgcHJlc2VudGF0aW9ucyBiZXN0IHN1aXRlZCB0byBzbWFsbCBvciBtZWRpdW0tc2l6ZSBncm91cHMuICIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sIFsKICAgICAgX2MoImkiLCBbX3ZtLl92KCJTdGVwLSBieSAtIHN0ZXAgcHJvY2VzcyBpbiBtZWRpYSBzZWxlY3Rpb24iKV0pLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigKICAgICAgICAiIEZvciB5b3UgdG8gc2VsZWN0IHRoZSBtb3N0IGFwcHJvcHJpYXRlIGluc3RydWN0aW9uYWwgbWVkaWEgZHVyaW5nIHRoZSBsZXNzb24sIHlvdSB3aWxsIG5lZWQgdG8gZm9sbG93IHRoZSBmb2xsb3dpbmcgc3RlcHM6ICIKICAgICAgKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBEZXRlcm1pbmUgd2hldGhlciB0aGUgcHVycG9zZSBvZiB5b3VyIGxlc3NvbiBpcyB0byB0cmFuc21pdCBpbmZvcm1hdGlvbiBvciBpbnN0cnVjdGlvbi4gV2hlbiBhIGxlc3NvbiBpbnZvbHZlcyB0cmFuc21pc3Npb24gb2YgaW5mb3JtYXRpb24sIHRoZSBsZWFybmVycyBhcmUgbm90IGhlbGQgcmVzcG9uc2libGUgZm9yIG1lYXN1cmFibGUsIHNwZWNpZmljIGFjdGlvbnMgb3IgcGVyZm9ybWFuY2Ugc2luY2UgdGhlIGNvbnRlbnQgaXMgcHJlc2VudGVkIHRvIGdpdmUgYW4gb3ZlcnZpZXcgb2YgaWRlYXMsIHN1YmplY3QgbWF0dGVyLCB0byBnZW5lcmF0ZSBpbnRlcmVzdCBvciB0byBwcm92aWRlIGJhY2tncm91bmQgaW5mb3JtYXRpb24uIFdoZW4gYSBsZXNzb24gaW52b2x2ZXMgaW5zdHJ1Y3Rpb24sIGxlYXJuZXJzIGFyZSByZXF1aXJlZCB0byBnaXZlIGRlbW9uc3RyYWJsZSBwcm9vZiB0aGF0IHRoZXkgaGF2ZSBsZWFybmVkIGFuZCB0aGV5IGFyZSBoZWxkIHJlc3BvbnNpYmxlIGZvciB0aGUgc3VjY2VzcyBvZiB0aGUgbGVzc29uLiBCb3RoIG9mIHRoZXNlIGNhdGVnb3JpZXMgaGF2ZSBzdWZmaWNpZW50bHkgZGlmZmVyZW50IGNoYXJhY3RlcmlzdGljcyB0byBzdWdnZXN0IHRoYXQgZGlmZmVyZW50IG1lZGlhIG1pZ2h0IGJlIGp1c3RpZmllZC4gIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBEZXRlcm1pbmUgdGhlIHRyYW5zbWlzc2lvbiBtZXRob2QuIFRoaXMgZm9jdXNlcyBvbiB0aGUgbWV0aG9kcyB1c2VkIHRvIHRyYW5zbWl0IHRoZSBjb250ZW50IHRvIHRoZSBsZWFybmVycy4gVGhlIG1vc3QgZG9taW5hbnQgbWV0aG9kcyBhcmU7IGRpcmVjdCBpbnN0cnVjdGlvbiwgaW5kaXJlY3QgaW5zdHJ1Y3Rpb24sIGludGVyYWN0aXZlIGluc3RydWN0aW9uLCBhbmQgaW5kaXZpZHVhbGl6ZWQgaW5zdHJ1Y3Rpb24uIEluIG1vc3QgY2FzZXMsIGRpcmVjdCBhbmQgaW5kaXJlY3QgaW5zdHJ1Y3Rpb24gYXJlIHRlYWNoZXItY2VudGVyZWQgYXBwcm9hY2hlcyBhbmQgdGhlIG1vc3QgY29tbW9ubHkgdXNlZCBtZWRpYSBhcmUgdGhvc2Ugd2hpY2ggYXJlIHRlYWNoZXIgY29udHJvbGxlZCB3aGlsZSBpbnRlcmFjdGl2ZSBhbmQgaW5kaXZpZHVhbGl6ZWQgaW5zdHJ1Y3Rpb24gd2hpY2ggYXJlIGxlYXJuZXItY2VudGVyZWQgYXJlIGJlc3QgcHJlc2VudGVkIHVzaW5nIGluc3RydWN0aW9uYWwgbWVkaWEgdGhhdCBhcmUgbGVhcm5lciBjb250cm9sbGVkLiAiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIERldGVybWluZSB0aGUgbGVzc29uIGNoYXJhY3RlcmlzdGljcy4gT25jZSB5b3UgaGF2ZSBmb3JtdWxhdGVkIHRoZSBsZXNzb24gb2JqZWN0aXZlcywgdGhlIGxlYXJuaW5nIG91dGNvbWVzIGFyZSBkZXRlcm1pbmVkIGFuZCB0aGlzIGhlbHBzIHlvdSBpbiBkZWNpZGluZyBvbiB0aGUgbGVhcm5pbmcgZXhwZXJpZW5jZXMgdGhhdCB3aWxsIGJlIG9yZ2FuaXplZCBmb3IgdGhlIHN0dWRlbnRzLiBUaGUgbGVhcm5pbmcgZXhwZXJpZW5jZXMgaGVscCBpbiBzZWxlY3RpbmcgdGhlIHR5cGVzIG9mIG1lZGlhIHRvIGJlIHVzZWQuICIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgU2VsZWN0IGFuIGluaXRpYWwgY2xhc3Mgb2YgbWVkaWEuIFRoZSBzZWxlY3Rpb24gb2YgdGhlIG1lZGlhIGZvcm1hdCBkZXBlbmRzIG9uIGNlcnRhaW4gcHJhY3RpY2FsIGNvbnNpZGVyYXRpb25zIHdpdGggcmVzcGVjdCB0byBtZWRpYSBjaGFyYWN0ZXJpc3RpY3MuIEVhY2ggdHlwZSBvZiBtZWRpdW0gaGFzIGEgbnVtYmVyIG9mIGNoYXJhY3RlcmlzdGljcywgaW5jbHVkaW5nIHNwZWNpYWwgY2FwYWJpbGl0aWVzIGFuZCBsaW1pdGF0aW9ucywgYWNjb3JkaW5nIHRvIHRoZSBxdWFsaXR5IGFuZCB0eXBlIG9mIGNvbW11bmljYXRpb24geW91IGFyZSBleHBlY3Rpbmcgb2YgaXQuIEZvciBleGFtcGxlLCBzb21lIG1lZGlhIGFyZSBjYXBhYmxlIG9mIHByZXNlbnRpbmcgaW5mb3JtYXRpb24gaW4gZ3JhcGhpYyBmb3JtLCBvdGhlcnMgYXJlIGFsc28gYWJsZSB0byBjb21tdW5pY2F0ZSB1c2luZyBncmFwaGljcywgYnV0IGNhbiBhbHNvIGFkZCBhbiBlbGVtZW50IG9mIG1vdGlvbi4gT3RoZXIgbWVkaWEgYXJlIGVzcGVjaWFsbHkgbWFkZSB0byBwcm92aWRlIHNvdW5kLCB3aGlsZSBvdGhlciBtZWRpYSB0ZW5kIHRvIGVuZ2FnZSB0aGUgbGVhcm5lcnMgbW9yZSBlYXNpbHkgdGhhbiBvdGhlcnMuIFNvbWUgbWVkaWEgYXJlIGVjb25vbWljYWwgaW4gcHJlc2VudGluZyB2ZXJiYWwgaW5mb3JtYXRpb24sIHdoaWxlIG90aGVycyBhcmUgY29udmVuaWVudCB0byBwcm9kdWNlLCBtb2RpZnkgYW5kIHJldmlzZS4gIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBBbmFseXNlIG1lZGlhIGNoYXJhY3RlcmlzdGljcy4gWW91IG5lZWQgdG8gcmVmZXIgdG8geW91ciBpbml0aWFsIGNob2ljZSBvZiBtZWRpYSBhbmQgcmV2aWV3IHRoZSBsaXN0IG9mIHVuaXF1ZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgZWFjaCBtZWRpdW0sIGl0cyBhZHZhbnRhZ2VzIGFuZCBkaXNhZHZhbnRhZ2VzIGZvciBwcmVzZW50aW5nIHRoYXQgcGFydGljdWxhciBsZXNzb24gY29udGVudC4gVGhpcyBoZWxwcyB5b3UgdG8gcmV2aWV3IHlvdXIgbWVkaWEgc2VsZWN0aW9uIGFuZCB0byByZWZpbmUgdGhlIHNlbGVjdGlvbiBieSBlaXRoZXIgcmV0YWluaW5nIHRoZSBzYW1lIG1lZGlhIHNlbGVjdGlvbiBvciByZWNvbnNpZGVyIHlvdXIgZGVjaXNpb24uIElmIHlvdSBkZWNpZGUgdGhhdCB0aGUgaW5pdGlhbCBtZWRpYSBzZWxlY3Rpb24gaXMgbm8gbG9uZ2VyIGFwcHJvcHJpYXRlLCB0aGVuIHlvdSBoYXZlIHRvIGdvIGJhY2sgYW5kIHNlbGVjdCBhbm90aGVyIG1lZGlhIGZvcm1hdC4gIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygidWwiLCBbCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIE5vIG9uZSBtZWRpdW0gaXMgYmVzdCBmb3IgYWxsIGluc3RydWN0aW9uYWwgcHVycG9zZXMuIFRoZSBiZXN0IGNob2ljZSBvZiBtZWRpYSBkZXBlbmRzIG9uIHdoYXQgdHlwZSBvZiBtZWRpYSBzaG93cyBiZXN0IHRoZSBwcmluY2lwbGUgYmVpbmcgdGF1Z2h0LiBGb3IgZXhhbXBsZSwgaWYgdGhlIHRoaXJkIGRpbWVuc2lvbiBwbGF5cyBhbiBpbXBvcnRhbnQgcGFydCBpbiBjb21tdW5pY2F0aW5nIHlvdXIgbWVzc2FnZSwgdGhlbiB5b3Ugc2hvdWxkIGV4cGVjdCBiZXR0ZXIgcmVzdWx0cyBmcm9tIGEgbW9kZWwuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygibGkiLCBbCiAgICAgICAgX3ZtLl92KCIgTWVkaWEgdXNlcyBzaG91bGQgYmUgY29uc2lzdGVudCB3aXRoIGxlc3NvbiBvYmplY3RpdmVzLiAiKQogICAgICBdKSwKICAgICAgX2MoImxpIiwgWwogICAgICAgIF92bS5fdigiIFVzZXJzIG11c3QgZmFtaWxpYXJpemUgdGhlbXNlbHZlcyB3aXRoIG1lZGlhIGNvbnRlbnQgIikKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfdm0uX3YoIiBNZWRpYSBtdXN0IGJlIGFwcHJvcHJpYXRlIGZvciB0aGUgaW5zdHJ1Y3Rpb25hbCBmb3JtYXQuICIpCiAgICAgIF0pLAogICAgICBfYygibGkiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBNZWRpYSBtdXN0IGJlIGFkYXB0YWJsZSB0byBzdHVkZW50IGNhcGFiaWxpdGllcyBhbmQgbGVhcm5pbmcgc3R5bGVzLiAiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImxpIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgTWVkaWEgYXJlIG5laXRoZXIgZ29vZCBub3IgYmFkIHNpbXBseSBiZWNhdXNlIHRoZXkgYXJlIGNvbmNyZXRlIG9yIGFic3RyYWN0LiAiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImxpIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgTWVkaWEgc2hvdWxkIGJlIGNob3NlbiBvYmplY3RpdmVseSByYXRoZXIgdGhhbiBvbiB0aGUgYmFzaXMgb2YgcGVyc29uYWwgcHJlZmVyZW5jZXMgb3IgYmlhcy4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFBoeXNpY2FsIGNvbmRpdGlvbnMgc3Vycm91bmRpbmcgdXNlcyBvZiBtZWRpYSBzaWduaWZpY2FudGx5IGFmZmVjdCB0aGUgcmVzdWx0cyBvYnRhaW5lZC4gIgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJ1bCIsIFsKICAgICAgX2MoImxpIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgQmUgc3VyZSBldmVyeW9uZSBjYW4gc2VlIHRoZW0uIEFsbCB2aXN1YWxzIG1hdGVyaWFscyBiZWluZyB1c2VkIHdpdGggYSBncm91cCBtdXN0IGJlIHZpc2libGUuIFRoZXkgc2hvdWxkIGJlIGxhcmdlIGVub3VnaCB0byBiZSBzZWVuIGVhc2lseSBieSBldmVyeW9uZSBpbiBjbGFzcy4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFVzZSB0aHJlZS1kaW1lbnNpb25hbCBtYXRlcmlhbHMgaW4gY29tYmluYXRpb24gd2l0aCBvdGhlciBtZWRpYS4gRm9yIGV4YW1wbGUsIHdoZW4geW91IHVzZSBhIG1vZGVsIG9mIGEgZmxvd2VyIHRvIGV4cGxhaW4gcG9sbGluYXRpb24gaW4gYSBCaW9sb2d5IGNsYXNzLCB5b3UgY291bGQgdXNlIGEgbGFyZ2UgY2hhcnQgdG8gc2hvdyB0aGUgZGV0YWlscyAiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImxpIiwgW192bS5fdigiIFByYWN0aWNlIHVzaW5nIHRoZSBtYXRlcmlhbHMgYmVmb3JlIHRoZSBjbGFzcy4gIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtbC01IHRleHQtanVzdGlmeSIgfSwgWwogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICAgIF9jKCJpIiwgW192bS5fdigiUGVvcGxlIGFzIGEgcmVzb3VyY2UiKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgUGVvcGxlIGFzIGEgcmVzb3VyY2UgZm9yIGxlYXJuaW5nIGNvbnNpc3Qgb2YgcHJvZmVzc2lvbmFscyBhbmQgZXhwZXJpZW5jZWQgZ3JvdXBzLiBUbyB1dGlsaXplIHBlb3BsZSBhcyBsZWFybmluZyByZXNvdXJjZXMgcmVxdWlyZXMgcHJvcGVyIHBsYW5uaW5nLiBQbGFubmluZyBlbnRhaWxzOiAiCiAgICAgICAgKSwKICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCIgU3BlY2lmeWluZyB0aGUgaW5zdHJ1Y3Rpb25hbCBvYmplY3RpdmVzLiAiKV0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBJbnRlcmFjdGluZyB3aXRoIHRoZSBwZXJzb24gZWl0aGVyIGZvcm1hbGx5IG9yIGluZm9ybWFsbHkgdG8gZXN0YWJsaXNoIHdoZXRoZXIgdGhleSB3aWxsIGxpdmUgdXAgdG8gdGhlIGV4cGVjdGF0aW9ucyBvZiB5b3VyIHN0dWRlbnRzLiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBJbnZpdGUgdGhlIHBlcnNvbiBmb3JtYWxseSB0byBjbGFzcyBhbmQgYnJpZWYgdGhlbSBvbiA6IHRoZSBsZXZlbCBvZiB0aGUgY2xhc3MsIHRoZWlyIGludGVyZXN0cywgdGhlIGxlYXJuaW5nIG9iamVjdGl2ZXMsIHRoZSBzdHVkZW50cycgZXhwZWN0YXRpb25zLCB0aW1lIGFsbG93ZWQgZm9yIHRoZSBwcmVzZW50YXRpb24sICIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEludHJvZHVjZSB0aGUgcGVyc29uIGR1cmluZyB0aGUgcHJlc2VudGF0aW9uIGFuZCBiZSBwcmVzZW50IHRocm91Z2hvdXQgdGhlIHByZXNlbnRhdGlvbi4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIiBJbmNsdWRlIGEgcXVlc3Rpb24gb3IgZGlzY3Vzc2lvbiBzZXNzaW9uLiAiKV0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfdm0uX3YoIiBPcmdhbml6ZSBhIGZvbGxvdy11cCBhY3Rpdml0eSBhZnRlciB0aGUgcHJlc2VudGF0aW9uLiAiKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sIFsKICAgICAgICBfYygiaSIsIFtfdm0uX3YoIkFjdGl2aXRpZXMgYXMgYSByZXNvdXJjZSIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBBY3Rpdml0aWVzIGNvdWxkIGluY2x1ZGU7IGFncmljdWx0dXJhbCBzaG93LCB0cmFkZSBmYWlyLCBleGhpYml0aW9uLCByZWxpZ2lvdXMgZ2F0aGVyaW5nLCB2aXNpdGluZyBzcGVha2VyLCBhIGZ1bmN0aW9uIGV0Yy4gQ29tbXVuaXR5IGFjdGl2aXRpZXMgYXJlIHRyaWNreSB0byB1c2UgYmVjYXVzZSB0aGV5IGFyZSBjb21wbGV0ZWx5IG91dCBvZiB5b3VyIGNvbnRyb2wgYXMgdGhlIHRlYWNoZXIuIFRoZXJlZm9yZSwgaXQgaXMgaW1wb3J0YW50IHRoYXQgeW91IGZhbWlsaWFyaXplIHlvdXJzZWxmIHdpdGggdGhlIGNvbnRlbnRzIG9mIHRoZSBhY3Rpdml0eSBieSBlaXRoZXI7IGF0dGVuZGluZyB0aGUgZXZlbnQgcHJpb3IgdG8gdGFraW5nIHlvdXIgc3R1ZGVudHMsIHJlYWRpbmcgZnJvbSBicm9jaHVyZXMsIG5ld3NwYXBlcnMsIHRhbGtpbmcgdG8gdGhlIG9yZ2FuaXplcnMsIGV0Yy4gSW4gY2FzZSB5b3UgZGVjaWRlIHRvIHRha2UgdGhlIHN0dWRlbnRzIHRvIHRoZSBhY3Rpdml0eSwgYnJpZWYgdGhlbSBhYm91dCB3aGF0IHRvIGxvb2sgZm9yIGFuZCBhc2sgdGhlbSB0byBwcmVwYXJlIGEgYnJpZWYgcmVwb3J0IG9mIHdoYXQgdGhleSBzYXcgYW5kIGxlYXJuZWQuIEFsc28gaWYgeW91IGNhbm5vdCB0YWtlIHRoZSBzdHVkZW50cywgeW91IGNvdWxkIGF0dGVuZCB0aGUgZXZlbnQsIGNvbGxlY3QgcmVsZXZhbnQgbGl0ZXJhdHVyZSwgcmVjb3JkIHRoZSBwcm9jZWVkaW5ncywgZXRjLiwgYW5kIHRoZW4gbWFrZSBhIHByZXNlbnRhdGlvbiB0byB5b3VyIHN0dWRlbnRzIHBlcnNvbmFsbHkuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJQbGFjZXMgYXMgYSByZXNvdXJjZSIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBQbGFjZXMgcmVmZXIgdG8gbG9jYXRpb25zIHdpdGhpbiB0aGUgY29tbXVuaXR5IHdoaWNoIG1pZ2h0IGNvbnRhaW4gZmFjaWxpdGllcyB0aGF0IGNvdWxkIGJlIHVzZWQgdG8gZGVtb25zdHJhdGUgY2VydGFpbiBjb25jZXB0cyBhbmQgaWRlYXMuIFRoZXNlIGNvdWxkIGluY2x1ZGU7IGlycmlnYXRpb24gcHJvamVjdHMsIGZhY3RvcmllcywgbWFya2V0cywgbGFuZGZvcm1zLCBpbnN0aXR1dGlvbnMsIGV0Yy4gVHJpcHMgYXJlIG9yZ2FuaXplZCB0byBwbGFjZXMgd2hlcmUgc3R1ZGVudHMgY2FuIHNlZSBpbiBwcmFjdGljZSBvciBpbiByZWFsaXR5IHdoYXQgdGhleSBoYXZlIHN0dWRpZWQgaW4gY2xhc3MuIE5vdGUgdGhhdCBEYWxlJ3MgY29uZSBvZiBFeHBlcmllbmNlIHBsYWNlcyBmaWVsZCB0cmlwcyB0b3dhcmRzIHRoZSBtaWRkbGUgb2YgdGhlIGNvbmUgKFNlZSBzdWItc2VjdGlvbiAyLjIuMiAtIFJvbGUgb2YgTWVkaWEgaW4gVGVhY2hpbmcgYW5kIExlYXJuaW5nKSBiZWNhdXNlIHRob3VnaCB0aGUgZXhwZXJpZW5jZSBpcyByZWFsLCBzdHVkZW50cyBhcmUgb25seSBzZWVpbmcgYW5kIGhlYXJpbmcgYnV0IG5vdCBkaXJlY3RseSBtYW5pcHVsYXRpbmcgdGhlbS4gT25jZSBzdHVkZW50cyB1bmRlcnRha2Ugc3VjaCB0cmlwcywgY29uY2VwdHMgYW5kIGdlbmVyYWxpemF0aW9ucyB0aGF0IHdlcmUgZGlmZmljdWx0IHRvIGZvcm11bGF0ZSBiZWNvbWUgY2xlYXJlci4gU3R1ZHkgdHJpcHMgY2FuIGJlIG9yZ2FuaXplZCBpbiBhbnkgc3ViamVjdCBhcmVhIGZvciBhbnkgbGV2ZWwgb2Ygc3R1ZGVudHMuIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGZpZWxkIHRyaXBzLCByZWZlciB0byBzY2hvb2wgZ3VpZGVsaW5lcyAoSWYgYWxyZWFkeSBhIHByYWN0aWNpbmcgdGVhY2hlcikgb3IgYWNjZXNzIGluZm9ybWF0aW9uIGZyb20gdGhlIEludGVybmV0LiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF9jKCJpIiwgW192bS5fdigiT2JqZWN0cyBhcyBhIHJlc291cmNlIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIE9iamVjdHMgcmVmZXIgdG8gdGhpbmdzIHRoYXQgYXJlIGZvdW5kIHdpdGhpbiB0aGUgY29tbXVuaXR5IHdoaWNoIGNvdWxkIGJlIHVzZWQgdG8geWllbGQgY2VydGFpbiBsZWFybmluZyBvdXRjb21lcy4gT2JqZWN0cyBpbmNsdWRlOyBhcnRpZmFjdHMsIHNwZWNpbWVucywgY29pbnMsIGV0Yy4gVGhlIHByb2NlZHVyZSBmb3IgdXRpbGl6aW5nIG9iamVjdHMgaXMgc2ltaWxhciB0byB0aGF0IG9mIG90aGVyIG1lZGlhLCB0aG91Z2ggYXMgYSB0ZWFjaGVyIHlvdSBuZWVkIHRvIGRldmVsb3AgdGhlIGhhYml0IG9mIGNvbGxlY3RpbmcgdGhlbSBmcm9tIGNvbW11bml0eSBhbmQgYnVpbGRpbmcgYSByZXNvdXJjZSBwb29sIGZvciBzdWNoIG9iamVjdHMgc28gdGhhdCB5b3UgY2FuIHNlbGVjdCBhbmQgdXNlIHRoZW0gYXQgeW91ciBjb252ZW5pZW5jZS4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFRvIHV0aWxpemUgY29tbXVuaXR5IHJlc291cmNlcyBpbiBnZW5lcmFsLCB0aGUgZm9sbG93aW5nIHByb2NlZHVyZSBzaG91bGQgYXBwbHk6ICIKICAgICAgICApLAogICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgUGxhbiBmb3IgdGhlIHVzZSBvZiBhbnkgY29tbXVuaXR5IHJlc291cmNlIHdoZXRoZXIgcGVvcGxlLCBhY3Rpdml0aWVzLCBwbGFjZXMgb3Igb2JqZWN0cy4gUGxhbm5pbmcgaW52b2x2ZXMgZm9ybXVsYXRpbmcgYW4gaW5zdHJ1Y3Rpb25hbCBnb2FsIGFuZCBzdGF0aW5nIHRoZSBsZWFybmluZyBvdXRjb21lcy9vYmplY3RpdmVzIHRvIGJlIGFjaGlldmVkIGJ5IHVzaW5nIHRoZSBpZGVudGlmaWVkIGNvbW11bml0eSByZXNvdXJjZXMuICIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF92bS5fdigiIEtub3cgdGhlIHR5cGVzIG9mIHJlc291cmNlcyBhdmFpbGFibGUgaW4geW91ciBjb21tdW5pdHkuICIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgQ29uc2lkZXIgdGhlIHVzZSBvZiBvdGhlciBtZWRpYSBzdWNoIGFzIHBob3RvZ3JhcGhzLCBtYXBzLCB2aWRlbyBhbmQgYXVkaW8gcmVjb3JkaW5ncywgZXRjLiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBBbHdheXMgaW5jbHVkZSBmb2xsb3ctdXAgZGlzY3Vzc2lvbnMgZm9yIHN0dWRlbnRzIHRvIHJlZmxlY3Qgb24gdGhlaXIgbGVhcm5pbmcgZXhwZXJpZW5jZXMuICIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtbC01IHRleHQtanVzdGlmeSIgfSwgWwogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgVHdvLWRpbWVuc2lvbmFsIHZpc3VhbHMgaW5jbHVkZSBwaWN0dXJlcyBhbmQgZ3JhcGhpY3MuIEdlbmVyYWxseSB0d28tZGltZW5zaW9uYWwgdmlzdWFscyBzdWNoIGFzIGRpYWdyYW1zIGFyZSBvZnRlbiBhYnN0cmFjdCBhbmQgcmVxdWlyZSBzcGVjaWFsIGJhY2tncm91bmQga25vd2xlZGdlIHRvIHJlYWQgdGhlbS4gV2hlbiBjb25zaWRlcmluZyBzdWNoIHZpc3VhbHMsIGEgdGVhY2hlciBuZWVkcyB0byBhc2sgaGltc2VsZi9oZXJzZWxmIHR3byBxdWVzdGlvbnMuIEZpcnN0LCBpcyB0aGUgdmlzdWFsIGlsbHVzdHJhdGlvbiBuZWNlc3NhcnkgYXQgYWxsPyBTZWNvbmQsIGlmIGl0IGlzIG5lY2Vzc2FyeSwgaG93IG11Y2ggZG9lcyB0aGUgdmlzdWFsIGNvbnRyaWJ1dGUgdG8gdGhlIHVuZGVyc3RhbmRpbmcgb2YgdGhlIGNvbnRlbnQvY29uY2VwdCBvciBwcm9jZXNzIGJlaW5nIHRhdWdodD8iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIEdyYXBoaWNzIGhlbHAgdG8gc3ludGhlc2l6ZSBpbmZvcm1hdGlvbiBhbmQgaGlnaGxpZ2h0IHNpZ25pZmljYW50IGVsZW1lbnRzIGFuZCBzaG91bGQgYmUgdXNlZCBhZnRlciB0aGUgY29udGVudC9jb25jZXB0IGhhcyBiZWVuIGludHJvZHVjZWQuICIKICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1sLTUgdGV4dC1qdXN0aWZ5IiB9LCBbCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBBIGRpc3BsYXkgaXMgYW4gb3JnYW5pemVkIGFycmFuZ2VtZW50IG9mIHZpc3VhbCBhbmQgdmVyYmFsIGxlYXJuaW5nIG1hdGVyaWFscyB0aGF0IHByZXNlbnRzIHNpZ25pZmljYW50IGluZm9ybWF0aW9uIG9yIGlkZWFzIG9uIGEgdG9waWMgb3IgdGhlbWUuIEEgZGlzcGxheSBtaWdodCBpbnZvbHZlIHRoZSB1c2Ugb2YgZWl0aGVyIHR3byBvciB0aHJlZSBkaW1lbnNpb25hbCBtYXRlcmlhbHMgc3VjaCBhcyBkaWFncmFtcywgcGhvdG9ncmFwaHMsIGdyYXBocywgb3Igb2JqZWN0cyBhbmQgc3BlY2ltZW4uICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICAgIF92bS5fdigiIERpc3BsYXlzIHNlcnZlIHRocmVlIG1haW4gZnVuY3Rpb25zOiAiKSwKICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiIE1vdGl2YXRpb25hbCIpXSksCiAgICAgICAgICAgIF92bS5fdigiOyBhcyB0aGV5IHN0aW11bGF0ZSBpbnRlcmVzdCBhbmQgY3VyaW9zaXR5LiAiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiRGV2ZWxvcG1lbnRhbCIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiOyBieSBwcm92aWRpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBvbiBhIHRvcGljIGFuZCBmYWNpbGl0YXRpbmcgY29tcHJlaGVuc2lvbi4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJWaXN1YWwgc3VtbWFyeSIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiOyBieSBwdWxsaW5nIHRvZ2V0aGVyIHRoZSBrZXkgaWRlYXMgaW4gYSB0b3BpYyBvciB1bml0IG9mIHN0dWR5LiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBBcyB3ZSBtZW50aW9uZWQgaW4gVW5pdCAyLCBkaXNwbGF5IHN1cmZhY2VzIGluY2x1ZGU7IGZlbHQgYm9hcmRzLCBwZWdib2FyZHMsIGNoYWxrYm9hcmRzLCBidWxsZXRpbiBib2FyZHMsIGZsaXAgY2hhcnRzLCBtYWduZXRpYyBib2FyZHMsIGFuZCBleGhpYml0cy4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJQbGFubmluZyBhbmQgT3JnYW5pemluZyBEaXNwbGF5cyAiKV0pLAogICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgUGxhbiBhaGVhZCBhbmQgaGF2ZSBhIGdvb2QgaWRlYSBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0ZXJtIHRoZSB0b3BpY3Mgb3IgdW5pdHMgZm9yIHdoaWNoIGRpc3BsYXlzIHdpbGwgYmUgYXBwcm9wcmlhdGUuICIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEZvcm11bGF0ZSBjbGVhciBnb2FscyBmb3IgdXNpbmcgZGlzcGxheXMgdG8gYXJvdXNlIHN0dWRlbnRzJyBpbnRlcmVzdCwgdG8gZXhwbGFpbiBhIGNlcnRhaW4gcHJvY2VzcywgdG8gcG9zZSBhIHByb2JsZW0sIGV0Yy4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIiBJZGVudGlmeSB0aGUgY29udGVudCBmb3IgeW91ciBkaXNwbGF5LiAiKV0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBHYXRoZXIgdGhlIG1hdGVyaWFscy4gRGVjaWRlIG9uIHRoZSBuYXR1cmUgb2YgdGhlIG1hdGVyaWFscyBmb3IgdGhlIGRpc3BsYXkuIFRoZSBtYXRlcmlhbHMgY291bGQgaW5jbHVkZSBuZXdzcGFwZXIgYW5kIG1hZ2F6aW5lIGFydGljbGVzLCBwaG90b2dyYXBocywgZ3JhcGhzLCBjaGFydHMsIG9iamVjdHMsIHNwZWNpbWVuLCBldGMuIG1ha2Ugc3VyZSB0aGF0IHRoZSBtYXRlcmlhbHMgcHJvdm9rZSBmdXJ0aGVyIHF1ZXN0aW9ucyBpbiB0aGUgc3R1ZGVudHMnL3ZpZXdlcnMnIG1pbmQuIFRoZSBtYXRlcmlhbHMgY29sbGVjdGVkIHNob3VsZCBjb21wbGVtZW50IGVhY2ggb3RoZXIgYW5kIGVuaGFuY2UgYW4gb3ZlcmFsbCBlZmZlY3QuICIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIFBsYW4gYSBsYXlvdXQgb2YgdGhlIGRpc3BsYXkuIEF0dHJpYnV0ZXMgb2YgYSBnb29kIGRpc3BsYXkgbGF5b3V0IGluY2x1ZGU6IHRoZSBkaXNwbGF5IHNob3VsZCBjb21tdW5pY2F0ZSBvbmUgY2VudHJhbCBpZGVhIHNvIGtlZXAgaXQgc2ltcGxlLCB1c2UgY29sb3VyIHdpc2VseSwgdXNlIGFwcHJvcHJpYXRlIGhlYWRpbmdzIGFuZCBjYXB0aW9ucywgdXNlIGdvb2QgbGV0dGVyaW5nLCBhbmQgaW52b2x2ZSB0aGUgdmlld2VycyAoV2l0dGljaCAmIFNjaHVsbGVyLCAxOTc5OjEzMC0xMzUpLiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJ1bCIsIFsKICAgICAgX2MoImxpIiwgW192bS5fdigiIHByZXZpZXcgdGhlIG1hdGVyaWFscyAiKV0pLAogICAgICBfYygibGkiLCBbX3ZtLl92KCIgcHJlcGFyZSB0aGUgbWF0ZXJpYWxzICIpXSksCiAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIiBwcmVwYXJlIHRoZSBlbnZpcm9ubWVudCAiKV0pLAogICAgICBfYygibGkiLCBbX3ZtLl92KCIgcHJlcGFyZSB0aGUgbGVhcm5lcnMgIildKSwKICAgICAgX2MoImxpIiwgW192bS5fdigiIHByb3ZpZGUgdGhlIGxlYXJuaW5nIGV4cGVyaWVuY2UuICIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgIF9jKCJpIiwgW192bS5fdigiUHJldmlldyB0aGUgTWF0ZXJpYWxzIildKSwKICAgICAgX3ZtLl92KAogICAgICAgICIgQXVkaW8gbWF0ZXJpYWxzIHNob3VsZCBiZSBwcmV2aWV3ZWQgdXNpbmcgYW4gYXBwcmFpc2FsIGNoZWNrbGlzdC4gVGhlIGNoZWNrbGlzdCBzaG91bGQgY292ZXIgdGhlIGZvbGxvd2luZyBjcml0ZXJpYTogIgogICAgICApCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICBfdm0uX3YoCiAgICAgICAgIiBBcyB5b3UgcHJldmlldyB0aGUgbWF0ZXJpYWxzLCBkZWNpZGUgaG93IHlvdSBhcmUgZ29pbmcgdG8gdXNlIHRoZSBtYXRlcmlhbHMsIGhvdyB0aGUgc3R1ZGVudHMgd2lsbCBiZSBpbnZvbHZlZCwgYW5kIHdoYXQgZm9sbG93LXVwIGFjdGl2aXRpZXMgdG8gdXNlLiIKICAgICAgKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJiciIpLAogICAgICBfYygiaSIsIFtfdm0uX3YoIlByZXBhcmUgdGhlIE1hdGVyaWFscyIpXSksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoCiAgICAgICAgIiBCZWZvcmUgdXNpbmcgYXVkaW8gbWF0ZXJpYWxzIGZvciBncm91cCBwcmVzZW50YXRpb24sIHByYWN0aWNlIG9wZXJhdGlvbiBvZiB0aGUgZXF1aXBtZW50LiBDdWVpbmcgdGhlIG1hdGVyaWFsIGlzIGltcG9ydGFudCB0byBhdm9pZCBkZWxheXMgYW5kIGxvc3QgdGltZS4gUHJlcGFyZSB5b3VyIGludHJvZHVjdGlvbiBhbmQgZm9sbG93LXVwLiBJZiB0aGVyZSBhcmUgb3RoZXIgbWF0ZXJpYWxzIHRvIGJlIHVzZWQgYWxvbmctc2lkZSB3aXRoIHRoZSBhdWRpbyBtYXRlcmlhbHMsIGJlIHN1cmUgdG8gcHJhY3RpY2UgZmlyc3QuIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJpIiwgW192bS5fdigiUHJlcGFyZSB0aGUgRW52aXJvbm1lbnQiKV0pLAogICAgICBfYygiYnIiKSwKICAgICAgX3ZtLl92KAogICAgICAgICIgU2V0IHVwIHRoZSBjbGFzc3Jvb20gb3IgbGVhcm5pbmcgZW52aXJvbm1lbnQgc28gdGhhdCBhbGwgc3R1ZGVudHMgY2FuIGhlYXIgdGhlIGF1ZGlvIHRhcGUuIEZvciBhIGxhcmdlIGF1ZGllbmNlLCBhdm9pZCB1c2luZyBhIHNtYWxsIGF1ZGlvIGNhc3NldHRlIHJlY29yZGVyL3BsYXliYWNrLiBNYWtlIHN1cmUgdGhhdCB5b3UgdXNlIGdvb2QgcXVhbGl0eSBzcGVha2VycyB0aGF0IGRvIG5vdCBkaXN0b3J0IHRoZSBzb3VuZC4iCiAgICAgICksCiAgICAgIF9jKCJiciIpLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImkiLCBbX3ZtLl92KCJQcmVwYXJlIHRoZSBMZWFybmVycyIpXSksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoCiAgICAgICAgIiBCZWZvcmUgcGxheWluZyB0aGUgYXVkaW8gbWF0ZXJpYWwsIGNvbW11bmljYXRlIHRvIHN0dWRlbnRzIGhvdyB0aGUgbWF0ZXJpYWwgcmVsYXRlcyB0byB3aGF0IHRoZXkgaGF2ZSBzdHVkaWVkIGJlZm9yZSwgd2hhdCB0aGV5IHNob3VsZCBsZWFybiBmcm9tIHRoZSBtYXRlcmlhbHMsIGFuZCB3aGF0IGZvbGxvdy11cCBhY3Rpdml0aWVzIHdpbGwgYmUgdXNlZC4gSWYgbmV3IHZvY2FidWxhcnksIG9yIHRlY2huaWNhbCB0ZXJtcyBhcmUgZ29pbmcgdG8gYmUgcHJlc2VudGVkLCBsaXN0IHRoZW0gb24gdGhlIGNoYWxrYm9hcmQsIGhhbmRvdXQgb3Igb3ZlcmhlYWQgdHJhbnNwYXJlbmN5IGFuZCBkZWZpbmUvIGV4cGxhaW4gdGhlbSBiZWZvcmUgc3R1ZGVudHMgbGlzdGVuIHRvIHRoZSBhdWRpbyBtYXRlcmlhbHMuIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJpIiwgW192bS5fdigiIFByb3ZpZGUgdGhlIExlYXJuaW5nIEV4cGVyaWVuY2UiKV0pLAogICAgICBfYygiYnIiKSwKICAgICAgX3ZtLl92KAogICAgICAgICIgRW5nYWdlIGxlYXJuZXJzIGluIGFjdGl2aXRpZXMgZHVyaW5nIHRoZSBwcmVzZW50YXRpb24gdG8gaGVscCBpbiBsZWFybmluZyB0cmFuc2Zlci4gTGV0IHN0dWRlbnRzIGNhcnJ5IG91dCBjZXJ0YWluIGxlYXJuaW5nIGFjdGl2aXRpZXMgYXMgdGhleSBsaXN0ZW4uIERldmVsb3AgYXVkaW8gbGVhcm5pbmcgc2tpbGxzIGJ5IGVuZ2FnaW5nIHN0dWRlbnRzIGluIGFjdGl2aXRpZXMgdGhhdCBmb3JjZSB0aGVtIHRvIGxpc3RlbiBhdHRlbnRpdmVseSB0byB0aGUgcHJlc2VudGF0aW9uIHRocm91Z2ggdGFza3MgYmFzZWQgb24gd2hhdCB0aGV5IGxpc3RlbiB0byBhbmQgaGVhciBmcm9tIHRoZSBhdWRpbyBwcmVzZW50YXRpb24uIE9uZSB3YXkgb2YgZG9pbmcgdGhpcyBpcyB0byBnaXZlIHN0dWRlbnRzIGEgc2V0IG9mIHF1ZXN0aW9ucyB0byBhbnN3ZXIgYXMgdGhleSBsaXN0ZW4gdG8gdGhlIGF1ZGlvIHRhcGUuIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIikKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1sLTUiIH0sIFsKICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1qdXN0aWZ5IG1lbWUiIH0sIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIEZpcnN0IHlvdSBuZWVkIHRvIGV2YWx1YXRlIHRoZSBwdXJwb3NlIGZvciB3aGljaCB0aGUgbWF0ZXJpYWxzIGFyZSB0byBiZSB1c2VkIGFuZCB0aGVuIHNlbGVjdCB0aGUgdHlwZSBvZiBtYXRlcmlhbCB0byBhY2NvbXBsaXNoIHRoaXMgcHVycG9zZS4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFRoZSBmaXJzdCBzdGVwIGluIHNlbGVjdGluZyBzdGlsbCBwcm9qZWN0aW9uIG1hdGVyaWFscyBpcyBkZWNpZGluZyB3aGV0aGVyIGEgcGFydGljdWxhciBtYXRlcmlhbCBzZXJ2ZXMgYSBzcGVjaWZpYyB0ZWFjaGluZyBwdXJwb3NlIGJldHRlciB0aGFuIGFub3RoZXIgbWVkaXVtIG9yIGRldmljZS4gSW4gdGhpcyBjYXNlLCBjb25zaWRlciB0aGUgdW5pcXVlIHByb3BlcnRpZXMgb2YgdGhhdCBwYXJ0aWN1bGFyIG1lZGl1bS4gVGhlIGZpdmUgYmFzaWMgcXVlc3Rpb25zIHRvIGFzayBpbmNsdWRlICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSBmb250LWl0YWxpYyIgfSwgWwogICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgSXMgbW90aW9uIG5lY2Vzc2FyeSBmb3Igc3R1ZGVudHMnIHVuZGVyc3RhbmRpbmcgb2YgdGhlIGNvbmNlcHRzIHRvIGJlIGxlYXJuZWQ/IElmIHNvLCB0aGVuIHN0aWxsIHByb2plY3Rpb24gbWVkaWEgYXJlIG5vdCB0aGUgYmVzdC4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgQXJlIHN1aXRhYmxlIG1hdGVyaWFscyBhdmFpbGFibGUgZm9yIG15IHBhcnRpY3VsYXIgdGVhY2hpbmcgcHVycG9zZT8gIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgRG9lcyB3aGF0IEkgYW0gdGVhY2hpbmcgaW52b2x2ZSBhIHNlcmllcyBvZiBzdGVwLWJ5LXN0ZXAgZGV2ZWxvcG1lbnRzIG9yIGEgZml4ZWQgbG9naWNhbCBwcm9ncmVzc2lvbj8gSWYgc28sIHRyYW5zcGFyZW5jeSBvdmVybGF5cyB3aWxsIGJlIHRoZSBiZXN0IGNob2ljZSAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBEbyBJIG5lZWQgbWF0ZXJpYWxzIHRoYXQgdGVsbCBhIHN0b3J5IHRocm91Z2ggcGljdHVyZXM/IElmIHNvLCBzdGlsbCBwcm9qZWN0aW9uIHdpbGwgYmUgbmVjZXNzYXJ5LiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBJcyBzcGVlZCBvciBvdGhlciBhc3BlY3RzIG9mIHRpbWluZyBpbXBvcnRhbnQgaW4gbXkgdGVhY2hpbmcgZ29hbD8gIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgQWZ0ZXIgc2VsZWN0aW5nIHRoZSB0eXBlIG9mIHN0aWxsIHByb2plY3Rpb24gdG8gdXNlLCB0aGVuIHByZXBhcmUgZm9yIHRoZSBwcmVzZW50YXRpb24uIEF0IHRoaXMgc3RhZ2UsIHlvdSBuZWVkIHRvIGJlY29tZSBmdWxseSBhY3F1YWludGVkIHdpdGggdGhlIGtleSBwb2ludHMgdG8gYmUgaGlnaGxpZ2h0ZWQgZm9yIHRoZSBzdHVkZW50cy4gVGhpcyBzaG91bGQgaGFwcGVuIHdoZW4geW91IHByZXZpZXcgdGhlIHN0aWxsIHByb2plY3Rpb24uIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBUaGUgbmV4dCBzdGVwIGlzIHRvIHByZXBhcmUgdGhlIGNsYXNzIGJ5IGV4cGxhaW5pbmcgdG8gdGhlbSB3aHkgdGhleSBhcmUgdmlld2luZyB0aGF0IHBhcnRpY3VsYXIgcHJlc2VudGF0aW9uLiBMZXQgc3R1ZGVudHMgdW5kZXJzdGFuZCBjbGVhcmx5IHdoYXQgdG8gbG9vayBmb3IgZnJvbSB0aGUgcHJvamVjdGlvbi4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIE5leHQsIG1ha2UgdGhlIHByZXNlbnRhdGlvbiBhbmQgaW52b2x2ZSB0aGUgc3R1ZGVudHMgaW4gdGhlIGFjdHVhbCB1c2Ugb2YgbWVkaWEuIEZpbmFsbHksIHByb3ZpZGUgc29tZSBmb2xsb3ctdXAgYWN0aXZpdGllcyB0aGF0IGFsbG93IHN0dWRlbnRzIHRvIGV2YWx1YXRlIGRlbW9uc3RyYXRlIGFuZCBhcHBseSB3aGF0IHRoZXkgaGF2ZSBsZWFybmVkLiAiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWwtNSIgfSwgWwogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWp1c3RpZnkgbWVtZSIgfSwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgRm9sbG93IHRoZSA1IFAncyBvZiBtZWRpYSB1dGlsaXphdGlvbiBuYW1lbHk7IHByZXZpZXcgdGhlIG1hdGVyaWFscywgcHJlcGFyZSB0aGUgbWF0ZXJpYWxzLCBwcmVwYXJlIHRoZSBlbnZpcm9ubWVudCwgcHJlcGFyZSBsZWFybmVycyBhbmQgcHJvdmlkZSB0aGUgbGVhcm5pbmcgZXhwZXJpZW5jZS4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfYygiaSIsIFtfdm0uX3YoIlByZXZpZXcgdGhlIG1hdGVyaWFscyIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBWaWRlbyBhbmQgd2lkZSBtYXRlcmlhbHMgc2hvdWxkIGJlIHByZXZpZXdlZCBmb3IgYXBwcmFpc2FsIGFuZCBzZWxlY3Rpb24uIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJQcmVwYXJlIHRoZSBtYXRlcmlhbHMvZXF1aXBtZW50IildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFNldCB1cCB0aGUgZXF1aXBtZW50IGZvciBvcGVyYXRpb24gYmVmb3JlIHVzaW5nIGl0IHRvIGVuc3VyZSB0aGF0IGl0IGlzIGZ1bmN0aW9uYWwuIERlY2lkZSBpbiBhZHZhbmNlIGhvdyB5b3Ugd2lsbCBpbnRyb2R1Y2UgdGhlIG1hdGVyaWFsIGFuZCB3aGF0IGZvbGxvdy11cCBhY3Rpdml0aWVzIHRvIGluY2x1ZGUuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJQcmVwYXJlIHRoZSBlbnZpcm9ubWVudCIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBNYWtlIHN1cmUgdGhhdCB0aGUgdmVudWUgZm9yIHZpZXdpbmcgdGhlIHZpZGVvIGFuZCBmaWxtIGlzIHByb3Blcmx5IHNldCwgaW4gdGVybXMgb2Ygc2VhdGluZyBhcnJhbmdlbWVudHMsIGxpZ2h0aW5nLCBhbmQgc291bmQgcHJvZHVjdGlvbi4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfYygiaSIsIFtfdm0uX3YoIlByZXBhcmUgdGhlIGxlYXJuZXJzIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIExldCBzdHVkZW50cyBzZWUgaG93IHRoZSBkYXkncyBsZXNzb24gbGlua3MgdXAgd2l0aCBwcmV2aW91c2x5IGNvdmVyZWQgY29udGVudC4gQ3JlYXRlIGEgbmVlZCB0byBrbm93IGFtb25nIHRoZSBzdHVkZW50cy4gU3RpbXVsYXRlIGN1cmlvc2l0eSBieSBhc2tpbmcgcXVlc3Rpb25zIHRoYXQgc3R1ZGVudHMgd291bGQgbGlrZSBhbnN3ZXJlZCBmcm9tIHRoZSB2aWRlbyBvciBmaWxtLiBDbGFyaWZ5IHRoZSBvYmplY3RpdmVzIG9mIHRoZSBsZXNzb24uIE1lbnRpb24gc3BlY2lmaWMgdGhpbmdzIHRvIGxvb2sgZm9yIGZyb20gdGhlIHByZXNlbnRhdGlvbi4gSWYgYSBsb3Qgb2YgY29udGVudCB3aWxsIGJlIHByZXNlbnRlZCwgZ2l2ZSBzdHVkZW50cyBzb21lIGFkdmFuY2Ugb3JnYW5pemVycy4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfYygiaSIsIFtfdm0uX3YoIlByb3ZpZGUgdGhlIGxlYXJuaW5nIGV4cGVyaWVuY2UiKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgT2JzZXJ2ZSBmb3IgbGVhcm5lciByZWFjdGlvbnMuIEFzIHN0dWRlbnRzIHdhdGNoIHRoZSB2aWRlbyBvciBmaWxtLCBwcm92aWRlIGZvciBsZWFybmVyIHBhcnRpY2lwYXRpb24uIEVuZ2FnZSBzdHVkZW50cyBpbiBhY3Rpdml0aWVzIHRoYXQgd291bGQgYXNzaXN0IGluIGxlYXJuaW5nIHRyYW5zZmVyLiAiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRib2R5IiwgWwogICAgICBfYygidHIiLCBbCiAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIExlY3R1cmUgaW4gY2xhc3Nyb29tIG9yIEludGVybmV0IExhYnMgKG9yIHdoZXJlIGNvbm5lY3Rpb24gaXMgYXZhaWxhYmxlKSAiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoInRkIiwgW192bS5fdigiIExlYXJuaW5nIGFueXdoZXJlLCBhbnl0aW1lICIpXSkKICAgICAgXSksCiAgICAgIF9jKCJ0ciIsIFsKICAgICAgICBfYygidGQiLCBbX3ZtLl92KCIgRS1tYWlsIHRvIGUtbWFpbCAiKV0pLAogICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIiBJbnN0YW50YW5lb3VzIG1lc3NhZ2luZyAiKV0pCiAgICAgIF0pLAogICAgICBfYygidHIiLCBbCiAgICAgICAgX2MoInRkIiwgW192bS5fdigiIFByaXZhdGUgTG9jYXRpb24gIildKSwKICAgICAgICBfYygidGQiLCBbX3ZtLl92KCIgTm8gZ2VvZ3JhcGhpY2FsIGJvdW5kYXJpZXMgIildKQogICAgICBdKSwKICAgICAgX2MoInRyIiwgWwogICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIiBUcmF2ZWwgdGltZSB0byByZWFjaCBJbnRlcm5ldCBzaXRlICIpXSksCiAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgX3ZtLl92KCIgTm8gdHJhdmVsIHRpbWUgd2l0aCB3aXJlbGVzcyBJbnRlcm5ldCBjb25uZWN0aXZpdHkgIikKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJub3RlIG5vdGUtc3VjY2VzcyBtZW1lIHRleHQtanVzdGlmeSIgfSwgWwogICAgICBfYygiYmxvY2txdW90ZSIsIHsgc3RhdGljQ2xhc3M6ICJibG9ja3F1b3RlIGJxLXN1Y2Nlc3MiIH0sIFsKICAgICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiaXRlbS02IiB9IH0sIFsKICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS1mb2xkZXItb3BlbiIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIlVuaXQgc3VtbWFyeSIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtanVzdGlmeSBtZW1lIiB9LCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgSW4gdGhpcyB1bml0IHdlIGhhdmUgZGlzY3Vzc2VkIHRoZSByYW5nZSBvZiBtZWRpYSBmb3IgdGVhY2hpbmcgYW5kIGxlYXJuaW5nIG90aGVyIHRoYW4gcHJpbnQgbWVkaWEuIFdlIGhhdmUgYWxzbyBkaXNjdXNzZWQgdGhlIGFkdmFudGFnZXMgYW5kIGRpc2FkdmFudGFnZXMgb2YgdXNpbmcgZGlmZmVyZW50IHR5cGVzIG9mIG1lZGlhIGR1cmluZyBpbnN0cnVjdGlvbi4gV2Ugd2VudCBvbiB0byBkaXNjdXNzIGhvdyB0byBzZWxlY3QgYW5kIHVzZSBkaWZmZXJlbnQgdHlwZXMgb2YgbWVkaWEgZHVyaW5nIGluc3RydWN0aW9uLiBXZSBhbHNvIGRpc2N1c3NlZCBwcmludGVkIG1hdGVyaWFscy4gV2UgaWRlbnRpZmllZCB0aGUgdmFyaW91cyB0eXBlcyBvZiBwcmludGVkIG1hdGVyaWFscyB0aGF0IHdlIGNvdWxkIHVzZSBkdXJpbmcgaW5zdHJ1Y3Rpb24gYXMgd2VsbCBhcyB0aGUgYWR2YW50YWdlcyBhbmQgZGlzYWR2YW50YWdlcyBvZiB1c2luZyB0aGVzZS4gV2UgaGF2ZSBhbHNvIGRpc2N1c3NlZCBob3cgdG8gc2VsZWN0IGFuZCB1c2UgZGlmZmVyZW50IHR5cGVzIG9mIHByaW50ZWQgbWF0ZXJpYWxzLiBPbmUgaW1wb3J0YW50IHRoaW5nIHdlIGhhdmUgbWVudGlvbmVkIGlzIHRoYXQgd2hlbiBzZWxlY3RpbmcgdGhlIG1hdGVyaWFscyB3ZSBuZWVkIHRvIGNvbnNpZGVyIHdoZXRoZXIgdGhlIG1hdGVyaWFscyB3aWxsIGJlIHVzZWQgZm9yIG1hc3MgaW5zdHJ1Y3Rpb24sIGdyb3VwIGluc3RydWN0aW9uIG9yIGluZGl2aWR1YWxpemVkIGluc3RydWN0aW9uLiBXZSBjb25jbHVkZWQgdGhlIHVuaXQgYnkgZGlzY3Vzc2luZyB0aGUgY3JpdGVyaWEgdGhhdCB3ZSBzaG91bGQgdXNlIHdoZW4gc2VsZWN0aW5nIG9yIGV2YWx1YXRpbmcgcHJpbnRlZCBtYXRlcmlhbHMgZm9yIHVzZSBkdXJpbmcgaW5zdHJ1Y3Rpb24uICIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImgxIiwgeyBhdHRyczogeyBpZDogIml0ZW0tNyIgfSB9LCBbCiAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS0iIH0sIFtfdm0uX3YoIlJlZmVyZW5jZXMiKV0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}